// Generated by rstantools.  Do not edit by hand.

/*
    path is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    path is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with path.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_dfa_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 681> locations_array__ =
  {" (found before start of program)",
  " (in 'dfa', line 164, column 2 to column 41)",
  " (in 'dfa', line 165, column 2 to column 15)",
  " (in 'dfa', line 166, column 2 to column 68)",
  " (in 'dfa', line 167, column 2 to column 73)",
  " (in 'dfa', line 168, column 2 to column 61)",
  " (in 'dfa', line 169, column 2 to column 45)",
  " (in 'dfa', line 170, column 2 to column 56)",
  " (in 'dfa', line 171, column 2 to column 31)",
  " (in 'dfa', line 172, column 2 to column 31)",
  " (in 'dfa', line 173, column 2 to column 57)",
  " (in 'dfa', line 174, column 2 to column 59)",
  " (in 'dfa', line 175, column 2 to column 57)",
  " (in 'dfa', line 176, column 2 to column 38)",
  " (in 'dfa', line 177, column 2 to column 25)",
  " (in 'dfa', line 178, column 2 to column 46)",
  " (in 'dfa', line 179, column 2 to column 50)",
  " (in 'dfa', line 180, column 2 to column 41)",
  " (in 'dfa', line 181, column 2 to column 37)",
  " (in 'dfa', line 182, column 2 to column 73)",
  " (in 'dfa', line 183, column 2 to column 57)",
  " (in 'dfa', line 186, column 2 to column 19)",
  " (in 'dfa', line 187, column 2 to column 16)",
  " (in 'dfa', line 188, column 2 to column 19)",
  " (in 'dfa', line 189, column 2 to column 48)",
  " (in 'dfa', line 190, column 2 to column 50)",
  " (in 'dfa', line 191, column 2 to column 47)",
  " (in 'dfa', line 192, column 2 to column 20)",
  " (in 'dfa', line 193, column 2 to column 22)",
  " (in 'dfa', line 194, column 2 to column 16)",
  " (in 'dfa', line 195, column 2 to column 22)",
  " (in 'dfa', line 196, column 2 to column 50)",
  " (in 'dfa', line 197, column 2 to column 79)",
  " (in 'dfa', line 198, column 2 to column 84)",
  " (in 'dfa', line 199, column 2 to column 33)",
  " (in 'dfa', line 200, column 2 to column 65)",
  " (in 'dfa', line 201, column 2 to column 67)",
  " (in 'dfa', line 202, column 2 to column 47)",
  " (in 'dfa', line 203, column 2 to column 46)",
  " (in 'dfa', line 204, column 2 to column 15)",
  " (in 'dfa', line 205, column 2 to column 22)",
  " (in 'dfa', line 206, column 2 to column 62)",
  " (in 'dfa', line 207, column 2 to column 47)",
  " (in 'dfa', line 210, column 2 to column 31)",
  " (in 'dfa', line 555, column 2 to column 27)",
  " (in 'dfa', line 556, column 2 to column 31)",
  " (in 'dfa', line 557, column 2 to column 31)",
  " (in 'dfa', line 558, column 2 to column 20)",
  " (in 'dfa', line 559, column 2 to column 24)",
  " (in 'dfa', line 560, column 2 to column 43)",
  " (in 'dfa', line 561, column 2 to column 40)",
  " (in 'dfa', line 562, column 2 to column 17)",
  " (in 'dfa', line 213, column 4 to column 21)",
  " (in 'dfa', line 218, column 8 to column 40)",
  " (in 'dfa', line 217, column 13 to line 219, column 7)",
  " (in 'dfa', line 216, column 8 to column 40)",
  " (in 'dfa', line 215, column 29 to line 217, column 7)",
  " (in 'dfa', line 215, column 6 to line 219, column 7)",
  " (in 'dfa', line 214, column 29 to line 220, column 5)",
  " (in 'dfa', line 214, column 4 to line 220, column 5)",
  " (in 'dfa', line 212, column 16 to line 221, column 3)",
  " (in 'dfa', line 212, column 2 to line 221, column 3)",
  " (in 'dfa', line 227, column 19 to column 34)",
  " (in 'dfa', line 227, column 18 to column 35)",
  " (in 'dfa', line 227, column 4 to column 35)",
  " (in 'dfa', line 226, column 9 to line 229, column 3)",
  " (in 'dfa', line 224, column 19 to column 39)",
  " (in 'dfa', line 224, column 18 to column 40)",
  " (in 'dfa', line 224, column 4 to column 40)",
  " (in 'dfa', line 223, column 19 to line 226, column 3)",
  " (in 'dfa', line 223, column 2 to line 229, column 3)",
  " (in 'dfa', line 235, column 19 to column 36)",
  " (in 'dfa', line 235, column 18 to column 37)",
  " (in 'dfa', line 235, column 4 to column 37)",
  " (in 'dfa', line 234, column 9 to line 237, column 3)",
  " (in 'dfa', line 232, column 19 to column 43)",
  " (in 'dfa', line 232, column 18 to column 44)",
  " (in 'dfa', line 232, column 4 to column 44)",
  " (in 'dfa', line 231, column 21 to line 234, column 3)",
  " (in 'dfa', line 231, column 2 to line 237, column 3)",
  " (in 'dfa', line 239, column 19 to column 52)",
  " (in 'dfa', line 239, column 18 to column 53)",
  " (in 'dfa', line 239, column 4 to column 53)",
  " (in 'dfa', line 238, column 28 to line 240, column 3)",
  " (in 'dfa', line 238, column 2 to line 240, column 3)",
  " (in 'dfa', line 242, column 19 to column 56)",
  " (in 'dfa', line 242, column 18 to column 57)",
  " (in 'dfa', line 242, column 4 to column 57)",
  " (in 'dfa', line 241, column 28 to line 243, column 3)",
  " (in 'dfa', line 241, column 2 to line 243, column 3)",
  " (in 'dfa', line 245, column 19 to column 55)",
  " (in 'dfa', line 245, column 18 to column 56)",
  " (in 'dfa', line 245, column 4 to column 56)",
  " (in 'dfa', line 244, column 26 to line 246, column 3)",
  " (in 'dfa', line 244, column 2 to line 246, column 3)",
  " (in 'dfa', line 250, column 6 to column 52)",
  " (in 'dfa', line 249, column 22 to line 251, column 5)",
  " (in 'dfa', line 249, column 4 to line 251, column 5)",
  " (in 'dfa', line 255, column 8 to column 56)",
  " (in 'dfa', line 254, column 23 to line 256, column 7)",
  " (in 'dfa', line 254, column 6 to line 256, column 7)",
  " (in 'dfa', line 253, column 17 to line 257, column 5)",
  " (in 'dfa', line 253, column 4 to line 257, column 5)",
  " (in 'dfa', line 247, column 21 to line 258, column 3)",
  " (in 'dfa', line 247, column 2 to line 258, column 3)",
  " (in 'dfa', line 261, column 6 to column 40)",
  " (in 'dfa', line 260, column 19 to line 262, column 5)",
  " (in 'dfa', line 260, column 4 to line 262, column 5)",
  " (in 'dfa', line 266, column 8 to column 43)",
  " (in 'dfa', line 265, column 28 to line 267, column 7)",
  " (in 'dfa', line 265, column 6 to line 267, column 7)",
  " (in 'dfa', line 264, column 18 to line 268, column 5)",
  " (in 'dfa', line 264, column 4 to line 268, column 5)",
  " (in 'dfa', line 270, column 6 to column 23)",
  " (in 'dfa', line 269, column 18 to line 271, column 5)",
  " (in 'dfa', line 269, column 4 to line 271, column 5)",
  " (in 'dfa', line 278, column 10 to column 27)",
  " (in 'dfa', line 277, column 15 to line 279, column 9)",
  " (in 'dfa', line 276, column 10 to column 28)",
  " (in 'dfa', line 275, column 24 to line 277, column 9)",
  " (in 'dfa', line 275, column 8 to line 279, column 9)",
  " (in 'dfa', line 281, column 8 to column 35)",
  " (in 'dfa', line 284, column 10 to column 59)",
  " (in 'dfa', line 282, column 22 to line 285, column 9)",
  " (in 'dfa', line 282, column 8 to line 285, column 9)",
  " (in 'dfa', line 274, column 20 to line 286, column 7)",
  " (in 'dfa', line 274, column 6 to line 286, column 7)",
  " (in 'dfa', line 273, column 31 to line 287, column 5)",
  " (in 'dfa', line 273, column 4 to line 287, column 5)",
  " (in 'dfa', line 291, column 8 to column 23)",
  " (in 'dfa', line 296, column 10 to column 53)",
  " (in 'dfa', line 295, column 22 to line 297, column 9)",
  " (in 'dfa', line 295, column 8 to line 297, column 9)",
  " (in 'dfa', line 290, column 20 to line 298, column 7)",
  " (in 'dfa', line 290, column 6 to line 298, column 7)",
  " (in 'dfa', line 289, column 20 to line 299, column 5)",
  " (in 'dfa', line 289, column 4 to line 299, column 5)",
  " (in 'dfa', line 303, column 20 to column 67)",
  " (in 'dfa', line 303, column 6 to column 67)",
  " (in 'dfa', line 304, column 6 to column 37)",
  " (in 'dfa', line 305, column 21 to column 41)",
  " (in 'dfa', line 305, column 20 to column 42)",
  " (in 'dfa', line 305, column 6 to column 42)",
  " (in 'dfa', line 300, column 22 to line 306, column 5)",
  " (in 'dfa', line 300, column 4 to line 306, column 5)",
  " (in 'dfa', line 310, column 8 to column 78)",
  " (in 'dfa', line 313, column 10 to column 41)",
  " (in 'dfa', line 312, column 28 to line 314, column 9)",
  " (in 'dfa', line 312, column 8 to line 314, column 9)",
  " (in 'dfa', line 326, column 10 to column 180)",
  " (in 'dfa', line 325, column 15 to line 327, column 9)",
  " (in 'dfa', line 324, column 10 to column 84)",
  " (in 'dfa', line 322, column 25 to line 325, column 9)",
  " (in 'dfa', line 322, column 8 to line 327, column 9)",
  " (in 'dfa', line 309, column 21 to line 328, column 7)",
  " (in 'dfa', line 309, column 6 to line 328, column 7)",
  " (in 'dfa', line 307, column 20 to line 329, column 5)",
  " (in 'dfa', line 307, column 4 to line 329, column 5)",
  " (in 'dfa', line 335, column 8 to column 49)",
  " (in 'dfa', line 332, column 20 to line 336, column 7)",
  " (in 'dfa', line 332, column 6 to line 336, column 7)",
  " (in 'dfa', line 331, column 31 to line 337, column 5)",
  " (in 'dfa', line 331, column 4 to line 337, column 5)",
  " (in 'dfa', line 259, column 30 to line 338, column 3)",
  " (in 'dfa', line 259, column 2 to line 338, column 3)",
  " (in 'dfa', line 343, column 8 to column 23)",
  " (in 'dfa', line 348, column 10 to column 53)",
  " (in 'dfa', line 347, column 22 to line 349, column 9)",
  " (in 'dfa', line 347, column 8 to line 349, column 9)",
  " (in 'dfa', line 342, column 20 to line 350, column 7)",
  " (in 'dfa', line 342, column 6 to line 350, column 7)",
  " (in 'dfa', line 341, column 20 to line 351, column 5)",
  " (in 'dfa', line 341, column 4 to line 351, column 5)",
  " (in 'dfa', line 353, column 20 to column 67)",
  " (in 'dfa', line 353, column 6 to column 67)",
  " (in 'dfa', line 354, column 6 to column 37)",
  " (in 'dfa', line 355, column 21 to column 41)",
  " (in 'dfa', line 355, column 20 to column 42)",
  " (in 'dfa', line 355, column 6 to column 42)",
  " (in 'dfa', line 352, column 22 to line 356, column 5)",
  " (in 'dfa', line 352, column 4 to line 356, column 5)",
  " (in 'dfa', line 359, column 8 to column 78)",
  " (in 'dfa', line 362, column 10 to column 41)",
  " (in 'dfa', line 361, column 28 to line 363, column 9)",
  " (in 'dfa', line 361, column 8 to line 363, column 9)",
  " (in 'dfa', line 375, column 10 to column 180)",
  " (in 'dfa', line 374, column 15 to line 376, column 9)",
  " (in 'dfa', line 373, column 10 to column 84)",
  " (in 'dfa', line 371, column 25 to line 374, column 9)",
  " (in 'dfa', line 371, column 8 to line 376, column 9)",
  " (in 'dfa', line 358, column 21 to line 377, column 7)",
  " (in 'dfa', line 358, column 6 to line 377, column 7)",
  " (in 'dfa', line 357, column 20 to line 378, column 5)",
  " (in 'dfa', line 357, column 4 to line 378, column 5)",
  " (in 'dfa', line 384, column 6 to column 35)",
  " (in 'dfa', line 380, column 18 to line 385, column 5)",
  " (in 'dfa', line 380, column 4 to line 385, column 5)",
  " (in 'dfa', line 339, column 30 to line 386, column 3)",
  " (in 'dfa', line 339, column 2 to line 386, column 3)",
  " (in 'dfa', line 391, column 6 to column 125)",
  " (in 'dfa', line 389, column 30 to line 392, column 5)",
  " (in 'dfa', line 389, column 4 to line 392, column 5)",
  " (in 'dfa', line 388, column 24 to line 393, column 3)",
  " (in 'dfa', line 388, column 2 to line 393, column 3)",
  " (in 'dfa', line 396, column 2 to column 15)",
  " (in 'dfa', line 399, column 4 to column 26)",
  " (in 'dfa', line 398, column 20 to line 400, column 3)",
  " (in 'dfa', line 398, column 2 to line 400, column 3)",
  " (in 'dfa', line 413, column 8 to column 117)",
  " (in 'dfa', line 412, column 32 to line 414, column 7)",
  " (in 'dfa', line 412, column 6 to line 414, column 7)",
  " (in 'dfa', line 409, column 11 to line 415, column 5)",
  " (in 'dfa', line 407, column 8 to column 130)",
  " (in 'dfa', line 404, column 32 to line 408, column 7)",
  " (in 'dfa', line 404, column 6 to line 408, column 7)",
  " (in 'dfa', line 403, column 23 to line 409, column 5)",
  " (in 'dfa', line 403, column 4 to line 415, column 5)",
  " (in 'dfa', line 402, column 24 to line 416, column 3)",
  " (in 'dfa', line 402, column 2 to line 416, column 3)",
  " (in 'dfa', line 421, column 8 to column 29)",
  " (in 'dfa', line 422, column 8 to column 31)",
  " (in 'dfa', line 420, column 20 to line 423, column 7)",
  " (in 'dfa', line 420, column 6 to line 423, column 7)",
  " (in 'dfa', line 419, column 18 to line 424, column 5)",
  " (in 'dfa', line 419, column 4 to line 424, column 5)",
  " (in 'dfa', line 426, column 6 to column 99)",
  " (in 'dfa', line 427, column 6 to column 56)",
  " (in 'dfa', line 425, column 22 to line 428, column 5)",
  " (in 'dfa', line 425, column 4 to line 428, column 5)",
  " (in 'dfa', line 432, column 8 to column 57)",
  " (in 'dfa', line 430, column 20 to line 433, column 7)",
  " (in 'dfa', line 430, column 6 to line 433, column 7)",
  " (in 'dfa', line 429, column 18 to line 434, column 5)",
  " (in 'dfa', line 429, column 4 to line 434, column 5)",
  " (in 'dfa', line 436, column 4 to column 88)",
  " (in 'dfa', line 438, column 6 to column 35)",
  " (in 'dfa', line 439, column 6 to column 56)",
  " (in 'dfa', line 440, column 6 to column 51)",
  " (in 'dfa', line 442, column 6 to column 113)",
  " (in 'dfa', line 444, column 6 to column 107)",
  " (in 'dfa', line 437, column 18 to line 445, column 5)",
  " (in 'dfa', line 437, column 4 to line 445, column 5)",
  " (in 'dfa', line 417, column 35 to line 446, column 3)",
  " (in 'dfa', line 417, column 2 to line 446, column 3)",
  " (in 'dfa', line 563, column 2 to column 8)",
  " (in 'dfa', line 565, column 4 to column 53)",
  " (in 'dfa', line 566, column 4 to column 45)",
  " (in 'dfa', line 564, column 19 to line 567, column 3)",
  " (in 'dfa', line 564, column 2 to line 567, column 3)",
  " (in 'dfa', line 594, column 8 to column 208)",
  " (in 'dfa', line 592, column 24 to line 595, column 7)",
  " (in 'dfa', line 592, column 6 to line 595, column 7)",
  " (in 'dfa', line 591, column 11 to line 596, column 5)",
  " (in 'dfa', line 589, column 8 to column 112)",
  " (in 'dfa', line 588, column 20 to line 590, column 7)",
  " (in 'dfa', line 588, column 6 to line 590, column 7)",
  " (in 'dfa', line 587, column 23 to line 591, column 5)",
  " (in 'dfa', line 587, column 4 to line 596, column 5)",
  " (in 'dfa', line 586, column 9 to line 597, column 3)",
  " (in 'dfa', line 579, column 44 to column 206)",
  " (in 'dfa', line 579, column 26 to column 206)",
  " (in 'dfa', line 579, column 25 to column 207)",
  " (in 'dfa', line 579, column 6 to column 207)",
  " (in 'dfa', line 580, column 44 to column 218)",
  " (in 'dfa', line 580, column 26 to column 218)",
  " (in 'dfa', line 580, column 25 to column 219)",
  " (in 'dfa', line 580, column 6 to column 219)",
  " (in 'dfa', line 581, column 44 to column 162)",
  " (in 'dfa', line 581, column 26 to column 162)",
  " (in 'dfa', line 581, column 25 to column 163)",
  " (in 'dfa', line 581, column 6 to column 163)",
  " (in 'dfa', line 582, column 44 to column 198)",
  " (in 'dfa', line 582, column 26 to column 198)",
  " (in 'dfa', line 582, column 25 to column 199)",
  " (in 'dfa', line 582, column 6 to column 199)",
  " (in 'dfa', line 583, column 44 to column 166)",
  " (in 'dfa', line 583, column 26 to column 166)",
  " (in 'dfa', line 583, column 25 to column 167)",
  " (in 'dfa', line 583, column 6 to column 167)",
  " (in 'dfa', line 584, column 44 to column 184)",
  " (in 'dfa', line 584, column 26 to column 184)",
  " (in 'dfa', line 584, column 25 to column 185)",
  " (in 'dfa', line 584, column 6 to column 185)",
  " (in 'dfa', line 578, column 11 to line 585, column 5)",
  " (in 'dfa', line 571, column 6 to column 12)",
  " (in 'dfa', line 574, column 10 to column 20)",
  " (in 'dfa', line 575, column 10 to column 72)",
  " (in 'dfa', line 573, column 22 to line 576, column 9)",
  " (in 'dfa', line 573, column 8 to line 576, column 9)",
  " (in 'dfa', line 572, column 20 to line 577, column 7)",
  " (in 'dfa', line 572, column 6 to line 577, column 7)",
  " (in 'dfa', line 570, column 23 to line 578, column 5)",
  " (in 'dfa', line 570, column 4 to line 585, column 5)",
  " (in 'dfa', line 569, column 19 to line 586, column 3)",
  " (in 'dfa', line 569, column 2 to line 597, column 3)",
  " (in 'dfa', line 599, column 4 to column 23)",
  " (in 'dfa', line 598, column 16 to line 600, column 3)",
  " (in 'dfa', line 598, column 2 to line 600, column 3)",
  " (in 'dfa', line 613, column 8 to column 76)",
  " (in 'dfa', line 611, column 13 to line 614, column 7)",
  " (in 'dfa', line 609, column 10 to column 91)",
  " (in 'dfa', line 608, column 15 to line 610, column 9)",
  " (in 'dfa', line 607, column 10 to column 88)",
  " (in 'dfa', line 606, column 30 to line 608, column 9)",
  " (in 'dfa', line 606, column 8 to line 610, column 9)",
  " (in 'dfa', line 604, column 26 to line 611, column 7)",
  " (in 'dfa', line 604, column 6 to line 614, column 7)",
  " (in 'dfa', line 615, column 6 to column 43)",
  " (in 'dfa', line 603, column 18 to line 616, column 5)",
  " (in 'dfa', line 603, column 4 to line 616, column 5)",
  " (in 'dfa', line 602, column 16 to line 617, column 3)",
  " (in 'dfa', line 602, column 2 to line 617, column 3)",
  " (in 'dfa', line 621, column 6 to column 67)",
  " (in 'dfa', line 620, column 18 to line 622, column 5)",
  " (in 'dfa', line 620, column 4 to line 622, column 5)",
  " (in 'dfa', line 618, column 22 to line 623, column 3)",
  " (in 'dfa', line 618, column 2 to line 623, column 3)",
  " (in 'dfa', line 626, column 6 to column 78)",
  " (in 'dfa', line 628, column 8 to column 41)",
  " (in 'dfa', line 627, column 26 to line 629, column 7)",
  " (in 'dfa', line 627, column 6 to line 629, column 7)",
  " (in 'dfa', line 631, column 6 to column 147)",
  " (in 'dfa', line 632, column 6 to column 91)",
  " (in 'dfa', line 625, column 19 to line 633, column 5)",
  " (in 'dfa', line 625, column 4 to line 633, column 5)",
  " (in 'dfa', line 624, column 18 to line 634, column 3)",
  " (in 'dfa', line 624, column 2 to line 634, column 3)",
  " (in 'dfa', line 450, column 2 to column 20)",
  " (in 'dfa', line 452, column 4 to column 22)",
  " (in 'dfa', line 451, column 29 to line 453, column 3)",
  " (in 'dfa', line 451, column 2 to line 453, column 3)",
  " (in 'dfa', line 456, column 4 to column 26)",
  " (in 'dfa', line 455, column 24 to line 457, column 3)",
  " (in 'dfa', line 455, column 2 to line 457, column 3)",
  " (in 'dfa', line 460, column 4 to column 22)",
  " (in 'dfa', line 459, column 19 to line 461, column 3)",
  " (in 'dfa', line 459, column 2 to line 461, column 3)",
  " (in 'dfa', line 464, column 4 to column 24)",
  " (in 'dfa', line 463, column 21 to line 465, column 3)",
  " (in 'dfa', line 463, column 2 to line 465, column 3)",
  " (in 'dfa', line 468, column 4 to column 32)",
  " (in 'dfa', line 467, column 24 to line 469, column 3)",
  " (in 'dfa', line 467, column 2 to line 469, column 3)",
  " (in 'dfa', line 471, column 26 to column 53)",
  " (in 'dfa', line 471, column 2 to column 53)",
  " (in 'dfa', line 472, column 26 to column 55)",
  " (in 'dfa', line 472, column 2 to column 55)",
  " (in 'dfa', line 473, column 24 to column 53)",
  " (in 'dfa', line 473, column 2 to column 53)",
  " (in 'dfa', line 476, column 4 to column 33)",
  " (in 'dfa', line 475, column 19 to line 477, column 3)",
  " (in 'dfa', line 475, column 2 to line 477, column 3)",
  " (in 'dfa', line 483, column 4 to column 63)",
  " (in 'dfa', line 486, column 6 to column 37)",
  " (in 'dfa', line 485, column 18 to line 487, column 5)",
  " (in 'dfa', line 485, column 4 to line 487, column 5)",
  " (in 'dfa', line 478, column 16 to line 488, column 3)",
  " (in 'dfa', line 478, column 2 to line 488, column 3)",
  " (in 'dfa', line 511, column 8 to column 33)",
  " (in 'dfa', line 514, column 10 to column 69)",
  " (in 'dfa', line 512, column 26 to line 515, column 9)",
  " (in 'dfa', line 512, column 8 to line 515, column 9)",
  " (in 'dfa', line 510, column 13 to line 516, column 7)",
  " (in 'dfa', line 499, column 12 to column 61)",
  " (in 'dfa', line 498, column 17 to line 500, column 11)",
  " (in 'dfa', line 497, column 12 to column 58)",
  " (in 'dfa', line 496, column 32 to line 498, column 11)",
  " (in 'dfa', line 496, column 10 to line 500, column 11)",
  " (in 'dfa', line 495, column 22 to line 501, column 9)",
  " (in 'dfa', line 495, column 8 to line 501, column 9)",
  " (in 'dfa', line 507, column 12 to column 84)",
  " (in 'dfa', line 506, column 17 to line 508, column 11)",
  " (in 'dfa', line 505, column 12 to column 81)",
  " (in 'dfa', line 504, column 32 to line 506, column 11)",
  " (in 'dfa', line 504, column 10 to line 508, column 11)",
  " (in 'dfa', line 502, column 26 to line 509, column 9)",
  " (in 'dfa', line 502, column 8 to line 509, column 9)",
  " (in 'dfa', line 494, column 26 to line 510, column 7)",
  " (in 'dfa', line 494, column 6 to line 516, column 7)",
  " (in 'dfa', line 493, column 18 to line 517, column 5)",
  " (in 'dfa', line 493, column 4 to line 517, column 5)",
  " (in 'dfa', line 492, column 18 to line 518, column 3)",
  " (in 'dfa', line 492, column 2 to line 518, column 3)",
  " (in 'dfa', line 521, column 6 to column 33)",
  " (in 'dfa', line 520, column 18 to line 522, column 5)",
  " (in 'dfa', line 520, column 4 to line 522, column 5)",
  " (in 'dfa', line 519, column 20 to line 523, column 3)",
  " (in 'dfa', line 519, column 2 to line 523, column 3)",
  " (in 'dfa', line 530, column 6 to column 36)",
  " (in 'dfa', line 529, column 18 to line 531, column 5)",
  " (in 'dfa', line 529, column 4 to line 531, column 5)",
  " (in 'dfa', line 528, column 9 to line 532, column 3)",
  " (in 'dfa', line 526, column 4 to column 21)",
  " (in 'dfa', line 527, column 4 to column 24)",
  " (in 'dfa', line 524, column 30 to line 528, column 3)",
  " (in 'dfa', line 524, column 2 to line 532, column 3)",
  " (in 'dfa', line 550, column 44 to column 258)",
  " (in 'dfa', line 550, column 26 to column 258)",
  " (in 'dfa', line 550, column 25 to column 259)",
  " (in 'dfa', line 550, column 6 to column 259)",
  " (in 'dfa', line 549, column 11 to line 551, column 5)",
  " (in 'dfa', line 548, column 40 to column 141)",
  " (in 'dfa', line 548, column 26 to column 141)",
  " (in 'dfa', line 548, column 25 to column 142)",
  " (in 'dfa', line 548, column 6 to column 142)",
  " (in 'dfa', line 547, column 23 to line 549, column 5)",
  " (in 'dfa', line 547, column 4 to line 551, column 5)",
  " (in 'dfa', line 545, column 9 to line 552, column 3)",
  " (in 'dfa', line 538, column 46 to column 222)",
  " (in 'dfa', line 538, column 28 to column 222)",
  " (in 'dfa', line 538, column 27 to column 223)",
  " (in 'dfa', line 538, column 8 to column 223)",
  " (in 'dfa', line 539, column 46 to column 234)",
  " (in 'dfa', line 539, column 28 to column 234)",
  " (in 'dfa', line 539, column 27 to column 235)",
  " (in 'dfa', line 539, column 8 to column 235)",
  " (in 'dfa', line 540, column 46 to column 178)",
  " (in 'dfa', line 540, column 28 to column 178)",
  " (in 'dfa', line 540, column 27 to column 179)",
  " (in 'dfa', line 540, column 8 to column 179)",
  " (in 'dfa', line 541, column 46 to column 214)",
  " (in 'dfa', line 541, column 28 to column 214)",
  " (in 'dfa', line 541, column 27 to column 215)",
  " (in 'dfa', line 541, column 8 to column 215)",
  " (in 'dfa', line 542, column 46 to column 182)",
  " (in 'dfa', line 542, column 28 to column 182)",
  " (in 'dfa', line 542, column 27 to column 183)",
  " (in 'dfa', line 542, column 8 to column 183)",
  " (in 'dfa', line 543, column 46 to column 200)",
  " (in 'dfa', line 543, column 28 to column 200)",
  " (in 'dfa', line 543, column 27 to column 201)",
  " (in 'dfa', line 543, column 8 to column 201)",
  " (in 'dfa', line 537, column 11 to line 544, column 5)",
  " (in 'dfa', line 536, column 40 to column 95)",
  " (in 'dfa', line 536, column 26 to column 95)",
  " (in 'dfa', line 536, column 25 to column 96)",
  " (in 'dfa', line 536, column 6 to column 96)",
  " (in 'dfa', line 535, column 23 to line 537, column 5)",
  " (in 'dfa', line 535, column 4 to line 544, column 5)",
  " (in 'dfa', line 534, column 19 to line 545, column 3)",
  " (in 'dfa', line 534, column 2 to line 552, column 3)",
  " (in 'dfa', line 58, column 2 to column 17)",
  " (in 'dfa', line 59, column 2 to column 17)",
  " (in 'dfa', line 60, column 2 to column 17)",
  " (in 'dfa', line 61, column 2 to column 18)",
  " (in 'dfa', line 62, column 8 to column 10)",
  " (in 'dfa', line 62, column 2 to column 34)",
  " (in 'dfa', line 63, column 8 to column 10)",
  " (in 'dfa', line 63, column 2 to column 34)",
  " (in 'dfa', line 64, column 2 to column 26)",
  " (in 'dfa', line 65, column 8 to column 9)",
  " (in 'dfa', line 65, column 2 to column 32)",
  " (in 'dfa', line 66, column 2 to column 21)",
  " (in 'dfa', line 67, column 8 to column 13)",
  " (in 'dfa', line 67, column 2 to column 39)",
  " (in 'dfa', line 68, column 8 to column 13)",
  " (in 'dfa', line 68, column 2 to column 39)",
  " (in 'dfa', line 69, column 2 to column 21)",
  " (in 'dfa', line 70, column 8 to column 13)",
  " (in 'dfa', line 70, column 2 to column 41)",
  " (in 'dfa', line 71, column 8 to column 13)",
  " (in 'dfa', line 71, column 2 to column 41)",
  " (in 'dfa', line 72, column 8 to column 13)",
  " (in 'dfa', line 72, column 2 to column 22)",
  " (in 'dfa', line 73, column 8 to column 13)",
  " (in 'dfa', line 73, column 2 to column 34)",
  " (in 'dfa', line 74, column 8 to column 13)",
  " (in 'dfa', line 74, column 2 to column 33)",
  " (in 'dfa', line 75, column 2 to column 20)",
  " (in 'dfa', line 76, column 8 to column 12)",
  " (in 'dfa', line 76, column 2 to column 39)",
  " (in 'dfa', line 77, column 8 to column 12)",
  " (in 'dfa', line 77, column 2 to column 39)",
  " (in 'dfa', line 78, column 2 to column 25)",
  " (in 'dfa', line 79, column 2 to column 18)",
  " (in 'dfa', line 80, column 2 to column 17)",
  " (in 'dfa', line 81, column 2 to column 14)",
  " (in 'dfa', line 82, column 2 to column 14)",
  " (in 'dfa', line 83, column 2 to column 16)",
  " (in 'dfa', line 84, column 2 to column 29)",
  " (in 'dfa', line 85, column 2 to column 27)",
  " (in 'dfa', line 86, column 8 to column 21)",
  " (in 'dfa', line 86, column 2 to column 45)",
  " (in 'dfa', line 87, column 8 to column 21)",
  " (in 'dfa', line 87, column 2 to column 44)",
  " (in 'dfa', line 88, column 8 to column 21)",
  " (in 'dfa', line 88, column 2 to column 43)",
  " (in 'dfa', line 89, column 2 to column 29)",
  " (in 'dfa', line 90, column 2 to column 27)",
  " (in 'dfa', line 91, column 8 to column 21)",
  " (in 'dfa', line 91, column 2 to column 45)",
  " (in 'dfa', line 92, column 8 to column 21)",
  " (in 'dfa', line 92, column 2 to column 44)",
  " (in 'dfa', line 93, column 2 to column 24)",
  " (in 'dfa', line 94, column 2 to column 27)",
  " (in 'dfa', line 95, column 2 to column 34)",
  " (in 'dfa', line 96, column 2 to column 33)",
  " (in 'dfa', line 97, column 2 to column 31)",
  " (in 'dfa', line 98, column 2 to column 22)",
  " (in 'dfa', line 99, column 2 to column 26)",
  " (in 'dfa', line 100, column 2 to column 22)",
  " (in 'dfa', line 101, column 2 to column 23)",
  " (in 'dfa', line 102, column 9 to column 10)",
  " (in 'dfa', line 102, column 12 to column 19)",
  " (in 'dfa', line 102, column 2 to column 30)",
  " (in 'dfa', line 103, column 8 to column 15)",
  " (in 'dfa', line 103, column 2 to column 32)",
  " (in 'dfa', line 107, column 12 to column 19)",
  " (in 'dfa', line 107, column 2 to column 38)",
  " (in 'dfa', line 108, column 2 to column 16)",
  " (in 'dfa', line 109, column 2 to column 41)",
  " (in 'dfa', line 110, column 2 to column 41)",
  " (in 'dfa', line 111, column 2 to column 39)",
  " (in 'dfa', line 112, column 2 to column 44)",
  " (in 'dfa', line 113, column 2 to column 31)",
  " (in 'dfa', line 114, column 8 to column 13)",
  " (in 'dfa', line 114, column 2 to column 40)",
  " (in 'dfa', line 115, column 8 to column 13)",
  " (in 'dfa', line 115, column 2 to column 32)",
  " (in 'dfa', line 118, column 2 to column 13)",
  " (in 'dfa', line 119, column 2 to column 15)",
  " (in 'dfa', line 120, column 9 to column 10)",
  " (in 'dfa', line 120, column 2 to column 18)",
  " (in 'dfa', line 121, column 8 to column 9)",
  " (in 'dfa', line 121, column 2 to column 26)",
  " (in 'dfa', line 122, column 9 to column 29)",
  " (in 'dfa', line 122, column 2 to column 41)",
  " (in 'dfa', line 123, column 9 to column 16)",
  " (in 'dfa', line 123, column 2 to column 26)",
  " (in 'dfa', line 124, column 2 to column 23)",
  " (in 'dfa', line 125, column 2 to column 21)",
  " (in 'dfa', line 127, column 4 to column 21)",
  " (in 'dfa', line 126, column 16 to line 128, column 3)",
  " (in 'dfa', line 126, column 2 to line 128, column 3)",
  " (in 'dfa', line 130, column 4 to column 17)",
  " (in 'dfa', line 129, column 16 to line 131, column 3)",
  " (in 'dfa', line 129, column 2 to line 131, column 3)",
  " (in 'dfa', line 133, column 4 to column 19)",
  " (in 'dfa', line 132, column 22 to line 134, column 3)",
  " (in 'dfa', line 132, column 2 to line 134, column 3)",
  " (in 'dfa', line 136, column 2 to column 19)",
  " (in 'dfa', line 141, column 6 to column 19)",
  " (in 'dfa', line 140, column 11 to line 142, column 5)",
  " (in 'dfa', line 139, column 6 to column 23)",
  " (in 'dfa', line 138, column 21 to line 140, column 5)",
  " (in 'dfa', line 138, column 4 to line 142, column 5)",
  " (in 'dfa', line 137, column 21 to line 143, column 3)",
  " (in 'dfa', line 137, column 2 to line 143, column 3)",
  " (in 'dfa', line 153, column 4 to column 15)",
  " (in 'dfa', line 151, column 9 to line 154, column 3)",
  " (in 'dfa', line 146, column 4 to column 15)",
  " (in 'dfa', line 149, column 6 to column 17)",
  " (in 'dfa', line 147, column 23 to line 150, column 5)",
  " (in 'dfa', line 147, column 4 to line 150, column 5)",
  " (in 'dfa', line 144, column 19 to line 151, column 3)",
  " (in 'dfa', line 144, column 2 to line 154, column 3)",
  " (in 'dfa', line 157, column 18 to column 35)",
  " (in 'dfa', line 157, column 4 to column 35)",
  " (in 'dfa', line 156, column 28 to line 158, column 3)",
  " (in 'dfa', line 156, column 2 to line 158, column 3)",
  " (in 'dfa', line 160, column 2 to column 23)",
  " (in 'dfa', line 161, column 29 to column 47)",
  " (in 'dfa', line 161, column 2 to column 47)",
  " (in 'dfa', line 164, column 9 to column 19)",
  " (in 'dfa', line 164, column 20 to column 34)",
  " (in 'dfa', line 165, column 9 to column 10)",
  " (in 'dfa', line 166, column 18 to column 62)",
  " (in 'dfa', line 167, column 44 to column 69)",
  " (in 'dfa', line 168, column 30 to column 54)",
  " (in 'dfa', line 169, column 8 to column 28)",
  " (in 'dfa', line 169, column 38 to column 39)",
  " (in 'dfa', line 170, column 9 to column 23)",
  " (in 'dfa', line 170, column 25 to column 45)",
  " (in 'dfa', line 171, column 9 to column 20)",
  " (in 'dfa', line 171, column 22 to column 23)",
  " (in 'dfa', line 172, column 9 to column 20)",
  " (in 'dfa', line 172, column 22 to column 23)",
  " (in 'dfa', line 173, column 8 to column 35)",
  " (in 'dfa', line 174, column 8 to column 35)",
  " (in 'dfa', line 175, column 8 to column 33)",
  " (in 'dfa', line 176, column 8 to column 19)",
  " (in 'dfa', line 177, column 8 to column 12)",
  " (in 'dfa', line 178, column 8 to column 17)",
  " (in 'dfa', line 179, column 8 to column 19)",
  " (in 'dfa', line 180, column 8 to column 16)",
  " (in 'dfa', line 181, column 23 to column 29)",
  " (in 'dfa', line 182, column 8 to column 43)",
  " (in 'dfa', line 183, column 8 to column 18)",
  " (in 'dfa', line 183, column 27 to column 42)",
  " (in 'dfa', line 186, column 9 to column 10)",
  " (in 'dfa', line 186, column 11 to column 12)",
  " (in 'dfa', line 187, column 9 to column 10)",
  " (in 'dfa', line 187, column 11 to column 12)",
  " (in 'dfa', line 188, column 9 to column 10)",
  " (in 'dfa', line 188, column 11 to column 12)",
  " (in 'dfa', line 189, column 18 to column 36)",
  " (in 'dfa', line 190, column 18 to column 36)",
  " (in 'dfa', line 191, column 18 to column 34)",
  " (in 'dfa', line 192, column 9 to column 10)",
  " (in 'dfa', line 193, column 9 to column 10)",
  " (in 'dfa', line 194, column 9 to column 10)",
  " (in 'dfa', line 194, column 11 to column 12)",
  " (in 'dfa', line 195, column 9 to column 10)",
  " (in 'dfa', line 196, column 18 to column 39)",
  " (in 'dfa', line 197, column 9 to column 35)",
  " (in 'dfa', line 197, column 37 to column 63)",
  " (in 'dfa', line 198, column 9 to column 39)",
  " (in 'dfa', line 198, column 41 to column 71)",
  " (in 'dfa', line 199, column 9 to column 17)",
  " (in 'dfa', line 199, column 18 to column 19)",
  " (in 'dfa', line 200, column 9 to column 30)",
  " (in 'dfa', line 200, column 32 to column 53)",
  " (in 'dfa', line 201, column 9 to column 30)",
  " (in 'dfa', line 201, column 32 to column 53)",
  " (in 'dfa', line 202, column 9 to column 30)",
  " (in 'dfa', line 203, column 9 to column 30)",
  " (in 'dfa', line 205, column 9 to column 10)",
  " (in 'dfa', line 206, column 9 to column 23)",
  " (in 'dfa', line 206, column 25 to column 45)",
  " (in 'dfa', line 207, column 8 to column 9)",
  " (in 'dfa', line 207, column 18 to column 25)",
  " (in 'dfa', line 207, column 27 to column 34)",
  " (in 'dfa', line 210, column 9 to column 14)",
  " (in 'dfa', line 555, column 9 to column 17)",
  " (in 'dfa', line 556, column 9 to column 15)",
  " (in 'dfa', line 556, column 17 to column 23)",
  " (in 'dfa', line 557, column 9 to column 15)",
  " (in 'dfa', line 557, column 17 to column 23)",
  " (in 'dfa', line 558, column 9 to column 10)",
  " (in 'dfa', line 558, column 11 to column 12)",
  " (in 'dfa', line 559, column 9 to column 10)",
  " (in 'dfa', line 560, column 9 to column 16)",
  " (in 'dfa', line 560, column 18 to column 25)",
  " (in 'dfa', line 561, column 13 to column 20)",
  " (in 'dfa', line 7, column 13 to column 16)",
  " (in 'dfa', line 7, column 17 to column 20)",
  " (in 'dfa', line 7, column 6 to column 29)",
  " (in 'dfa', line 8, column 6 to column 18)",
  " (in 'dfa', line 9, column 6 to column 18)",
  " (in 'dfa', line 10, column 6 to column 18)",
  " (in 'dfa', line 13, column 10 to column 32)",
  " (in 'dfa', line 14, column 10 to column 22)",
  " (in 'dfa', line 17, column 14 to column 36)",
  " (in 'dfa', line 18, column 14 to column 49)",
  " (in 'dfa', line 16, column 27 to line 19, column 13)",
  " (in 'dfa', line 16, column 12 to line 19, column 13)",
  " (in 'dfa', line 15, column 25 to line 20, column 11)",
  " (in 'dfa', line 15, column 10 to line 20, column 11)",
  " (in 'dfa', line 12, column 23 to line 21, column 9)",
  " (in 'dfa', line 12, column 8 to line 21, column 9)",
  " (in 'dfa', line 11, column 21 to line 22, column 7)",
  " (in 'dfa', line 11, column 6 to line 22, column 7)",
  " (in 'dfa', line 23, column 6 to column 20)",
  " (in 'dfa', line 6, column 4 to line 24, column 5)",
  " (in 'dfa', line 3, column 43 to line 25, column 3)",
  " (in 'dfa', line 29, column 13 to column 16)",
  " (in 'dfa', line 29, column 6 to column 27)",
  " (in 'dfa', line 30, column 6 to column 18)",
  " (in 'dfa', line 31, column 6 to column 18)",
  " (in 'dfa', line 34, column 10 to column 32)",
  " (in 'dfa', line 35, column 10 to column 41)",
  " (in 'dfa', line 33, column 23 to line 36, column 9)",
  " (in 'dfa', line 33, column 8 to line 36, column 9)",
  " (in 'dfa', line 32, column 21 to line 37, column 7)",
  " (in 'dfa', line 32, column 6 to line 37, column 7)",
  " (in 'dfa', line 38, column 6 to column 20)",
  " (in 'dfa', line 28, column 4 to line 39, column 5)",
  " (in 'dfa', line 26, column 46 to line 40, column 3)",
  " (in 'dfa', line 44, column 13 to column 16)",
  " (in 'dfa', line 44, column 6 to column 27)",
  " (in 'dfa', line 45, column 6 to column 18)",
  " (in 'dfa', line 46, column 6 to column 18)",
  " (in 'dfa', line 49, column 10 to column 32)",
  " (in 'dfa', line 50, column 10 to column 35)",
  " (in 'dfa', line 48, column 23 to line 51, column 9)",
  " (in 'dfa', line 48, column 8 to line 51, column 9)",
  " (in 'dfa', line 47, column 21 to line 52, column 7)",
  " (in 'dfa', line 47, column 6 to line 52, column 7)",
  " (in 'dfa', line 53, column 6 to column 20)",
  " (in 'dfa', line 43, column 4 to line 54, column 5)",
  " (in 'dfa', line 41, column 47 to line 55, column 3)"};
template <typename T0__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>,-1,-1>
subset(const T0__& x_arg__, const int& drop, const int& P, std::ostream*
       pstream__);
template <typename T0__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>,-1,-1>
subsetvec(const T0__& x_arg__, const int& drop, const int& P, std::ostream*
          pstream__);
template <typename T0__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>,-1,-1>
subsetvec2(const T0__& x_arg__, const int& drop, const int& P, std::ostream*
           pstream__);
template <typename T0__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>,-1,-1>
subset(const T0__& x_arg__, const int& drop, const int& P, std::ostream*
       pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>>;
  int current_statement__ = 0;
  const auto& x = stan::math::to_ref(x_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 634;
    stan::math::validate_non_negative_index("result", "P - 1", (P - 1));
    current_statement__ = 635;
    stan::math::validate_non_negative_index("result", "P - 1", (P - 1));
    Eigen::Matrix<local_scalar_t__,-1,-1> result =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant((P - 1), (P - 1),
        DUMMY_VAR__);
    int rowindx = std::numeric_limits<int>::min();
    int colindx = std::numeric_limits<int>::min();
    current_statement__ = 639;
    rowindx = 0;
    current_statement__ = 651;
    for (int i = 1; i <= P; ++i) {
      current_statement__ = 649;
      if (stan::math::logical_neq(i, drop)) {
        current_statement__ = 640;
        rowindx = (rowindx + 1);
        current_statement__ = 641;
        colindx = 0;
        current_statement__ = 647;
        for (int j = 1; j <= P; ++j) {
          current_statement__ = 645;
          if (stan::math::logical_neq(j, drop)) {
            current_statement__ = 642;
            colindx = (colindx + 1);
            current_statement__ = 643;
            stan::model::assign(result,
              stan::model::rvalue(x, "x", stan::model::index_uni(i),
                stan::model::index_uni(j)), "assigning variable result",
              stan::model::index_uni(rowindx),
              stan::model::index_uni(colindx));
          }
        }
      }
    }
    current_statement__ = 652;
    return result;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>,-1,-1>
subsetvec(const T0__& x_arg__, const int& drop, const int& P, std::ostream*
          pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>>;
  int current_statement__ = 0;
  const auto& x = stan::math::to_ref(x_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 655;
    stan::math::validate_non_negative_index("result", "P - 1", (P - 1));
    Eigen::Matrix<local_scalar_t__,-1,-1> result =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant((P - 1), 1,
        DUMMY_VAR__);
    int rowindx = std::numeric_limits<int>::min();
    current_statement__ = 658;
    rowindx = 0;
    current_statement__ = 664;
    for (int i = 1; i <= P; ++i) {
      current_statement__ = 662;
      if (stan::math::logical_neq(i, drop)) {
        current_statement__ = 659;
        rowindx = (rowindx + 1);
        current_statement__ = 660;
        stan::model::assign(result,
          stan::model::rvalue(x, "x", stan::model::index_uni(i),
            stan::model::index_uni(drop)), "assigning variable result",
          stan::model::index_uni(rowindx), stan::model::index_uni(1));
      }
    }
    current_statement__ = 665;
    return result;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>,-1,-1>
subsetvec2(const T0__& x_arg__, const int& drop, const int& P, std::ostream*
           pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>>;
  int current_statement__ = 0;
  const auto& x = stan::math::to_ref(x_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 668;
    stan::math::validate_non_negative_index("result", "P - 1", (P - 1));
    Eigen::Matrix<local_scalar_t__,-1,-1> result =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant((P - 1), 1,
        DUMMY_VAR__);
    int rowindx = std::numeric_limits<int>::min();
    current_statement__ = 671;
    rowindx = 0;
    current_statement__ = 677;
    for (int i = 1; i <= P; ++i) {
      current_statement__ = 675;
      if (stan::math::logical_neq(i, drop)) {
        current_statement__ = 672;
        rowindx = (rowindx + 1);
        current_statement__ = 673;
        stan::model::assign(result,
          stan::model::rvalue(x, "x", stan::model::index_uni(i)),
          "assigning variable result", stan::model::index_uni(rowindx),
          stan::model::index_uni(1));
      }
    }
    current_statement__ = 678;
    return result;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
#include <stan_meta_header.hpp>
class model_dfa final : public model_base_crtp<model_dfa> {
private:
  int N;
  int P;
  int K;
  int nZ;
  std::vector<int> row_indx;
  std::vector<int> col_indx;
  int nVariances;
  std::vector<int> varIndx;
  int nZero;
  std::vector<int> row_indx_z;
  std::vector<int> col_indx_z;
  int n_pos;
  std::vector<int> row_indx_pos;
  std::vector<int> col_indx_pos;
  std::vector<double> y;
  std::vector<int> y_int;
  std::vector<double> input_offset;
  int n_na;
  std::vector<int> row_indx_na;
  std::vector<int> col_indx_na;
  double nu_fixed;
  int estimate_nu;
  int use_normal;
  int est_cor;
  int est_phi;
  int est_theta;
  int num_obs_covar;
  int n_obs_covar;
  std::vector<std::vector<int>> obs_covar_index;
  std::vector<double> obs_covar_value;
  std::vector<int> match_obs_covar;
  int num_pro_covar;
  int n_pro_covar;
  std::vector<std::vector<int>> pro_covar_index;
  std::vector<double> pro_covar_value;
  std::vector<double> z_bound;
  int long_format;
  int proportional_model;
  int est_sigma_process;
  int n_sigma_process;
  int est_rw;
  int est_spline;
  int est_gp;
  int n_knots;
  Eigen::Matrix<double,-1,-1> X_spline_data__;
  std::vector<double> knot_locs;
  Eigen::Matrix<double,-1,-1> distKnots21_pred_data__;
  int obs_model;
  int est_sigma_params;
  int est_gamma_params;
  int est_nb2_params;
  int use_expansion_prior;
  std::vector<double> gp_theta_prior;
  std::vector<double> inv_var_weights_vec;
  std::vector<double> weights_vec;
  int n_pcor;
  int n_loglik;
  Eigen::Matrix<double,-1,1> zeros_data__;
  std::vector<double> data_locs;
  Eigen::Matrix<double,-1,1> alpha_vec_data__;
  Eigen::Matrix<double,-1,1> muZeros_data__;
  double gp_delta;
  double lower_bound_z;
  int devs_1dim__;
  int devs_2dim__;
  int psi_1dim__;
  int z_1dim__;
  int zpos_1dim__;
  int p_z_1dim__;
  int spline_a_1dim__;
  int spline_a_2dim__;
  int sigma_1dim__;
  int gamma_a_1dim__;
  int nb2_phi_1dim__;
  int phi_1dim__;
  int theta_1dim__;
  int gp_theta_1dim__;
  int sigma_process_1dim__;
  int effectsKnots_1dim__;
  int effectsKnots_2dim__;
  int sigma_vec_1dim__;
  int gamma_a_vec_1dim__;
  int nb_phi_vec_1dim__;
  int psi_root_1dim__;
  int Sigma_derived_1dim__;
  int Sigma_derived_2dim__;
  int Sigma_temp_1dim__;
  int Sigma_temp_2dim__;
  int sigma12_vec_1dim__;
  int temp_sums_1dim__;
  int temp_sums_2dim__;
  int temp_counts_1dim__;
  int temp_counts_2dim__;
  int cond_sigma_vec_1dim__;
  int cond_mean_vec_1dim__;
  int spline_a_trans_1dim__;
  int spline_a_trans_2dim__;
  Eigen::Map<Eigen::Matrix<double,-1,-1>> X_spline{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> distKnots21_pred{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> zeros{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> alpha_vec{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> muZeros{nullptr, 0};
public:
  ~model_dfa() {}
  model_dfa(stan::io::var_context& context__, unsigned int random_seed__ = 0,
            std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_dfa_namespace::model_dfa";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 441;
      context__.validate_dims("data initialization", "N", "int",
        std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      current_statement__ = 441;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 441;
      stan::math::check_greater_or_equal(function__, "N", N, 0);
      current_statement__ = 442;
      context__.validate_dims("data initialization", "P", "int",
        std::vector<size_t>{});
      P = std::numeric_limits<int>::min();
      current_statement__ = 442;
      P = context__.vals_i("P")[(1 - 1)];
      current_statement__ = 442;
      stan::math::check_greater_or_equal(function__, "P", P, 0);
      current_statement__ = 443;
      context__.validate_dims("data initialization", "K", "int",
        std::vector<size_t>{});
      K = std::numeric_limits<int>::min();
      current_statement__ = 443;
      K = context__.vals_i("K")[(1 - 1)];
      current_statement__ = 443;
      stan::math::check_greater_or_equal(function__, "K", K, 0);
      current_statement__ = 444;
      context__.validate_dims("data initialization", "nZ", "int",
        std::vector<size_t>{});
      nZ = std::numeric_limits<int>::min();
      current_statement__ = 444;
      nZ = context__.vals_i("nZ")[(1 - 1)];
      current_statement__ = 444;
      stan::math::check_greater_or_equal(function__, "nZ", nZ, 0);
      current_statement__ = 445;
      stan::math::validate_non_negative_index("row_indx", "nZ", nZ);
      current_statement__ = 446;
      context__.validate_dims("data initialization", "row_indx", "int",
        std::vector<size_t>{static_cast<size_t>(nZ)});
      row_indx = std::vector<int>(nZ, std::numeric_limits<int>::min());
      current_statement__ = 446;
      row_indx = context__.vals_i("row_indx");
      current_statement__ = 446;
      stan::math::check_greater_or_equal(function__, "row_indx", row_indx, 0);
      current_statement__ = 447;
      stan::math::validate_non_negative_index("col_indx", "nZ", nZ);
      current_statement__ = 448;
      context__.validate_dims("data initialization", "col_indx", "int",
        std::vector<size_t>{static_cast<size_t>(nZ)});
      col_indx = std::vector<int>(nZ, std::numeric_limits<int>::min());
      current_statement__ = 448;
      col_indx = context__.vals_i("col_indx");
      current_statement__ = 448;
      stan::math::check_greater_or_equal(function__, "col_indx", col_indx, 0);
      current_statement__ = 449;
      context__.validate_dims("data initialization", "nVariances", "int",
        std::vector<size_t>{});
      nVariances = std::numeric_limits<int>::min();
      current_statement__ = 449;
      nVariances = context__.vals_i("nVariances")[(1 - 1)];
      current_statement__ = 449;
      stan::math::check_greater_or_equal(function__, "nVariances",
        nVariances, 0);
      current_statement__ = 450;
      stan::math::validate_non_negative_index("varIndx", "P", P);
      current_statement__ = 451;
      context__.validate_dims("data initialization", "varIndx", "int",
        std::vector<size_t>{static_cast<size_t>(P)});
      varIndx = std::vector<int>(P, std::numeric_limits<int>::min());
      current_statement__ = 451;
      varIndx = context__.vals_i("varIndx");
      current_statement__ = 451;
      stan::math::check_greater_or_equal(function__, "varIndx", varIndx, 0);
      current_statement__ = 452;
      context__.validate_dims("data initialization", "nZero", "int",
        std::vector<size_t>{});
      nZero = std::numeric_limits<int>::min();
      current_statement__ = 452;
      nZero = context__.vals_i("nZero")[(1 - 1)];
      current_statement__ = 452;
      stan::math::check_greater_or_equal(function__, "nZero", nZero, 0);
      current_statement__ = 453;
      stan::math::validate_non_negative_index("row_indx_z", "nZero", nZero);
      current_statement__ = 454;
      context__.validate_dims("data initialization", "row_indx_z", "int",
        std::vector<size_t>{static_cast<size_t>(nZero)});
      row_indx_z = std::vector<int>(nZero, std::numeric_limits<int>::min());
      current_statement__ = 454;
      row_indx_z = context__.vals_i("row_indx_z");
      current_statement__ = 454;
      stan::math::check_greater_or_equal(function__, "row_indx_z",
        row_indx_z, 0);
      current_statement__ = 455;
      stan::math::validate_non_negative_index("col_indx_z", "nZero", nZero);
      current_statement__ = 456;
      context__.validate_dims("data initialization", "col_indx_z", "int",
        std::vector<size_t>{static_cast<size_t>(nZero)});
      col_indx_z = std::vector<int>(nZero, std::numeric_limits<int>::min());
      current_statement__ = 456;
      col_indx_z = context__.vals_i("col_indx_z");
      current_statement__ = 456;
      stan::math::check_greater_or_equal(function__, "col_indx_z",
        col_indx_z, 0);
      current_statement__ = 457;
      context__.validate_dims("data initialization", "n_pos", "int",
        std::vector<size_t>{});
      n_pos = std::numeric_limits<int>::min();
      current_statement__ = 457;
      n_pos = context__.vals_i("n_pos")[(1 - 1)];
      current_statement__ = 457;
      stan::math::check_greater_or_equal(function__, "n_pos", n_pos, 0);
      current_statement__ = 458;
      stan::math::validate_non_negative_index("row_indx_pos", "n_pos", n_pos);
      current_statement__ = 459;
      context__.validate_dims("data initialization", "row_indx_pos", "int",
        std::vector<size_t>{static_cast<size_t>(n_pos)});
      row_indx_pos = std::vector<int>(n_pos, std::numeric_limits<int>::min());
      current_statement__ = 459;
      row_indx_pos = context__.vals_i("row_indx_pos");
      current_statement__ = 459;
      stan::math::check_greater_or_equal(function__, "row_indx_pos",
        row_indx_pos, 0);
      current_statement__ = 460;
      stan::math::validate_non_negative_index("col_indx_pos", "n_pos", n_pos);
      current_statement__ = 461;
      context__.validate_dims("data initialization", "col_indx_pos", "int",
        std::vector<size_t>{static_cast<size_t>(n_pos)});
      col_indx_pos = std::vector<int>(n_pos, std::numeric_limits<int>::min());
      current_statement__ = 461;
      col_indx_pos = context__.vals_i("col_indx_pos");
      current_statement__ = 461;
      stan::math::check_greater_or_equal(function__, "col_indx_pos",
        col_indx_pos, 0);
      current_statement__ = 462;
      stan::math::validate_non_negative_index("y", "n_pos", n_pos);
      current_statement__ = 463;
      context__.validate_dims("data initialization", "y", "double",
        std::vector<size_t>{static_cast<size_t>(n_pos)});
      y = std::vector<double>(n_pos,
            std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 463;
      y = context__.vals_r("y");
      current_statement__ = 464;
      stan::math::validate_non_negative_index("y_int", "n_pos", n_pos);
      current_statement__ = 465;
      context__.validate_dims("data initialization", "y_int", "int",
        std::vector<size_t>{static_cast<size_t>(n_pos)});
      y_int = std::vector<int>(n_pos, std::numeric_limits<int>::min());
      current_statement__ = 465;
      y_int = context__.vals_i("y_int");
      current_statement__ = 465;
      stan::math::check_greater_or_equal(function__, "y_int", y_int, 0);
      current_statement__ = 466;
      stan::math::validate_non_negative_index("input_offset", "n_pos", n_pos);
      current_statement__ = 467;
      context__.validate_dims("data initialization", "input_offset",
        "double", std::vector<size_t>{static_cast<size_t>(n_pos)});
      input_offset = std::vector<double>(n_pos,
                       std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 467;
      input_offset = context__.vals_r("input_offset");
      current_statement__ = 468;
      context__.validate_dims("data initialization", "n_na", "int",
        std::vector<size_t>{});
      n_na = std::numeric_limits<int>::min();
      current_statement__ = 468;
      n_na = context__.vals_i("n_na")[(1 - 1)];
      current_statement__ = 468;
      stan::math::check_greater_or_equal(function__, "n_na", n_na, 0);
      current_statement__ = 469;
      stan::math::validate_non_negative_index("row_indx_na", "n_na", n_na);
      current_statement__ = 470;
      context__.validate_dims("data initialization", "row_indx_na", "int",
        std::vector<size_t>{static_cast<size_t>(n_na)});
      row_indx_na = std::vector<int>(n_na, std::numeric_limits<int>::min());
      current_statement__ = 470;
      row_indx_na = context__.vals_i("row_indx_na");
      current_statement__ = 470;
      stan::math::check_greater_or_equal(function__, "row_indx_na",
        row_indx_na, 0);
      current_statement__ = 471;
      stan::math::validate_non_negative_index("col_indx_na", "n_na", n_na);
      current_statement__ = 472;
      context__.validate_dims("data initialization", "col_indx_na", "int",
        std::vector<size_t>{static_cast<size_t>(n_na)});
      col_indx_na = std::vector<int>(n_na, std::numeric_limits<int>::min());
      current_statement__ = 472;
      col_indx_na = context__.vals_i("col_indx_na");
      current_statement__ = 472;
      stan::math::check_greater_or_equal(function__, "col_indx_na",
        col_indx_na, 0);
      current_statement__ = 473;
      context__.validate_dims("data initialization", "nu_fixed", "double",
        std::vector<size_t>{});
      nu_fixed = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 473;
      nu_fixed = context__.vals_r("nu_fixed")[(1 - 1)];
      current_statement__ = 473;
      stan::math::check_greater_or_equal(function__, "nu_fixed", nu_fixed, 1);
      current_statement__ = 474;
      context__.validate_dims("data initialization", "estimate_nu", "int",
        std::vector<size_t>{});
      estimate_nu = std::numeric_limits<int>::min();
      current_statement__ = 474;
      estimate_nu = context__.vals_i("estimate_nu")[(1 - 1)];
      current_statement__ = 475;
      context__.validate_dims("data initialization", "use_normal", "int",
        std::vector<size_t>{});
      use_normal = std::numeric_limits<int>::min();
      current_statement__ = 475;
      use_normal = context__.vals_i("use_normal")[(1 - 1)];
      current_statement__ = 476;
      context__.validate_dims("data initialization", "est_cor", "int",
        std::vector<size_t>{});
      est_cor = std::numeric_limits<int>::min();
      current_statement__ = 476;
      est_cor = context__.vals_i("est_cor")[(1 - 1)];
      current_statement__ = 477;
      context__.validate_dims("data initialization", "est_phi", "int",
        std::vector<size_t>{});
      est_phi = std::numeric_limits<int>::min();
      current_statement__ = 477;
      est_phi = context__.vals_i("est_phi")[(1 - 1)];
      current_statement__ = 478;
      context__.validate_dims("data initialization", "est_theta", "int",
        std::vector<size_t>{});
      est_theta = std::numeric_limits<int>::min();
      current_statement__ = 478;
      est_theta = context__.vals_i("est_theta")[(1 - 1)];
      current_statement__ = 479;
      context__.validate_dims("data initialization", "num_obs_covar", "int",
        std::vector<size_t>{});
      num_obs_covar = std::numeric_limits<int>::min();
      current_statement__ = 479;
      num_obs_covar = context__.vals_i("num_obs_covar")[(1 - 1)];
      current_statement__ = 479;
      stan::math::check_greater_or_equal(function__, "num_obs_covar",
        num_obs_covar, 0);
      current_statement__ = 480;
      context__.validate_dims("data initialization", "n_obs_covar", "int",
        std::vector<size_t>{});
      n_obs_covar = std::numeric_limits<int>::min();
      current_statement__ = 480;
      n_obs_covar = context__.vals_i("n_obs_covar")[(1 - 1)];
      current_statement__ = 480;
      stan::math::check_greater_or_equal(function__, "n_obs_covar",
        n_obs_covar, 0);
      current_statement__ = 481;
      stan::math::validate_non_negative_index("obs_covar_index",
        "num_obs_covar", num_obs_covar);
      current_statement__ = 482;
      context__.validate_dims("data initialization", "obs_covar_index",
        "int",
        std::vector<size_t>{static_cast<size_t>(num_obs_covar),
          static_cast<size_t>(3)});
      obs_covar_index = std::vector<std::vector<int>>(num_obs_covar,
                          std::vector<int>(3,
                            std::numeric_limits<int>::min()));
      {
        std::vector<int> obs_covar_index_flat__;
        current_statement__ = 482;
        obs_covar_index_flat__ = context__.vals_i("obs_covar_index");
        current_statement__ = 482;
        pos__ = 1;
        current_statement__ = 482;
        for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
          current_statement__ = 482;
          for (int sym2__ = 1; sym2__ <= num_obs_covar; ++sym2__) {
            current_statement__ = 482;
            stan::model::assign(obs_covar_index,
              obs_covar_index_flat__[(pos__ - 1)],
              "assigning variable obs_covar_index",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 482;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 483;
      stan::math::validate_non_negative_index("obs_covar_value",
        "num_obs_covar", num_obs_covar);
      current_statement__ = 484;
      context__.validate_dims("data initialization", "obs_covar_value",
        "double", std::vector<size_t>{static_cast<size_t>(num_obs_covar)});
      obs_covar_value = std::vector<double>(num_obs_covar,
                          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 484;
      obs_covar_value = context__.vals_r("obs_covar_value");
      current_statement__ = 485;
      stan::math::validate_non_negative_index("match_obs_covar",
        "num_obs_covar", num_obs_covar);
      current_statement__ = 486;
      context__.validate_dims("data initialization", "match_obs_covar",
        "int", std::vector<size_t>{static_cast<size_t>(num_obs_covar)});
      match_obs_covar = std::vector<int>(num_obs_covar,
                          std::numeric_limits<int>::min());
      current_statement__ = 486;
      match_obs_covar = context__.vals_i("match_obs_covar");
      current_statement__ = 487;
      context__.validate_dims("data initialization", "num_pro_covar", "int",
        std::vector<size_t>{});
      num_pro_covar = std::numeric_limits<int>::min();
      current_statement__ = 487;
      num_pro_covar = context__.vals_i("num_pro_covar")[(1 - 1)];
      current_statement__ = 487;
      stan::math::check_greater_or_equal(function__, "num_pro_covar",
        num_pro_covar, 0);
      current_statement__ = 488;
      context__.validate_dims("data initialization", "n_pro_covar", "int",
        std::vector<size_t>{});
      n_pro_covar = std::numeric_limits<int>::min();
      current_statement__ = 488;
      n_pro_covar = context__.vals_i("n_pro_covar")[(1 - 1)];
      current_statement__ = 488;
      stan::math::check_greater_or_equal(function__, "n_pro_covar",
        n_pro_covar, 0);
      current_statement__ = 489;
      stan::math::validate_non_negative_index("pro_covar_index",
        "num_pro_covar", num_pro_covar);
      current_statement__ = 490;
      context__.validate_dims("data initialization", "pro_covar_index",
        "int",
        std::vector<size_t>{static_cast<size_t>(num_pro_covar),
          static_cast<size_t>(3)});
      pro_covar_index = std::vector<std::vector<int>>(num_pro_covar,
                          std::vector<int>(3,
                            std::numeric_limits<int>::min()));
      {
        std::vector<int> pro_covar_index_flat__;
        current_statement__ = 490;
        pro_covar_index_flat__ = context__.vals_i("pro_covar_index");
        current_statement__ = 490;
        pos__ = 1;
        current_statement__ = 490;
        for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
          current_statement__ = 490;
          for (int sym2__ = 1; sym2__ <= num_pro_covar; ++sym2__) {
            current_statement__ = 490;
            stan::model::assign(pro_covar_index,
              pro_covar_index_flat__[(pos__ - 1)],
              "assigning variable pro_covar_index",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 490;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 491;
      stan::math::validate_non_negative_index("pro_covar_value",
        "num_pro_covar", num_pro_covar);
      current_statement__ = 492;
      context__.validate_dims("data initialization", "pro_covar_value",
        "double", std::vector<size_t>{static_cast<size_t>(num_pro_covar)});
      pro_covar_value = std::vector<double>(num_pro_covar,
                          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 492;
      pro_covar_value = context__.vals_r("pro_covar_value");
      current_statement__ = 493;
      context__.validate_dims("data initialization", "z_bound", "double",
        std::vector<size_t>{static_cast<size_t>(2)});
      z_bound = std::vector<double>(2,
                  std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 493;
      z_bound = context__.vals_r("z_bound");
      current_statement__ = 494;
      context__.validate_dims("data initialization", "long_format", "int",
        std::vector<size_t>{});
      long_format = std::numeric_limits<int>::min();
      current_statement__ = 494;
      long_format = context__.vals_i("long_format")[(1 - 1)];
      current_statement__ = 494;
      stan::math::check_greater_or_equal(function__, "long_format",
        long_format, 0);
      current_statement__ = 495;
      context__.validate_dims("data initialization", "proportional_model",
        "int", std::vector<size_t>{});
      proportional_model = std::numeric_limits<int>::min();
      current_statement__ = 495;
      proportional_model = context__.vals_i("proportional_model")[(1 - 1)];
      current_statement__ = 495;
      stan::math::check_greater_or_equal(function__, "proportional_model",
        proportional_model, 0);
      current_statement__ = 496;
      context__.validate_dims("data initialization", "est_sigma_process",
        "int", std::vector<size_t>{});
      est_sigma_process = std::numeric_limits<int>::min();
      current_statement__ = 496;
      est_sigma_process = context__.vals_i("est_sigma_process")[(1 - 1)];
      current_statement__ = 496;
      stan::math::check_greater_or_equal(function__, "est_sigma_process",
        est_sigma_process, 0);
      current_statement__ = 497;
      context__.validate_dims("data initialization", "n_sigma_process",
        "int", std::vector<size_t>{});
      n_sigma_process = std::numeric_limits<int>::min();
      current_statement__ = 497;
      n_sigma_process = context__.vals_i("n_sigma_process")[(1 - 1)];
      current_statement__ = 497;
      stan::math::check_greater_or_equal(function__, "n_sigma_process",
        n_sigma_process, 0);
      current_statement__ = 498;
      context__.validate_dims("data initialization", "est_rw", "int",
        std::vector<size_t>{});
      est_rw = std::numeric_limits<int>::min();
      current_statement__ = 498;
      est_rw = context__.vals_i("est_rw")[(1 - 1)];
      current_statement__ = 498;
      stan::math::check_greater_or_equal(function__, "est_rw", est_rw, 0);
      current_statement__ = 499;
      context__.validate_dims("data initialization", "est_spline", "int",
        std::vector<size_t>{});
      est_spline = std::numeric_limits<int>::min();
      current_statement__ = 499;
      est_spline = context__.vals_i("est_spline")[(1 - 1)];
      current_statement__ = 499;
      stan::math::check_greater_or_equal(function__, "est_spline",
        est_spline, 0);
      current_statement__ = 500;
      context__.validate_dims("data initialization", "est_gp", "int",
        std::vector<size_t>{});
      est_gp = std::numeric_limits<int>::min();
      current_statement__ = 500;
      est_gp = context__.vals_i("est_gp")[(1 - 1)];
      current_statement__ = 500;
      stan::math::check_greater_or_equal(function__, "est_gp", est_gp, 0);
      current_statement__ = 501;
      context__.validate_dims("data initialization", "n_knots", "int",
        std::vector<size_t>{});
      n_knots = std::numeric_limits<int>::min();
      current_statement__ = 501;
      n_knots = context__.vals_i("n_knots")[(1 - 1)];
      current_statement__ = 501;
      stan::math::check_greater_or_equal(function__, "n_knots", n_knots, 0);
      current_statement__ = 502;
      stan::math::validate_non_negative_index("X_spline", "N", N);
      current_statement__ = 503;
      stan::math::validate_non_negative_index("X_spline", "n_knots", n_knots);
      current_statement__ = 504;
      context__.validate_dims("data initialization", "X_spline", "double",
        std::vector<size_t>{static_cast<size_t>(N),
          static_cast<size_t>(n_knots)});
      X_spline_data__ = Eigen::Matrix<double,-1,-1>::Constant(N, n_knots,
                          std::numeric_limits<double>::quiet_NaN());
      new (&X_spline)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(X_spline_data__.data(), N,
        n_knots);
      {
        std::vector<local_scalar_t__> X_spline_flat__;
        current_statement__ = 504;
        X_spline_flat__ = context__.vals_r("X_spline");
        current_statement__ = 504;
        pos__ = 1;
        current_statement__ = 504;
        for (int sym1__ = 1; sym1__ <= n_knots; ++sym1__) {
          current_statement__ = 504;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 504;
            stan::model::assign(X_spline, X_spline_flat__[(pos__ - 1)],
              "assigning variable X_spline", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 504;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 505;
      stan::math::validate_non_negative_index("knot_locs", "n_knots", n_knots);
      current_statement__ = 506;
      context__.validate_dims("data initialization", "knot_locs", "double",
        std::vector<size_t>{static_cast<size_t>(n_knots)});
      knot_locs = std::vector<double>(n_knots,
                    std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 506;
      knot_locs = context__.vals_r("knot_locs");
      current_statement__ = 507;
      stan::math::validate_non_negative_index("distKnots21_pred", "n_knots",
        n_knots);
      current_statement__ = 508;
      context__.validate_dims("data initialization", "distKnots21_pred",
        "double",
        std::vector<size_t>{static_cast<size_t>(1),
          static_cast<size_t>(n_knots)});
      distKnots21_pred_data__ = Eigen::Matrix<double,-1,-1>::Constant(1,
                                  n_knots,
                                  std::numeric_limits<double>::quiet_NaN());
      new (&distKnots21_pred)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(distKnots21_pred_data__.data(),
        1, n_knots);
      {
        std::vector<local_scalar_t__> distKnots21_pred_flat__;
        current_statement__ = 508;
        distKnots21_pred_flat__ = context__.vals_r("distKnots21_pred");
        current_statement__ = 508;
        pos__ = 1;
        current_statement__ = 508;
        for (int sym1__ = 1; sym1__ <= n_knots; ++sym1__) {
          current_statement__ = 508;
          for (int sym2__ = 1; sym2__ <= 1; ++sym2__) {
            current_statement__ = 508;
            stan::model::assign(distKnots21_pred,
              distKnots21_pred_flat__[(pos__ - 1)],
              "assigning variable distKnots21_pred",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 508;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 509;
      context__.validate_dims("data initialization", "obs_model", "int",
        std::vector<size_t>{});
      obs_model = std::numeric_limits<int>::min();
      current_statement__ = 509;
      obs_model = context__.vals_i("obs_model")[(1 - 1)];
      current_statement__ = 510;
      context__.validate_dims("data initialization", "est_sigma_params",
        "int", std::vector<size_t>{});
      est_sigma_params = std::numeric_limits<int>::min();
      current_statement__ = 510;
      est_sigma_params = context__.vals_i("est_sigma_params")[(1 - 1)];
      current_statement__ = 510;
      stan::math::check_greater_or_equal(function__, "est_sigma_params",
        est_sigma_params, 0);
      current_statement__ = 510;
      stan::math::check_less_or_equal(function__, "est_sigma_params",
        est_sigma_params, 1);
      current_statement__ = 511;
      context__.validate_dims("data initialization", "est_gamma_params",
        "int", std::vector<size_t>{});
      est_gamma_params = std::numeric_limits<int>::min();
      current_statement__ = 511;
      est_gamma_params = context__.vals_i("est_gamma_params")[(1 - 1)];
      current_statement__ = 511;
      stan::math::check_greater_or_equal(function__, "est_gamma_params",
        est_gamma_params, 0);
      current_statement__ = 511;
      stan::math::check_less_or_equal(function__, "est_gamma_params",
        est_gamma_params, 1);
      current_statement__ = 512;
      context__.validate_dims("data initialization", "est_nb2_params", "int",
        std::vector<size_t>{});
      est_nb2_params = std::numeric_limits<int>::min();
      current_statement__ = 512;
      est_nb2_params = context__.vals_i("est_nb2_params")[(1 - 1)];
      current_statement__ = 512;
      stan::math::check_greater_or_equal(function__, "est_nb2_params",
        est_nb2_params, 0);
      current_statement__ = 512;
      stan::math::check_less_or_equal(function__, "est_nb2_params",
        est_nb2_params, 1);
      current_statement__ = 513;
      context__.validate_dims("data initialization", "use_expansion_prior",
        "int", std::vector<size_t>{});
      use_expansion_prior = std::numeric_limits<int>::min();
      current_statement__ = 513;
      use_expansion_prior = context__.vals_i("use_expansion_prior")[(1 - 1)];
      current_statement__ = 513;
      stan::math::check_greater_or_equal(function__, "use_expansion_prior",
        use_expansion_prior, 0);
      current_statement__ = 513;
      stan::math::check_less_or_equal(function__, "use_expansion_prior",
        use_expansion_prior, 1);
      current_statement__ = 514;
      context__.validate_dims("data initialization", "gp_theta_prior",
        "double", std::vector<size_t>{static_cast<size_t>(2)});
      gp_theta_prior = std::vector<double>(2,
                         std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 514;
      gp_theta_prior = context__.vals_r("gp_theta_prior");
      current_statement__ = 515;
      stan::math::validate_non_negative_index("inv_var_weights_vec", "n_pos",
        n_pos);
      current_statement__ = 516;
      context__.validate_dims("data initialization", "inv_var_weights_vec",
        "double", std::vector<size_t>{static_cast<size_t>(n_pos)});
      inv_var_weights_vec = std::vector<double>(n_pos,
                              std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 516;
      inv_var_weights_vec = context__.vals_r("inv_var_weights_vec");
      current_statement__ = 517;
      stan::math::validate_non_negative_index("weights_vec", "n_pos", n_pos);
      current_statement__ = 518;
      context__.validate_dims("data initialization", "weights_vec", "double",
        std::vector<size_t>{static_cast<size_t>(n_pos)});
      weights_vec = std::vector<double>(n_pos,
                      std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 518;
      weights_vec = context__.vals_r("weights_vec");
      current_statement__ = 519;
      n_pcor = std::numeric_limits<int>::min();
      current_statement__ = 520;
      n_loglik = std::numeric_limits<int>::min();
      current_statement__ = 521;
      stan::math::validate_non_negative_index("zeros", "K", K);
      current_statement__ = 522;
      zeros_data__ = Eigen::Matrix<double,-1,1>::Constant(K,
                       std::numeric_limits<double>::quiet_NaN());
      new (&zeros)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(zeros_data__.data(), K);
      current_statement__ = 523;
      stan::math::validate_non_negative_index("data_locs", "N", N);
      current_statement__ = 524;
      data_locs = std::vector<double>(N,
                    std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 525;
      stan::math::validate_non_negative_index("alpha_vec",
        "K * proportional_model", (K * proportional_model));
      current_statement__ = 526;
      alpha_vec_data__ = Eigen::Matrix<double,-1,1>::Constant((K *
                           proportional_model),
                           std::numeric_limits<double>::quiet_NaN());
      new (&alpha_vec)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(alpha_vec_data__.data(), (K *
        proportional_model));
      current_statement__ = 527;
      stan::math::validate_non_negative_index("muZeros", "n_knots", n_knots);
      current_statement__ = 528;
      muZeros_data__ = Eigen::Matrix<double,-1,1>::Constant(n_knots,
                         std::numeric_limits<double>::quiet_NaN());
      new (&muZeros)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(muZeros_data__.data(),
        n_knots);
      current_statement__ = 529;
      gp_delta = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 529;
      gp_delta = 1e-9;
      current_statement__ = 530;
      lower_bound_z = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 533;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 531;
        stan::model::assign(data_locs, i, "assigning variable data_locs",
          stan::model::index_uni(i));
      }
      current_statement__ = 536;
      for (int k = 1; k <= K; ++k) {
        current_statement__ = 534;
        stan::model::assign(zeros, 0, "assigning variable zeros",
          stan::model::index_uni(k));
      }
      current_statement__ = 539;
      for (int k = 1; k <= n_knots; ++k) {
        current_statement__ = 537;
        stan::model::assign(muZeros, 0, "assigning variable muZeros",
          stan::model::index_uni(k));
      }
      current_statement__ = 540;
      n_loglik = n_pos;
      current_statement__ = 547;
      if (stan::math::logical_eq(long_format, 0)) {
        current_statement__ = 545;
        if (stan::math::logical_eq(est_cor, 0)) {
          current_statement__ = 543;
          n_loglik = (P * N);
        } else {
          current_statement__ = 541;
          n_loglik = N;
        }
      }
      current_statement__ = 555;
      if (stan::math::logical_eq(est_cor, 0)) {
        current_statement__ = 550;
        n_pcor = P;
        current_statement__ = 553;
        if (stan::math::logical_lt(nVariances, 2)) {
          current_statement__ = 551;
          n_pcor = 2;
        }
      } else {
        current_statement__ = 548;
        n_pcor = P;
      }
      current_statement__ = 559;
      if (stan::math::logical_eq(proportional_model, 1)) {
        current_statement__ = 557;
        for (int k = 1; k <= K; ++k) {
          current_statement__ = 556;
          stan::model::assign(alpha_vec, 1, "assigning variable alpha_vec",
            stan::model::index_uni(k));
        }
      }
      current_statement__ = 560;
      lower_bound_z = -100;
      current_statement__ = 562;
      if (stan::math::logical_eq(use_expansion_prior, 1)) {
        current_statement__ = 561;
        lower_bound_z = 0;
      }
      current_statement__ = 563;
      devs_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 563;
      devs_1dim__ = (K * est_rw);
      current_statement__ = 563;
      stan::math::validate_non_negative_index("devs", "K * est_rw",
        devs_1dim__);
      current_statement__ = 564;
      devs_2dim__ = std::numeric_limits<int>::min();
      current_statement__ = 564;
      devs_2dim__ = ((N - 1) * est_rw);
      current_statement__ = 564;
      stan::math::validate_non_negative_index("devs", "(N - 1) * est_rw",
        devs_2dim__);
      current_statement__ = 565;
      stan::math::validate_non_negative_index("x0", "K", K);
      current_statement__ = 566;
      psi_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 566;
      psi_1dim__ = ((K * (1 - proportional_model)) * use_expansion_prior);
      current_statement__ = 566;
      stan::math::validate_non_negative_index("psi",
        "K * (1 - proportional_model) * use_expansion_prior", psi_1dim__);
      current_statement__ = 567;
      z_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 567;
      z_1dim__ = (nZ * (1 - proportional_model));
      current_statement__ = 567;
      stan::math::validate_non_negative_index("z",
        "nZ * (1 - proportional_model)", z_1dim__);
      current_statement__ = 568;
      zpos_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 568;
      zpos_1dim__ = (K * (1 - proportional_model));
      current_statement__ = 568;
      stan::math::validate_non_negative_index("zpos",
        "K * (1 - proportional_model)", zpos_1dim__);
      current_statement__ = 569;
      p_z_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 569;
      p_z_1dim__ = (P * proportional_model);
      current_statement__ = 569;
      stan::math::validate_non_negative_index("p_z",
        "P * proportional_model", p_z_1dim__);
      current_statement__ = 570;
      stan::math::validate_positive_index("p_z", "K", K);
      current_statement__ = 571;
      spline_a_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 571;
      spline_a_1dim__ = (K * est_spline);
      current_statement__ = 571;
      stan::math::validate_non_negative_index("spline_a", "K * est_spline",
        spline_a_1dim__);
      current_statement__ = 572;
      spline_a_2dim__ = std::numeric_limits<int>::min();
      current_statement__ = 572;
      spline_a_2dim__ = (n_knots * est_spline);
      current_statement__ = 572;
      stan::math::validate_non_negative_index("spline_a",
        "n_knots * est_spline", spline_a_2dim__);
      current_statement__ = 573;
      stan::math::validate_non_negative_index("b_obs", "n_obs_covar",
        n_obs_covar);
      current_statement__ = 574;
      stan::math::validate_non_negative_index("b_obs", "P", P);
      current_statement__ = 575;
      stan::math::validate_non_negative_index("b_pro", "n_pro_covar",
        n_pro_covar);
      current_statement__ = 576;
      stan::math::validate_non_negative_index("b_pro", "K", K);
      current_statement__ = 577;
      sigma_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 577;
      sigma_1dim__ = (nVariances * est_sigma_params);
      current_statement__ = 577;
      stan::math::validate_non_negative_index("sigma",
        "nVariances * est_sigma_params", sigma_1dim__);
      current_statement__ = 578;
      gamma_a_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 578;
      gamma_a_1dim__ = (nVariances * est_gamma_params);
      current_statement__ = 578;
      stan::math::validate_non_negative_index("gamma_a",
        "nVariances * est_gamma_params", gamma_a_1dim__);
      current_statement__ = 579;
      nb2_phi_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 579;
      nb2_phi_1dim__ = (nVariances * est_nb2_params);
      current_statement__ = 579;
      stan::math::validate_non_negative_index("nb2_phi",
        "nVariances * est_nb2_params", nb2_phi_1dim__);
      current_statement__ = 580;
      stan::math::validate_non_negative_index("nu", "estimate_nu",
        estimate_nu);
      current_statement__ = 581;
      stan::math::validate_non_negative_index("ymiss", "n_na", n_na);
      current_statement__ = 582;
      phi_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 582;
      phi_1dim__ = (est_phi * K);
      current_statement__ = 582;
      stan::math::validate_non_negative_index("phi", "est_phi * K",
        phi_1dim__);
      current_statement__ = 583;
      theta_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 583;
      theta_1dim__ = (est_theta * K);
      current_statement__ = 583;
      stan::math::validate_non_negative_index("theta", "est_theta * K",
        theta_1dim__);
      current_statement__ = 584;
      gp_theta_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 584;
      gp_theta_1dim__ = (est_gp * K);
      current_statement__ = 584;
      stan::math::validate_non_negative_index("gp_theta", "est_gp * K",
        gp_theta_1dim__);
      current_statement__ = 585;
      stan::math::validate_non_negative_index("Lcorr", "n_pcor", n_pcor);
      current_statement__ = 585;
      stan::math::validate_non_negative_index("Lcorr", "n_pcor", n_pcor);
      current_statement__ = 586;
      sigma_process_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 586;
      sigma_process_1dim__ = (est_sigma_process * n_sigma_process);
      current_statement__ = 586;
      stan::math::validate_non_negative_index("sigma_process",
        "est_sigma_process * n_sigma_process", sigma_process_1dim__);
      current_statement__ = 587;
      effectsKnots_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 587;
      effectsKnots_1dim__ = (K * est_gp);
      current_statement__ = 587;
      stan::math::validate_non_negative_index("effectsKnots", "K * est_gp",
        effectsKnots_1dim__);
      current_statement__ = 588;
      effectsKnots_2dim__ = std::numeric_limits<int>::min();
      current_statement__ = 588;
      effectsKnots_2dim__ = (n_knots * est_gp);
      current_statement__ = 588;
      stan::math::validate_non_negative_index("effectsKnots",
        "n_knots * est_gp", effectsKnots_2dim__);
      current_statement__ = 589;
      stan::math::validate_non_negative_index("pred", "P", P);
      current_statement__ = 590;
      stan::math::validate_non_negative_index("pred", "N", N);
      current_statement__ = 591;
      stan::math::validate_non_negative_index("Z", "P", P);
      current_statement__ = 592;
      stan::math::validate_non_negative_index("Z", "K", K);
      current_statement__ = 593;
      stan::math::validate_non_negative_index("yall", "P", P);
      current_statement__ = 594;
      stan::math::validate_non_negative_index("yall", "N", N);
      current_statement__ = 595;
      sigma_vec_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 595;
      sigma_vec_1dim__ = (P * est_sigma_params);
      current_statement__ = 595;
      stan::math::validate_non_negative_index("sigma_vec",
        "P * est_sigma_params", sigma_vec_1dim__);
      current_statement__ = 596;
      gamma_a_vec_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 596;
      gamma_a_vec_1dim__ = (P * est_gamma_params);
      current_statement__ = 596;
      stan::math::validate_non_negative_index("gamma_a_vec",
        "P * est_gamma_params", gamma_a_vec_1dim__);
      current_statement__ = 597;
      nb_phi_vec_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 597;
      nb_phi_vec_1dim__ = (P * est_nb2_params);
      current_statement__ = 597;
      stan::math::validate_non_negative_index("nb_phi_vec",
        "P * est_nb2_params", nb_phi_vec_1dim__);
      current_statement__ = 598;
      stan::math::validate_non_negative_index("phi_vec", "K", K);
      current_statement__ = 599;
      stan::math::validate_non_negative_index("theta_vec", "K", K);
      current_statement__ = 600;
      stan::math::validate_non_negative_index("x", "K", K);
      current_statement__ = 601;
      stan::math::validate_non_negative_index("x", "N", N);
      current_statement__ = 602;
      stan::math::validate_non_negative_index("indicator", "K", K);
      current_statement__ = 603;
      psi_root_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 603;
      psi_root_1dim__ = (K * use_expansion_prior);
      current_statement__ = 603;
      stan::math::validate_non_negative_index("psi_root",
        "K * use_expansion_prior", psi_root_1dim__);
      current_statement__ = 604;
      Sigma_derived_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 604;
      Sigma_derived_1dim__ = ((n_pcor * long_format) * est_cor);
      current_statement__ = 604;
      stan::math::validate_non_negative_index("Sigma_derived",
        "n_pcor * long_format * est_cor", Sigma_derived_1dim__);
      current_statement__ = 605;
      Sigma_derived_2dim__ = std::numeric_limits<int>::min();
      current_statement__ = 605;
      Sigma_derived_2dim__ = ((n_pcor * long_format) * est_cor);
      current_statement__ = 605;
      stan::math::validate_non_negative_index("Sigma_derived",
        "n_pcor * long_format * est_cor", Sigma_derived_2dim__);
      current_statement__ = 606;
      Sigma_temp_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 606;
      Sigma_temp_1dim__ = (((n_pcor - 1) * long_format) * est_cor);
      current_statement__ = 606;
      stan::math::validate_non_negative_index("Sigma_temp",
        "(n_pcor - 1) * long_format * est_cor", Sigma_temp_1dim__);
      current_statement__ = 607;
      Sigma_temp_2dim__ = std::numeric_limits<int>::min();
      current_statement__ = 607;
      Sigma_temp_2dim__ = (((n_pcor - 1) * long_format) * est_cor);
      current_statement__ = 607;
      stan::math::validate_non_negative_index("Sigma_temp",
        "(n_pcor - 1) * long_format * est_cor", Sigma_temp_2dim__);
      current_statement__ = 608;
      sigma12_vec_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 608;
      sigma12_vec_1dim__ = (n_pcor - 1);
      current_statement__ = 608;
      stan::math::validate_non_negative_index("sigma12_vec", "n_pcor - 1",
        sigma12_vec_1dim__);
      current_statement__ = 609;
      stan::math::validate_non_negative_index("sigma12_vec", "1", 1);
      current_statement__ = 610;
      temp_sums_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 610;
      temp_sums_1dim__ = ((P * long_format) * est_cor);
      current_statement__ = 610;
      stan::math::validate_non_negative_index("temp_sums",
        "P * long_format * est_cor", temp_sums_1dim__);
      current_statement__ = 611;
      temp_sums_2dim__ = std::numeric_limits<int>::min();
      current_statement__ = 611;
      temp_sums_2dim__ = ((N * long_format) * est_cor);
      current_statement__ = 611;
      stan::math::validate_non_negative_index("temp_sums",
        "N * long_format * est_cor", temp_sums_2dim__);
      current_statement__ = 612;
      temp_counts_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 612;
      temp_counts_1dim__ = ((P * long_format) * est_cor);
      current_statement__ = 612;
      stan::math::validate_non_negative_index("temp_counts",
        "P * long_format * est_cor", temp_counts_1dim__);
      current_statement__ = 613;
      temp_counts_2dim__ = std::numeric_limits<int>::min();
      current_statement__ = 613;
      temp_counts_2dim__ = ((N * long_format) * est_cor);
      current_statement__ = 613;
      stan::math::validate_non_negative_index("temp_counts",
        "N * long_format * est_cor", temp_counts_2dim__);
      current_statement__ = 614;
      cond_sigma_vec_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 614;
      cond_sigma_vec_1dim__ = ((P * long_format) * est_cor);
      current_statement__ = 614;
      stan::math::validate_non_negative_index("cond_sigma_vec",
        "P * long_format * est_cor", cond_sigma_vec_1dim__);
      current_statement__ = 615;
      cond_mean_vec_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 615;
      cond_mean_vec_1dim__ = ((P * long_format) * est_cor);
      current_statement__ = 615;
      stan::math::validate_non_negative_index("cond_mean_vec",
        "P * long_format * est_cor", cond_mean_vec_1dim__);
      current_statement__ = 616;
      stan::math::validate_non_negative_index("sigma_pro", "K", K);
      current_statement__ = 617;
      spline_a_trans_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 617;
      spline_a_trans_1dim__ = (K * est_spline);
      current_statement__ = 617;
      stan::math::validate_non_negative_index("spline_a_trans",
        "K * est_spline", spline_a_trans_1dim__);
      current_statement__ = 618;
      spline_a_trans_2dim__ = std::numeric_limits<int>::min();
      current_statement__ = 618;
      spline_a_trans_2dim__ = (n_knots * est_spline);
      current_statement__ = 618;
      stan::math::validate_non_negative_index("spline_a_trans",
        "n_knots * est_spline", spline_a_trans_2dim__);
      current_statement__ = 619;
      stan::math::validate_non_negative_index("SigmaKnots", "K", K);
      current_statement__ = 620;
      stan::math::validate_non_negative_index("SigmaKnots", "n_knots",
        n_knots);
      current_statement__ = 621;
      stan::math::validate_non_negative_index("SigmaKnots", "n_knots",
        n_knots);
      current_statement__ = 622;
      stan::math::validate_non_negative_index("obs_cov_offset", "n_pos",
        n_pos);
      current_statement__ = 623;
      stan::math::validate_non_negative_index("log_lik", "n_loglik", n_loglik);
      current_statement__ = 624;
      stan::math::validate_non_negative_index("Omega", "n_pcor", n_pcor);
      current_statement__ = 625;
      stan::math::validate_non_negative_index("Omega", "n_pcor", n_pcor);
      current_statement__ = 626;
      stan::math::validate_non_negative_index("Sigma", "n_pcor", n_pcor);
      current_statement__ = 627;
      stan::math::validate_non_negative_index("Sigma", "n_pcor", n_pcor);
      current_statement__ = 628;
      stan::math::validate_non_negative_index("xstar", "K", K);
      current_statement__ = 629;
      stan::math::validate_non_negative_index("xstar", "1", 1);
      current_statement__ = 630;
      stan::math::validate_non_negative_index("future_devs", "K", K);
      current_statement__ = 631;
      stan::math::validate_non_negative_index("SigmaKnots_pred", "n_knots",
        n_knots);
      current_statement__ = 632;
      stan::math::validate_non_negative_index("SigmaKnots_pred", "n_knots",
        n_knots);
      current_statement__ = 633;
      stan::math::validate_non_negative_index("SigmaOffDiag_pred", "n_knots",
        n_knots);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = (devs_1dim__ * devs_2dim__) + K + psi_1dim__ + z_1dim__
      + zpos_1dim__ + (p_z_1dim__ * (K - 1)) + (spline_a_1dim__ *
      spline_a_2dim__) + (n_obs_covar * P) + (n_pro_covar * K) + sigma_1dim__
      + gamma_a_1dim__ + nb2_phi_1dim__ + estimate_nu + n_na + phi_1dim__ +
      theta_1dim__ + gp_theta_1dim__ + ((n_pcor * (n_pcor - 1)) / 2) +
      sigma_process_1dim__ + (effectsKnots_1dim__ * effectsKnots_2dim__);
  }
  inline std::string model_name() const final {
    return "model_dfa";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ = "model_dfa_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,-1> devs =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(devs_1dim__,
          devs_2dim__, DUMMY_VAR__);
      current_statement__ = 1;
      devs = in__.template read<
               Eigen::Matrix<local_scalar_t__,-1,-1>>(devs_1dim__,
               devs_2dim__);
      Eigen::Matrix<local_scalar_t__,-1,1> x0 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
      current_statement__ = 2;
      x0 = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(K);
      Eigen::Matrix<local_scalar_t__,-1,1> psi =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(psi_1dim__,
          DUMMY_VAR__);
      current_statement__ = 3;
      psi = in__.template read_constrain_lb<
              Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__,
              psi_1dim__);
      Eigen::Matrix<local_scalar_t__,-1,1> z =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(z_1dim__, DUMMY_VAR__);
      current_statement__ = 4;
      z = in__.template read_constrain_lub<
            Eigen::Matrix<local_scalar_t__,-1,1>,
            jacobian__>(stan::model::rvalue(z_bound, "z_bound",
                          stan::model::index_uni(1)),
            stan::model::rvalue(z_bound, "z_bound", stan::model::index_uni(2)),
            lp__, z_1dim__);
      Eigen::Matrix<local_scalar_t__,-1,1> zpos =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(zpos_1dim__,
          DUMMY_VAR__);
      current_statement__ = 5;
      zpos = in__.template read_constrain_lb<
               Eigen::Matrix<local_scalar_t__,-1,1>,
               jacobian__>(lower_bound_z, lp__, zpos_1dim__);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> p_z =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(p_z_1dim__,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__));
      current_statement__ = 6;
      p_z = in__.template read_constrain_simplex<
              std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>,
              jacobian__>(lp__, p_z_1dim__, K);
      Eigen::Matrix<local_scalar_t__,-1,-1> spline_a =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(spline_a_1dim__,
          spline_a_2dim__, DUMMY_VAR__);
      current_statement__ = 7;
      spline_a = in__.template read<
                   Eigen::Matrix<local_scalar_t__,-1,-1>>(spline_a_1dim__,
                   spline_a_2dim__);
      Eigen::Matrix<local_scalar_t__,-1,-1> b_obs =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(n_obs_covar, P,
          DUMMY_VAR__);
      current_statement__ = 8;
      b_obs = in__.template read<
                Eigen::Matrix<local_scalar_t__,-1,-1>>(n_obs_covar, P);
      Eigen::Matrix<local_scalar_t__,-1,-1> b_pro =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(n_pro_covar, K,
          DUMMY_VAR__);
      current_statement__ = 9;
      b_pro = in__.template read<
                Eigen::Matrix<local_scalar_t__,-1,-1>>(n_pro_covar, K);
      std::vector<local_scalar_t__> sigma =
        std::vector<local_scalar_t__>(sigma_1dim__, DUMMY_VAR__);
      current_statement__ = 10;
      sigma = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
                jacobian__>(0, lp__, sigma_1dim__);
      std::vector<local_scalar_t__> gamma_a =
        std::vector<local_scalar_t__>(gamma_a_1dim__, DUMMY_VAR__);
      current_statement__ = 11;
      gamma_a = in__.template read_constrain_lb<
                  std::vector<local_scalar_t__>, jacobian__>(0, lp__,
                  gamma_a_1dim__);
      std::vector<local_scalar_t__> nb2_phi =
        std::vector<local_scalar_t__>(nb2_phi_1dim__, DUMMY_VAR__);
      current_statement__ = 12;
      nb2_phi = in__.template read_constrain_lb<
                  std::vector<local_scalar_t__>, jacobian__>(0, lp__,
                  nb2_phi_1dim__);
      std::vector<local_scalar_t__> nu =
        std::vector<local_scalar_t__>(estimate_nu, DUMMY_VAR__);
      current_statement__ = 13;
      nu = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
             jacobian__>(2, lp__, estimate_nu);
      std::vector<local_scalar_t__> ymiss =
        std::vector<local_scalar_t__>(n_na, DUMMY_VAR__);
      current_statement__ = 14;
      ymiss = in__.template read<std::vector<local_scalar_t__>>(n_na);
      std::vector<local_scalar_t__> phi =
        std::vector<local_scalar_t__>(phi_1dim__, DUMMY_VAR__);
      current_statement__ = 15;
      phi = in__.template read_constrain_lub<std::vector<local_scalar_t__>,
              jacobian__>(-1, 1, lp__, phi_1dim__);
      std::vector<local_scalar_t__> theta =
        std::vector<local_scalar_t__>(theta_1dim__, DUMMY_VAR__);
      current_statement__ = 16;
      theta = in__.template read_constrain_lub<std::vector<local_scalar_t__>,
                jacobian__>(-1, 1, lp__, theta_1dim__);
      std::vector<local_scalar_t__> gp_theta =
        std::vector<local_scalar_t__>(gp_theta_1dim__, DUMMY_VAR__);
      current_statement__ = 17;
      gp_theta = in__.template read_constrain_lb<
                   std::vector<local_scalar_t__>, jacobian__>(0, lp__,
                   gp_theta_1dim__);
      Eigen::Matrix<local_scalar_t__,-1,-1> Lcorr =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(n_pcor, n_pcor,
          DUMMY_VAR__);
      current_statement__ = 18;
      Lcorr = in__.template read_constrain_cholesky_factor_corr<
                Eigen::Matrix<local_scalar_t__,-1,-1>, jacobian__>(lp__,
                n_pcor);
      std::vector<local_scalar_t__> sigma_process =
        std::vector<local_scalar_t__>(sigma_process_1dim__, DUMMY_VAR__);
      current_statement__ = 19;
      sigma_process = in__.template read_constrain_lb<
                        std::vector<local_scalar_t__>, jacobian__>(0, lp__,
                        sigma_process_1dim__);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> effectsKnots =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(effectsKnots_1dim__,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(effectsKnots_2dim__,
            DUMMY_VAR__));
      current_statement__ = 20;
      effectsKnots = in__.template read<
                       std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>>(effectsKnots_1dim__,
                       effectsKnots_2dim__);
      Eigen::Matrix<local_scalar_t__,-1,-1> pred =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(P, N, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,-1> Z =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(P, K, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,-1> yall =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(P, N, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> sigma_vec =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(sigma_vec_1dim__,
          DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> gamma_a_vec =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(gamma_a_vec_1dim__,
          DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> nb_phi_vec =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nb_phi_vec_1dim__,
          DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> phi_vec =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> theta_vec =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,-1> x =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(K, N, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> indicator =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> psi_root =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(psi_root_1dim__,
          DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,-1> Sigma_derived =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(Sigma_derived_1dim__,
          Sigma_derived_2dim__, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,-1> Sigma_temp =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(Sigma_temp_1dim__,
          Sigma_temp_2dim__, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,-1> sigma12_vec =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(sigma12_vec_1dim__,
          1, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,-1> temp_sums =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(temp_sums_1dim__,
          temp_sums_2dim__, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,-1> temp_counts =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(temp_counts_1dim__,
          temp_counts_2dim__, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> cond_sigma_vec =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(cond_sigma_vec_1dim__,
          DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> cond_mean_vec =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(cond_mean_vec_1dim__,
          DUMMY_VAR__);
      local_scalar_t__ sigma11 = DUMMY_VAR__;
      Eigen::Matrix<local_scalar_t__,-1,1> sigma_pro =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,-1> spline_a_trans =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(spline_a_trans_1dim__,
          spline_a_trans_2dim__, DUMMY_VAR__);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>> SigmaKnots =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>(K,
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(n_knots, n_knots,
            DUMMY_VAR__));
      Eigen::Matrix<local_scalar_t__,-1,1> obs_cov_offset =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_pos, DUMMY_VAR__);
      current_statement__ = 61;
      for (int k = 1; k <= K; ++k) {
        current_statement__ = 52;
        stan::model::assign(sigma_pro, 1, "assigning variable sigma_pro",
          stan::model::index_uni(k));
        current_statement__ = 59;
        if (stan::math::logical_eq(est_sigma_process, 1)) {
          current_statement__ = 57;
          if (stan::math::logical_eq(n_sigma_process, 1)) {
            current_statement__ = 55;
            stan::model::assign(sigma_pro,
              stan::model::rvalue(sigma_process, "sigma_process",
                stan::model::index_uni(1)), "assigning variable sigma_pro",
              stan::model::index_uni(k));
          } else {
            current_statement__ = 53;
            stan::model::assign(sigma_pro,
              stan::model::rvalue(sigma_process, "sigma_process",
                stan::model::index_uni(k)), "assigning variable sigma_pro",
              stan::model::index_uni(k));
          }
        }
      }
      current_statement__ = 70;
      if (stan::math::logical_eq(est_phi, 1)) {
        current_statement__ = 68;
        for (int k = 1; k <= K; ++k) {
          current_statement__ = 66;
          stan::model::assign(phi_vec,
            stan::model::rvalue(phi, "phi", stan::model::index_uni(k)),
            "assigning variable phi_vec", stan::model::index_uni(k));
        }
      } else {
        current_statement__ = 64;
        for (int k = 1; k <= K; ++k) {
          current_statement__ = 62;
          stan::model::assign(phi_vec, 1, "assigning variable phi_vec",
            stan::model::index_uni(k));
        }
      }
      current_statement__ = 79;
      if (stan::math::logical_eq(est_theta, 1)) {
        current_statement__ = 77;
        for (int k = 1; k <= K; ++k) {
          current_statement__ = 75;
          stan::model::assign(theta_vec,
            stan::model::rvalue(theta, "theta", stan::model::index_uni(k)),
            "assigning variable theta_vec", stan::model::index_uni(k));
        }
      } else {
        current_statement__ = 73;
        for (int k = 1; k <= K; ++k) {
          current_statement__ = 71;
          stan::model::assign(theta_vec, 0, "assigning variable theta_vec",
            stan::model::index_uni(k));
        }
      }
      current_statement__ = 84;
      if (stan::math::logical_eq(est_sigma_params, 1)) {
        current_statement__ = 82;
        for (int p = 1; p <= P; ++p) {
          current_statement__ = 80;
          stan::model::assign(sigma_vec,
            stan::model::rvalue(sigma, "sigma",
              stan::model::index_uni(
                stan::model::rvalue(varIndx, "varIndx",
                  stan::model::index_uni(p)))),
            "assigning variable sigma_vec", stan::model::index_uni(p));
        }
      }
      current_statement__ = 89;
      if (stan::math::logical_eq(est_gamma_params, 1)) {
        current_statement__ = 87;
        for (int p = 1; p <= P; ++p) {
          current_statement__ = 85;
          stan::model::assign(gamma_a_vec,
            stan::model::rvalue(gamma_a, "gamma_a",
              stan::model::index_uni(
                stan::model::rvalue(varIndx, "varIndx",
                  stan::model::index_uni(p)))),
            "assigning variable gamma_a_vec", stan::model::index_uni(p));
        }
      }
      current_statement__ = 94;
      if (stan::math::logical_eq(est_nb2_params, 1)) {
        current_statement__ = 92;
        for (int p = 1; p <= P; ++p) {
          current_statement__ = 90;
          stan::model::assign(nb_phi_vec,
            stan::model::rvalue(nb2_phi, "nb2_phi",
              stan::model::index_uni(
                stan::model::rvalue(varIndx, "varIndx",
                  stan::model::index_uni(p)))),
            "assigning variable nb_phi_vec", stan::model::index_uni(p));
        }
      }
      current_statement__ = 104;
      if (stan::math::logical_eq(long_format, 0)) {
        current_statement__ = 97;
        for (int i = 1; i <= n_pos; ++i) {
          current_statement__ = 95;
          stan::model::assign(yall,
            stan::model::rvalue(y, "y", stan::model::index_uni(i)),
            "assigning variable yall",
            stan::model::index_uni(
              stan::model::rvalue(row_indx_pos, "row_indx_pos",
                stan::model::index_uni(i))),
            stan::model::index_uni(
              stan::model::rvalue(col_indx_pos, "col_indx_pos",
                stan::model::index_uni(i))));
        }
        current_statement__ = 102;
        if (stan::math::logical_gt(n_na, 0)) {
          current_statement__ = 100;
          for (int i = 1; i <= n_na; ++i) {
            current_statement__ = 98;
            stan::model::assign(yall,
              stan::model::rvalue(ymiss, "ymiss", stan::model::index_uni(i)),
              "assigning variable yall",
              stan::model::index_uni(
                stan::model::rvalue(row_indx_na, "row_indx_na",
                  stan::model::index_uni(i))),
              stan::model::index_uni(
                stan::model::rvalue(col_indx_na, "col_indx_na",
                  stan::model::index_uni(i))));
          }
        }
      }
      current_statement__ = 164;
      if (stan::math::logical_eq(proportional_model, 0)) {
        current_statement__ = 107;
        for (int i = 1; i <= nZ; ++i) {
          current_statement__ = 105;
          stan::model::assign(Z,
            stan::model::rvalue(z, "z", stan::model::index_uni(i)),
            "assigning variable Z",
            stan::model::index_uni(
              stan::model::rvalue(row_indx, "row_indx",
                stan::model::index_uni(i))),
            stan::model::index_uni(
              stan::model::rvalue(col_indx, "col_indx",
                stan::model::index_uni(i))));
        }
        current_statement__ = 112;
        if (stan::math::logical_gt(nZero, 2)) {
          current_statement__ = 110;
          for (int i = 1; i <= (nZero - 2); ++i) {
            current_statement__ = 108;
            stan::model::assign(Z, 0, "assigning variable Z",
              stan::model::index_uni(
                stan::model::rvalue(row_indx_z, "row_indx_z",
                  stan::model::index_uni(i))),
              stan::model::index_uni(
                stan::model::rvalue(col_indx_z, "col_indx_z",
                  stan::model::index_uni(i))));
          }
        }
        current_statement__ = 115;
        for (int k = 1; k <= K; ++k) {
          current_statement__ = 113;
          stan::model::assign(Z,
            stan::model::rvalue(zpos, "zpos", stan::model::index_uni(k)),
            "assigning variable Z", stan::model::index_uni(k),
            stan::model::index_uni(k));
        }
        current_statement__ = 128;
        if (stan::math::logical_eq(use_expansion_prior, 1)) {
          current_statement__ = 126;
          for (int k = 1; k <= K; ++k) {
            current_statement__ = 120;
            if (stan::math::logical_lt(
                  stan::model::rvalue(zpos, "zpos", stan::model::index_uni(k)),
                  0)) {
              current_statement__ = 118;
              stan::model::assign(indicator, -1,
                "assigning variable indicator", stan::model::index_uni(k));
            } else {
              current_statement__ = 116;
              stan::model::assign(indicator, 1,
                "assigning variable indicator", stan::model::index_uni(k));
            }
            current_statement__ = 121;
            stan::model::assign(psi_root,
              stan::math::sqrt(
                stan::model::rvalue(psi, "psi", stan::model::index_uni(k))),
              "assigning variable psi_root", stan::model::index_uni(k));
            current_statement__ = 124;
            for (int p = 1; p <= P; ++p) {
              current_statement__ = 122;
              stan::model::assign(Z,
                ((stan::model::rvalue(Z, "Z", stan::model::index_uni(p),
                    stan::model::index_uni(k)) *
                stan::model::rvalue(indicator, "indicator",
                  stan::model::index_uni(k))) * (1 /
                stan::model::rvalue(psi_root, "psi_root",
                  stan::model::index_uni(k)))), "assigning variable Z",
                stan::model::index_uni(p), stan::model::index_uni(k));
            }
          }
        }
        current_statement__ = 136;
        if (stan::math::logical_eq(est_rw, 1)) {
          current_statement__ = 134;
          for (int k = 1; k <= K; ++k) {
            current_statement__ = 129;
            stan::model::assign(x,
              stan::model::rvalue(x0, "x0", stan::model::index_uni(k)),
              "assigning variable x", stan::model::index_uni(k),
              stan::model::index_uni(1));
            current_statement__ = 132;
            for (int t = 2; t <= N; ++t) {
              current_statement__ = 130;
              stan::model::assign(x,
                ((stan::model::rvalue(phi_vec, "phi_vec",
                    stan::model::index_uni(k)) *
                stan::model::rvalue(x, "x", stan::model::index_uni(k),
                  stan::model::index_uni((t - 1)))) +
                stan::model::rvalue(devs, "devs", stan::model::index_uni(k),
                  stan::model::index_uni((t - 1)))), "assigning variable x",
                stan::model::index_uni(k), stan::model::index_uni(t));
            }
          }
        }
        current_statement__ = 144;
        if (stan::math::logical_eq(est_spline, 1)) {
          current_statement__ = 138;
          for (int k = 1; k <= K; ++k) {
            current_statement__ = 137;
            stan::model::assign(spline_a_trans,
              stan::math::multiply(
                stan::model::rvalue(spline_a, "spline_a",
                  stan::model::index_uni(k)),
                stan::model::rvalue(sigma_pro, "sigma_pro",
                  stan::model::index_uni(k))),
              "assigning variable spline_a_trans", stan::model::index_uni(k));
          }
          current_statement__ = 139;
          stan::model::assign(x,
            stan::math::multiply(spline_a_trans,
              stan::math::transpose(X_spline)), "assigning variable x");
          current_statement__ = 142;
          for (int k = 1; k <= K; ++k) {
            current_statement__ = 140;
            stan::model::assign(x,
              stan::math::add(
                stan::model::rvalue(x0, "x0", stan::model::index_uni(k)),
                stan::model::deep_copy(
                  stan::model::rvalue(x, "x", stan::model::index_uni(k)))),
              "assigning variable x", stan::model::index_uni(k));
          }
        }
        current_statement__ = 157;
        if (stan::math::logical_eq(est_gp, 1)) {
          current_statement__ = 155;
          for (int k = 1; k <= K; ++k) {
            current_statement__ = 145;
            stan::model::assign(SigmaKnots,
              stan::math::gp_exp_quad_cov(knot_locs,
                stan::model::rvalue(sigma_pro, "sigma_pro",
                  stan::model::index_uni(k)),
                stan::model::rvalue(gp_theta, "gp_theta",
                  stan::model::index_uni(k))),
              "assigning variable SigmaKnots", stan::model::index_uni(k));
            current_statement__ = 148;
            for (int i = 1; i <= n_knots; ++i) {
              current_statement__ = 146;
              stan::model::assign(SigmaKnots,
                (stan::model::rvalue(SigmaKnots, "SigmaKnots",
                   stan::model::index_uni(k), stan::model::index_uni(i),
                   stan::model::index_uni(i)) + gp_delta),
                "assigning variable SigmaKnots", stan::model::index_uni(k),
                stan::model::index_uni(i), stan::model::index_uni(i));
            }
            current_statement__ = 153;
            if (stan::math::logical_eq(n_knots, N)) {
              current_statement__ = 151;
              stan::model::assign(x,
                stan::math::to_row_vector(
                  stan::math::multiply(
                    stan::math::cholesky_decompose(
                      stan::model::rvalue(SigmaKnots, "SigmaKnots",
                        stan::model::index_uni(k))),
                    stan::model::rvalue(effectsKnots, "effectsKnots",
                      stan::model::index_uni(k)))), "assigning variable x",
                stan::model::index_uni(k));
            } else {
              current_statement__ = 149;
              stan::model::assign(x,
                stan::math::to_row_vector(
                  stan::math::multiply(
                    stan::math::multiply(
                      stan::math::multiply(
                        stan::math::gp_exp_quad_cov(data_locs, knot_locs,
                          stan::model::rvalue(sigma_pro, "sigma_pro",
                            stan::model::index_uni(k)),
                          stan::model::rvalue(gp_theta, "gp_theta",
                            stan::model::index_uni(k))),
                        stan::math::inverse_spd(
                          stan::model::rvalue(SigmaKnots, "SigmaKnots",
                            stan::model::index_uni(k)))),
                      stan::math::cholesky_decompose(
                        stan::model::rvalue(SigmaKnots, "SigmaKnots",
                          stan::model::index_uni(k)))),
                    stan::model::rvalue(effectsKnots, "effectsKnots",
                      stan::model::index_uni(k)))), "assigning variable x",
                stan::model::index_uni(k));
            }
          }
        }
        current_statement__ = 162;
        if (stan::math::logical_eq(use_expansion_prior, 1)) {
          current_statement__ = 160;
          for (int k = 1; k <= K; ++k) {
            current_statement__ = 158;
            stan::model::assign(x,
              stan::math::multiply(
                stan::math::multiply(
                  stan::model::deep_copy(
                    stan::model::rvalue(x, "x", stan::model::index_uni(k))),
                  stan::model::rvalue(indicator, "indicator",
                    stan::model::index_uni(k))),
                stan::model::rvalue(psi_root, "psi_root",
                  stan::model::index_uni(k))), "assigning variable x",
              stan::model::index_uni(k));
          }
        }
      }
      current_statement__ = 198;
      if (stan::math::logical_eq(proportional_model, 1)) {
        current_statement__ = 172;
        if (stan::math::logical_eq(est_rw, 1)) {
          current_statement__ = 170;
          for (int k = 1; k <= K; ++k) {
            current_statement__ = 165;
            stan::model::assign(x,
              stan::model::rvalue(x0, "x0", stan::model::index_uni(k)),
              "assigning variable x", stan::model::index_uni(k),
              stan::model::index_uni(1));
            current_statement__ = 168;
            for (int t = 2; t <= N; ++t) {
              current_statement__ = 166;
              stan::model::assign(x,
                ((stan::model::rvalue(phi_vec, "phi_vec",
                    stan::model::index_uni(k)) *
                stan::model::rvalue(x, "x", stan::model::index_uni(k),
                  stan::model::index_uni((t - 1)))) +
                stan::model::rvalue(devs, "devs", stan::model::index_uni(k),
                  stan::model::index_uni((t - 1)))), "assigning variable x",
                stan::model::index_uni(k), stan::model::index_uni(t));
            }
          }
        }
        current_statement__ = 180;
        if (stan::math::logical_eq(est_spline, 1)) {
          current_statement__ = 174;
          for (int k = 1; k <= K; ++k) {
            current_statement__ = 173;
            stan::model::assign(spline_a_trans,
              stan::math::multiply(
                stan::model::rvalue(spline_a, "spline_a",
                  stan::model::index_uni(k)),
                stan::model::rvalue(sigma_pro, "sigma_pro",
                  stan::model::index_uni(k))),
              "assigning variable spline_a_trans", stan::model::index_uni(k));
          }
          current_statement__ = 175;
          stan::model::assign(x,
            stan::math::multiply(spline_a_trans,
              stan::math::transpose(X_spline)), "assigning variable x");
          current_statement__ = 178;
          for (int k = 1; k <= K; ++k) {
            current_statement__ = 176;
            stan::model::assign(x,
              stan::math::add(
                stan::model::rvalue(x0, "x0", stan::model::index_uni(k)),
                stan::model::deep_copy(
                  stan::model::rvalue(x, "x", stan::model::index_uni(k)))),
              "assigning variable x", stan::model::index_uni(k));
          }
        }
        current_statement__ = 193;
        if (stan::math::logical_eq(est_gp, 1)) {
          current_statement__ = 191;
          for (int k = 1; k <= K; ++k) {
            current_statement__ = 181;
            stan::model::assign(SigmaKnots,
              stan::math::gp_exp_quad_cov(knot_locs,
                stan::model::rvalue(sigma_pro, "sigma_pro",
                  stan::model::index_uni(k)),
                stan::model::rvalue(gp_theta, "gp_theta",
                  stan::model::index_uni(k))),
              "assigning variable SigmaKnots", stan::model::index_uni(k));
            current_statement__ = 184;
            for (int i = 1; i <= n_knots; ++i) {
              current_statement__ = 182;
              stan::model::assign(SigmaKnots,
                (stan::model::rvalue(SigmaKnots, "SigmaKnots",
                   stan::model::index_uni(k), stan::model::index_uni(i),
                   stan::model::index_uni(i)) + gp_delta),
                "assigning variable SigmaKnots", stan::model::index_uni(k),
                stan::model::index_uni(i), stan::model::index_uni(i));
            }
            current_statement__ = 189;
            if (stan::math::logical_eq(n_knots, N)) {
              current_statement__ = 187;
              stan::model::assign(x,
                stan::math::to_row_vector(
                  stan::math::multiply(
                    stan::math::cholesky_decompose(
                      stan::model::rvalue(SigmaKnots, "SigmaKnots",
                        stan::model::index_uni(k))),
                    stan::model::rvalue(effectsKnots, "effectsKnots",
                      stan::model::index_uni(k)))), "assigning variable x",
                stan::model::index_uni(k));
            } else {
              current_statement__ = 185;
              stan::model::assign(x,
                stan::math::to_row_vector(
                  stan::math::multiply(
                    stan::math::multiply(
                      stan::math::multiply(
                        stan::math::gp_exp_quad_cov(data_locs, knot_locs,
                          stan::model::rvalue(sigma_pro, "sigma_pro",
                            stan::model::index_uni(k)),
                          stan::model::rvalue(gp_theta, "gp_theta",
                            stan::model::index_uni(k))),
                        stan::math::inverse_spd(
                          stan::model::rvalue(SigmaKnots, "SigmaKnots",
                            stan::model::index_uni(k)))),
                      stan::math::cholesky_decompose(
                        stan::model::rvalue(SigmaKnots, "SigmaKnots",
                          stan::model::index_uni(k)))),
                    stan::model::rvalue(effectsKnots, "effectsKnots",
                      stan::model::index_uni(k)))), "assigning variable x",
                stan::model::index_uni(k));
            }
          }
        }
        current_statement__ = 196;
        for (int p = 1; p <= P; ++p) {
          current_statement__ = 194;
          stan::model::assign(Z,
            stan::math::to_row_vector(
              stan::model::rvalue(p_z, "p_z", stan::model::index_uni(p))),
            "assigning variable Z", stan::model::index_uni(p));
        }
      }
      current_statement__ = 203;
      if (stan::math::logical_gt(num_pro_covar, 0)) {
        current_statement__ = 201;
        for (int i = 1; i <= num_pro_covar; ++i) {
          current_statement__ = 199;
          stan::model::assign(x,
            (stan::model::rvalue(x, "x",
               stan::model::index_uni(
                 stan::model::rvalue(pro_covar_index, "pro_covar_index",
                   stan::model::index_uni(i), stan::model::index_uni(2))),
               stan::model::index_uni(
                 stan::model::rvalue(pro_covar_index, "pro_covar_index",
                   stan::model::index_uni(i), stan::model::index_uni(1)))) +
            (stan::model::rvalue(b_pro, "b_pro",
               stan::model::index_uni(
                 stan::model::rvalue(pro_covar_index, "pro_covar_index",
                   stan::model::index_uni(i), stan::model::index_uni(3))),
               stan::model::index_uni(
                 stan::model::rvalue(pro_covar_index, "pro_covar_index",
                   stan::model::index_uni(i), stan::model::index_uni(2)))) *
            stan::model::rvalue(pro_covar_value, "pro_covar_value",
              stan::model::index_uni(i)))), "assigning variable x",
            stan::model::index_uni(
              stan::model::rvalue(pro_covar_index, "pro_covar_index",
                stan::model::index_uni(i), stan::model::index_uni(2))),
            stan::model::index_uni(
              stan::model::rvalue(pro_covar_index, "pro_covar_index",
                stan::model::index_uni(i), stan::model::index_uni(1))));
        }
      }
      current_statement__ = 204;
      stan::model::assign(pred, stan::math::multiply(Z, x),
        "assigning variable pred");
      current_statement__ = 207;
      for (int i = 1; i <= n_pos; ++i) {
        current_statement__ = 205;
        stan::model::assign(obs_cov_offset, 0,
          "assigning variable obs_cov_offset", stan::model::index_uni(i));
      }
      current_statement__ = 218;
      if (stan::math::logical_gt(num_obs_covar, 0)) {
        current_statement__ = 216;
        if (stan::math::logical_eq(long_format, 0)) {
          current_statement__ = 214;
          for (int i = 1; i <= num_obs_covar; ++i) {
            current_statement__ = 212;
            stan::model::assign(pred,
              (stan::model::rvalue(pred, "pred",
                 stan::model::index_uni(
                   stan::model::rvalue(obs_covar_index, "obs_covar_index",
                     stan::model::index_uni(i), stan::model::index_uni(2))),
                 stan::model::index_uni(
                   stan::model::rvalue(obs_covar_index, "obs_covar_index",
                     stan::model::index_uni(i), stan::model::index_uni(1))))
              +
              (stan::model::rvalue(b_obs, "b_obs",
                 stan::model::index_uni(
                   stan::model::rvalue(obs_covar_index, "obs_covar_index",
                     stan::model::index_uni(i), stan::model::index_uni(3))),
                 stan::model::index_uni(
                   stan::model::rvalue(obs_covar_index, "obs_covar_index",
                     stan::model::index_uni(i), stan::model::index_uni(2))))
              *
              stan::model::rvalue(obs_covar_value, "obs_covar_value",
                stan::model::index_uni(i)))), "assigning variable pred",
              stan::model::index_uni(
                stan::model::rvalue(obs_covar_index, "obs_covar_index",
                  stan::model::index_uni(i), stan::model::index_uni(2))),
              stan::model::index_uni(
                stan::model::rvalue(obs_covar_index, "obs_covar_index",
                  stan::model::index_uni(i), stan::model::index_uni(1))));
          }
        } else {
          current_statement__ = 210;
          for (int i = 1; i <= num_obs_covar; ++i) {
            current_statement__ = 208;
            stan::model::assign(obs_cov_offset,
              (stan::model::rvalue(obs_cov_offset, "obs_cov_offset",
                 stan::model::index_uni(
                   stan::model::rvalue(match_obs_covar, "match_obs_covar",
                     stan::model::index_uni(i)))) +
              (stan::model::rvalue(b_obs, "b_obs",
                 stan::model::index_uni(
                   stan::model::rvalue(obs_covar_index, "obs_covar_index",
                     stan::model::index_uni(i), stan::model::index_uni(3))),
                 stan::model::index_uni(
                   stan::model::rvalue(obs_covar_index, "obs_covar_index",
                     stan::model::index_uni(i), stan::model::index_uni(2))))
              *
              stan::model::rvalue(obs_covar_value, "obs_covar_value",
                stan::model::index_uni(i)))),
              "assigning variable obs_cov_offset",
              stan::model::index_uni(
                stan::model::rvalue(match_obs_covar, "match_obs_covar",
                  stan::model::index_uni(i))));
          }
        }
      }
      current_statement__ = 243;
      if ((stan::math::primitive_value(stan::math::logical_eq(long_format, 1))
          && stan::math::primitive_value(stan::math::logical_eq(est_cor, 1)))) {
        current_statement__ = 224;
        for (int n = 1; n <= N; ++n) {
          current_statement__ = 222;
          for (int p = 1; p <= P; ++p) {
            current_statement__ = 219;
            stan::model::assign(temp_sums, 0.0,
              "assigning variable temp_sums", stan::model::index_uni(p),
              stan::model::index_uni(n));
            current_statement__ = 220;
            stan::model::assign(temp_counts, 0.0,
              "assigning variable temp_counts", stan::model::index_uni(p),
              stan::model::index_uni(n));
          }
        }
        current_statement__ = 228;
        for (int i = 1; i <= n_pos; ++i) {
          current_statement__ = 225;
          stan::model::assign(temp_sums,
            (stan::model::rvalue(temp_sums, "temp_sums",
               stan::model::index_uni(
                 stan::model::rvalue(row_indx_pos, "row_indx_pos",
                   stan::model::index_uni(i))),
               stan::model::index_uni(
                 stan::model::rvalue(col_indx_pos, "col_indx_pos",
                   stan::model::index_uni(i)))) +
            (stan::model::rvalue(y, "y", stan::model::index_uni(i)) -
            stan::model::rvalue(pred, "pred",
              stan::model::index_uni(
                stan::model::rvalue(row_indx_pos, "row_indx_pos",
                  stan::model::index_uni(i))),
              stan::model::index_uni(
                stan::model::rvalue(col_indx_pos, "col_indx_pos",
                  stan::model::index_uni(i)))))),
            "assigning variable temp_sums",
            stan::model::index_uni(
              stan::model::rvalue(row_indx_pos, "row_indx_pos",
                stan::model::index_uni(i))),
            stan::model::index_uni(
              stan::model::rvalue(col_indx_pos, "col_indx_pos",
                stan::model::index_uni(i))));
          current_statement__ = 226;
          stan::model::assign(temp_counts,
            (stan::model::rvalue(temp_counts, "temp_counts",
               stan::model::index_uni(
                 stan::model::rvalue(row_indx_pos, "row_indx_pos",
                   stan::model::index_uni(i))),
               stan::model::index_uni(
                 stan::model::rvalue(col_indx_pos, "col_indx_pos",
                   stan::model::index_uni(i)))) + 1),
            "assigning variable temp_counts",
            stan::model::index_uni(
              stan::model::rvalue(row_indx_pos, "row_indx_pos",
                stan::model::index_uni(i))),
            stan::model::index_uni(
              stan::model::rvalue(col_indx_pos, "col_indx_pos",
                stan::model::index_uni(i))));
        }
        current_statement__ = 233;
        for (int n = 1; n <= N; ++n) {
          current_statement__ = 231;
          for (int p = 1; p <= P; ++p) {
            current_statement__ = 229;
            stan::model::assign(temp_sums,
              (stan::model::rvalue(temp_sums, "temp_sums",
                 stan::model::index_uni(p), stan::model::index_uni(n)) /
              stan::model::rvalue(temp_counts, "temp_counts",
                stan::model::index_uni(p), stan::model::index_uni(n))),
              "assigning variable temp_sums", stan::model::index_uni(p),
              stan::model::index_uni(n));
          }
        }
        current_statement__ = 234;
        stan::model::assign(Sigma_derived,
          stan::math::quad_form_diag(
            stan::math::multiply_lower_tri_self_transpose(Lcorr), sigma_vec),
          "assigning variable Sigma_derived");
        current_statement__ = 241;
        for (int p = 1; p <= P; ++p) {
          current_statement__ = 235;
          sigma11 = stan::model::rvalue(Sigma_derived, "Sigma_derived",
                      stan::model::index_uni(p), stan::model::index_uni(p));
          current_statement__ = 236;
          stan::model::assign(Sigma_temp,
            stan::math::inverse(subset(Sigma_derived, p, P, pstream__)),
            "assigning variable Sigma_temp");
          current_statement__ = 237;
          stan::model::assign(sigma12_vec,
            subsetvec(Sigma_derived, p, P, pstream__),
            "assigning variable sigma12_vec");
          current_statement__ = 238;
          stan::model::assign(cond_mean_vec,
            stan::math::multiply(
              stan::math::multiply(stan::math::to_row_vector(sigma12_vec),
                Sigma_temp),
              stan::math::to_vector(
                subsetvec2(stan::math::col(temp_sums, p), p, P, pstream__))),
            "assigning variable cond_mean_vec", stan::model::index_uni(p));
          current_statement__ = 239;
          stan::model::assign(cond_sigma_vec,
            stan::math::sqrt((sigma11 -
              stan::math::multiply(
                stan::math::multiply(stan::math::to_row_vector(sigma12_vec),
                  Sigma_temp), stan::math::to_vector(sigma12_vec)))),
            "assigning variable cond_sigma_vec", stan::model::index_uni(p));
        }
      }
      current_statement__ = 24;
      stan::math::check_greater_or_equal(function__, "sigma_vec", sigma_vec,
        0);
      current_statement__ = 25;
      stan::math::check_greater_or_equal(function__, "gamma_a_vec",
        gamma_a_vec, 0);
      current_statement__ = 26;
      stan::math::check_greater_or_equal(function__, "nb_phi_vec",
        nb_phi_vec, 0);
      current_statement__ = 31;
      stan::math::check_greater_or_equal(function__, "psi_root", psi_root, 0);
      {
        current_statement__ = 327;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(x0, 0, 1));
        current_statement__ = 330;
        if (stan::math::logical_eq(use_expansion_prior, 1)) {
          current_statement__ = 328;
          lp_accum__.add(stan::math::gamma_lpdf<propto__>(psi, 2, 1));
        }
        current_statement__ = 333;
        if (stan::math::logical_eq(estimate_nu, 1)) {
          current_statement__ = 331;
          lp_accum__.add(stan::math::gamma_lpdf<propto__>(
                           stan::model::rvalue(nu, "nu",
                             stan::model::index_uni(1)), 2, 0.1));
        }
        current_statement__ = 336;
        if (stan::math::logical_eq(est_phi, 1)) {
          current_statement__ = 334;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(phi, 0, 1));
        }
        current_statement__ = 339;
        if (stan::math::logical_eq(est_theta, 1)) {
          current_statement__ = 337;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(theta, 0, 1));
        }
        current_statement__ = 342;
        if (est_sigma_process) {
          current_statement__ = 340;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(sigma_process, 0,
                           1));
        }
        current_statement__ = 344;
        if (stan::math::logical_eq(est_sigma_params, 1)) {
          current_statement__ = 343;
          lp_accum__.add(stan::math::student_t_lpdf<propto__>(sigma, 3, 0, 1));
        }
        current_statement__ = 346;
        if (stan::math::logical_eq(est_gamma_params, 1)) {
          current_statement__ = 345;
          lp_accum__.add(stan::math::student_t_lpdf<propto__>(gamma_a, 3, 0,
                           1));
        }
        current_statement__ = 348;
        if (stan::math::logical_eq(est_nb2_params, 1)) {
          current_statement__ = 347;
          lp_accum__.add(stan::math::student_t_lpdf<propto__>(nb2_phi, 3, 0,
                           1));
        }
        current_statement__ = 351;
        if (stan::math::logical_eq(est_cor, 1)) {
          current_statement__ = 349;
          lp_accum__.add(stan::math::lkj_corr_cholesky_lpdf<propto__>(Lcorr,
                           1));
        }
        current_statement__ = 357;
        if (stan::math::logical_eq(est_gp, 1)) {
          current_statement__ = 352;
          lp_accum__.add(stan::math::inv_gamma_lpdf<propto__>(gp_theta,
                           stan::model::rvalue(gp_theta_prior,
                             "gp_theta_prior", stan::model::index_uni(1)),
                           stan::model::rvalue(gp_theta_prior,
                             "gp_theta_prior", stan::model::index_uni(2))));
          current_statement__ = 355;
          for (int k = 1; k <= K; ++k) {
            current_statement__ = 353;
            lp_accum__.add(stan::math::std_normal_lpdf<propto__>(
                             stan::model::rvalue(effectsKnots,
                               "effectsKnots", stan::model::index_uni(k))));
          }
        }
        current_statement__ = 382;
        if (stan::math::logical_eq(est_rw, 1)) {
          current_statement__ = 380;
          for (int k = 1; k <= K; ++k) {
            current_statement__ = 378;
            if (stan::math::logical_eq(use_normal, 0)) {
              current_statement__ = 369;
              for (int t = 1; t <= 1; ++t) {
                current_statement__ = 367;
                if (stan::math::logical_eq(estimate_nu, 1)) {
                  current_statement__ = 365;
                  lp_accum__.add(stan::math::student_t_lpdf<propto__>(
                                   stan::model::rvalue(devs, "devs",
                                     stan::model::index_uni(k),
                                     stan::model::index_uni(t)),
                                   stan::model::rvalue(nu, "nu",
                                     stan::model::index_uni(1)), 0,
                                   stan::model::rvalue(sigma_pro,
                                     "sigma_pro", stan::model::index_uni(k))));
                } else {
                  current_statement__ = 363;
                  lp_accum__.add(stan::math::student_t_lpdf<propto__>(
                                   stan::model::rvalue(devs, "devs",
                                     stan::model::index_uni(k),
                                     stan::model::index_uni(t)), nu_fixed, 0,
                                   stan::model::rvalue(sigma_pro,
                                     "sigma_pro", stan::model::index_uni(k))));
                }
              }
              current_statement__ = 376;
              for (int t = 2; t <= (N - 1); ++t) {
                current_statement__ = 374;
                if (stan::math::logical_eq(estimate_nu, 1)) {
                  current_statement__ = 372;
                  lp_accum__.add(stan::math::student_t_lpdf<propto__>(
                                   stan::model::rvalue(devs, "devs",
                                     stan::model::index_uni(k),
                                     stan::model::index_uni(t)),
                                   stan::model::rvalue(nu, "nu",
                                     stan::model::index_uni(1)),
                                   (stan::model::rvalue(theta_vec,
                                      "theta_vec", stan::model::index_uni(k))
                                   *
                                   stan::model::rvalue(devs, "devs",
                                     stan::model::index_uni(k),
                                     stan::model::index_uni((t - 1)))),
                                   stan::model::rvalue(sigma_pro,
                                     "sigma_pro", stan::model::index_uni(k))));
                } else {
                  current_statement__ = 370;
                  lp_accum__.add(stan::math::student_t_lpdf<propto__>(
                                   stan::model::rvalue(devs, "devs",
                                     stan::model::index_uni(k),
                                     stan::model::index_uni(t)), nu_fixed,
                                   (stan::model::rvalue(theta_vec,
                                      "theta_vec", stan::model::index_uni(k))
                                   *
                                   stan::model::rvalue(devs, "devs",
                                     stan::model::index_uni(k),
                                     stan::model::index_uni((t - 1)))),
                                   stan::model::rvalue(sigma_pro,
                                     "sigma_pro", stan::model::index_uni(k))));
                }
              }
            } else {
              current_statement__ = 358;
              lp_accum__.add(stan::math::normal_lpdf<propto__>(
                               stan::model::rvalue(devs, "devs",
                                 stan::model::index_uni(k),
                                 stan::model::index_uni(1)), 0, 1));
              current_statement__ = 361;
              for (int t = 2; t <= (N - 1); ++t) {
                current_statement__ = 359;
                lp_accum__.add(stan::math::normal_lpdf<propto__>(
                                 stan::model::rvalue(devs, "devs",
                                   stan::model::index_uni(k),
                                   stan::model::index_uni(t)),
                                 (stan::model::rvalue(theta_vec, "theta_vec",
                                    stan::model::index_uni(k)) *
                                 stan::model::rvalue(devs, "devs",
                                   stan::model::index_uni(k),
                                   stan::model::index_uni((t - 1)))),
                                 stan::model::rvalue(sigma_pro, "sigma_pro",
                                   stan::model::index_uni(k))));
              }
            }
          }
        }
        current_statement__ = 387;
        if (stan::math::logical_eq(est_spline, 1)) {
          current_statement__ = 385;
          for (int k = 1; k <= K; ++k) {
            current_statement__ = 383;
            lp_accum__.add(stan::math::std_normal_lpdf<propto__>(
                             stan::model::rvalue(spline_a, "spline_a",
                               stan::model::index_uni(k))));
          }
        }
        current_statement__ = 395;
        if (stan::math::logical_eq(proportional_model, 0)) {
          current_statement__ = 392;
          lp_accum__.add(stan::math::std_normal_lpdf<propto__>(z));
          current_statement__ = 393;
          lp_accum__.add(stan::math::std_normal_lpdf<propto__>(zpos));
        } else {
          current_statement__ = 390;
          for (int p = 1; p <= P; ++p) {
            current_statement__ = 388;
            lp_accum__.add(stan::math::dirichlet_lpdf<propto__>(
                             stan::model::rvalue(p_z, "p_z",
                               stan::model::index_uni(p)), alpha_vec));
          }
        }
        current_statement__ = 440;
        if (stan::math::logical_eq(est_cor, 0)) {
          current_statement__ = 438;
          if (stan::math::logical_eq(long_format, 0)) {
            current_statement__ = 436;
            if (stan::math::logical_eq(obs_model, 1)) {
              current_statement__ = 434;
              for (int i = 1; i <= P; ++i) {
                current_statement__ = 433;
                lp_accum__.add(stan::math::normal_lpdf<false>(
                                 stan::model::rvalue(yall, "yall",
                                   stan::model::index_uni(i)),
                                 stan::model::rvalue(pred, "pred",
                                   stan::model::index_uni(i)),
                                 stan::model::rvalue(sigma_vec, "sigma_vec",
                                   stan::model::index_uni(i))));
              }
            }
          } else {
            current_statement__ = 411;
            if (stan::math::logical_eq(obs_model, 1)) {
              current_statement__ = 409;
              for (int i = 1; i <= n_pos; ++i) {
                current_statement__ = 408;
                lp_accum__.add((stan::model::rvalue(weights_vec,
                                  "weights_vec", stan::model::index_uni(i)) *
                  stan::math::normal_lpdf<false>(
                    stan::model::rvalue(y, "y", stan::model::index_uni(i)),
                    ((stan::model::rvalue(input_offset, "input_offset",
                        stan::model::index_uni(i)) +
                    stan::model::rvalue(pred, "pred",
                      stan::model::index_uni(
                        stan::model::rvalue(row_indx_pos, "row_indx_pos",
                          stan::model::index_uni(i))),
                      stan::model::index_uni(
                        stan::model::rvalue(col_indx_pos, "col_indx_pos",
                          stan::model::index_uni(i))))) +
                    stan::model::rvalue(obs_cov_offset, "obs_cov_offset",
                      stan::model::index_uni(i))),
                    (stan::model::rvalue(sigma_vec, "sigma_vec",
                       stan::model::index_uni(
                         stan::model::rvalue(row_indx_pos, "row_indx_pos",
                           stan::model::index_uni(i)))) *
                    stan::model::rvalue(inv_var_weights_vec,
                      "inv_var_weights_vec", stan::model::index_uni(i))))));
              }
            }
            current_statement__ = 415;
            if (stan::math::logical_eq(obs_model, 2)) {
              current_statement__ = 413;
              for (int i = 1; i <= n_pos; ++i) {
                current_statement__ = 412;
                lp_accum__.add((stan::model::rvalue(weights_vec,
                                  "weights_vec", stan::model::index_uni(i)) *
                  stan::math::gamma_lpdf<false>(
                    stan::model::rvalue(y, "y", stan::model::index_uni(i)),
                    stan::model::rvalue(gamma_a_vec, "gamma_a_vec",
                      stan::model::index_uni(
                        stan::model::rvalue(row_indx_pos, "row_indx_pos",
                          stan::model::index_uni(i)))),
                    (stan::model::rvalue(gamma_a_vec, "gamma_a_vec",
                       stan::model::index_uni(
                         stan::model::rvalue(row_indx_pos, "row_indx_pos",
                           stan::model::index_uni(i)))) /
                    stan::math::exp(
                      ((stan::model::rvalue(input_offset, "input_offset",
                          stan::model::index_uni(i)) +
                      stan::model::rvalue(pred, "pred",
                        stan::model::index_uni(
                          stan::model::rvalue(row_indx_pos, "row_indx_pos",
                            stan::model::index_uni(i))),
                        stan::model::index_uni(
                          stan::model::rvalue(col_indx_pos, "col_indx_pos",
                            stan::model::index_uni(i))))) +
                      stan::model::rvalue(obs_cov_offset, "obs_cov_offset",
                        stan::model::index_uni(i))))))));
              }
            }
            current_statement__ = 419;
            if (stan::math::logical_eq(obs_model, 3)) {
              current_statement__ = 417;
              for (int i = 1; i <= n_pos; ++i) {
                current_statement__ = 416;
                lp_accum__.add((stan::model::rvalue(weights_vec,
                                  "weights_vec", stan::model::index_uni(i)) *
                  stan::math::poisson_log_lpmf<false>(
                    stan::model::rvalue(y_int, "y_int",
                      stan::model::index_uni(i)),
                    ((stan::model::rvalue(input_offset, "input_offset",
                        stan::model::index_uni(i)) +
                    stan::model::rvalue(pred, "pred",
                      stan::model::index_uni(
                        stan::model::rvalue(row_indx_pos, "row_indx_pos",
                          stan::model::index_uni(i))),
                      stan::model::index_uni(
                        stan::model::rvalue(col_indx_pos, "col_indx_pos",
                          stan::model::index_uni(i))))) +
                    stan::model::rvalue(obs_cov_offset, "obs_cov_offset",
                      stan::model::index_uni(i))))));
              }
            }
            current_statement__ = 423;
            if (stan::math::logical_eq(obs_model, 4)) {
              current_statement__ = 421;
              for (int i = 1; i <= n_pos; ++i) {
                current_statement__ = 420;
                lp_accum__.add((stan::model::rvalue(weights_vec,
                                  "weights_vec", stan::model::index_uni(i)) *
                  stan::math::neg_binomial_2_log_lpmf<false>(
                    stan::model::rvalue(y_int, "y_int",
                      stan::model::index_uni(i)),
                    ((stan::model::rvalue(input_offset, "input_offset",
                        stan::model::index_uni(i)) +
                    stan::model::rvalue(pred, "pred",
                      stan::model::index_uni(
                        stan::model::rvalue(row_indx_pos, "row_indx_pos",
                          stan::model::index_uni(i))),
                      stan::model::index_uni(
                        stan::model::rvalue(col_indx_pos, "col_indx_pos",
                          stan::model::index_uni(i))))) +
                    stan::model::rvalue(obs_cov_offset, "obs_cov_offset",
                      stan::model::index_uni(i))),
                    stan::model::rvalue(nb_phi_vec, "nb_phi_vec",
                      stan::model::index_uni(
                        stan::model::rvalue(row_indx_pos, "row_indx_pos",
                          stan::model::index_uni(i)))))));
              }
            }
            current_statement__ = 427;
            if (stan::math::logical_eq(obs_model, 5)) {
              current_statement__ = 425;
              for (int i = 1; i <= n_pos; ++i) {
                current_statement__ = 424;
                lp_accum__.add((stan::model::rvalue(weights_vec,
                                  "weights_vec", stan::model::index_uni(i)) *
                  stan::math::bernoulli_logit_lpmf<false>(
                    stan::model::rvalue(y_int, "y_int",
                      stan::model::index_uni(i)),
                    ((stan::model::rvalue(input_offset, "input_offset",
                        stan::model::index_uni(i)) +
                    stan::model::rvalue(pred, "pred",
                      stan::model::index_uni(
                        stan::model::rvalue(row_indx_pos, "row_indx_pos",
                          stan::model::index_uni(i))),
                      stan::model::index_uni(
                        stan::model::rvalue(col_indx_pos, "col_indx_pos",
                          stan::model::index_uni(i))))) +
                    stan::model::rvalue(obs_cov_offset, "obs_cov_offset",
                      stan::model::index_uni(i))))));
              }
            }
            current_statement__ = 431;
            if (stan::math::logical_eq(obs_model, 6)) {
              current_statement__ = 429;
              for (int i = 1; i <= n_pos; ++i) {
                current_statement__ = 428;
                lp_accum__.add((stan::model::rvalue(weights_vec,
                                  "weights_vec", stan::model::index_uni(i)) *
                  stan::math::lognormal_lpdf<false>(
                    stan::model::rvalue(y, "y", stan::model::index_uni(i)),
                    ((stan::model::rvalue(input_offset, "input_offset",
                        stan::model::index_uni(i)) +
                    stan::model::rvalue(pred, "pred",
                      stan::model::index_uni(
                        stan::model::rvalue(row_indx_pos, "row_indx_pos",
                          stan::model::index_uni(i))),
                      stan::model::index_uni(
                        stan::model::rvalue(col_indx_pos, "col_indx_pos",
                          stan::model::index_uni(i))))) +
                    stan::model::rvalue(obs_cov_offset, "obs_cov_offset",
                      stan::model::index_uni(i))),
                    stan::model::rvalue(sigma_vec, "sigma_vec",
                      stan::model::index_uni(
                        stan::model::rvalue(row_indx_pos, "row_indx_pos",
                          stan::model::index_uni(i)))))));
              }
            }
          }
        } else {
          current_statement__ = 406;
          if (stan::math::logical_eq(long_format, 0)) {
            current_statement__ = 404;
            if (stan::math::logical_eq(obs_model, 1)) {
              current_statement__ = 402;
              for (int i = 1; i <= N; ++i) {
                current_statement__ = 401;
                lp_accum__.add(stan::math::multi_normal_cholesky_lpdf<false>(
                                 stan::math::col(yall, i),
                                 stan::math::col(pred, i),
                                 stan::math::diag_pre_multiply(sigma_vec,
                                   Lcorr)));
              }
            }
          } else {
            current_statement__ = 399;
            if (stan::math::logical_eq(obs_model, 1)) {
              current_statement__ = 397;
              for (int i = 1; i <= n_pos; ++i) {
                current_statement__ = 396;
                lp_accum__.add((stan::model::rvalue(weights_vec,
                                  "weights_vec", stan::model::index_uni(i)) *
                  stan::math::normal_lpdf<false>(
                    stan::model::rvalue(y, "y", stan::model::index_uni(i)),
                    (((stan::model::rvalue(input_offset, "input_offset",
                         stan::model::index_uni(i)) +
                    stan::model::rvalue(pred, "pred",
                      stan::model::index_uni(
                        stan::model::rvalue(row_indx_pos, "row_indx_pos",
                          stan::model::index_uni(i))),
                      stan::model::index_uni(
                        stan::model::rvalue(col_indx_pos, "col_indx_pos",
                          stan::model::index_uni(i))))) +
                    stan::model::rvalue(obs_cov_offset, "obs_cov_offset",
                      stan::model::index_uni(i))) +
                    stan::model::rvalue(cond_mean_vec, "cond_mean_vec",
                      stan::model::index_uni(
                        stan::model::rvalue(row_indx_pos, "row_indx_pos",
                          stan::model::index_uni(i))))),
                    (stan::model::rvalue(cond_sigma_vec, "cond_sigma_vec",
                       stan::model::index_uni(
                         stan::model::rvalue(row_indx_pos, "row_indx_pos",
                           stan::model::index_uni(i)))) *
                    stan::model::rvalue(inv_var_weights_vec,
                      "inv_var_weights_vec", stan::model::index_uni(i))))));
              }
            }
          }
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_dfa_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<double,-1,-1> devs =
        Eigen::Matrix<double,-1,-1>::Constant(devs_1dim__, devs_2dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      devs = in__.template read<
               Eigen::Matrix<local_scalar_t__,-1,-1>>(devs_1dim__,
               devs_2dim__);
      Eigen::Matrix<double,-1,1> x0 =
        Eigen::Matrix<double,-1,1>::Constant(K,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      x0 = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(K);
      Eigen::Matrix<double,-1,1> psi =
        Eigen::Matrix<double,-1,1>::Constant(psi_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      psi = in__.template read_constrain_lb<
              Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__,
              psi_1dim__);
      Eigen::Matrix<double,-1,1> z =
        Eigen::Matrix<double,-1,1>::Constant(z_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 4;
      z = in__.template read_constrain_lub<
            Eigen::Matrix<local_scalar_t__,-1,1>,
            jacobian__>(stan::model::rvalue(z_bound, "z_bound",
                          stan::model::index_uni(1)),
            stan::model::rvalue(z_bound, "z_bound", stan::model::index_uni(2)),
            lp__, z_1dim__);
      Eigen::Matrix<double,-1,1> zpos =
        Eigen::Matrix<double,-1,1>::Constant(zpos_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 5;
      zpos = in__.template read_constrain_lb<
               Eigen::Matrix<local_scalar_t__,-1,1>,
               jacobian__>(lower_bound_z, lp__, zpos_1dim__);
      std::vector<Eigen::Matrix<double,-1,1>> p_z =
        std::vector<Eigen::Matrix<double,-1,1>>(p_z_1dim__,
          Eigen::Matrix<double,-1,1>::Constant(K,
            std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 6;
      p_z = in__.template read_constrain_simplex<
              std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>,
              jacobian__>(lp__, p_z_1dim__, K);
      Eigen::Matrix<double,-1,-1> spline_a =
        Eigen::Matrix<double,-1,-1>::Constant(spline_a_1dim__,
          spline_a_2dim__, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 7;
      spline_a = in__.template read<
                   Eigen::Matrix<local_scalar_t__,-1,-1>>(spline_a_1dim__,
                   spline_a_2dim__);
      Eigen::Matrix<double,-1,-1> b_obs =
        Eigen::Matrix<double,-1,-1>::Constant(n_obs_covar, P,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 8;
      b_obs = in__.template read<
                Eigen::Matrix<local_scalar_t__,-1,-1>>(n_obs_covar, P);
      Eigen::Matrix<double,-1,-1> b_pro =
        Eigen::Matrix<double,-1,-1>::Constant(n_pro_covar, K,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 9;
      b_pro = in__.template read<
                Eigen::Matrix<local_scalar_t__,-1,-1>>(n_pro_covar, K);
      std::vector<double> sigma =
        std::vector<double>(sigma_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 10;
      sigma = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
                jacobian__>(0, lp__, sigma_1dim__);
      std::vector<double> gamma_a =
        std::vector<double>(gamma_a_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 11;
      gamma_a = in__.template read_constrain_lb<
                  std::vector<local_scalar_t__>, jacobian__>(0, lp__,
                  gamma_a_1dim__);
      std::vector<double> nb2_phi =
        std::vector<double>(nb2_phi_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 12;
      nb2_phi = in__.template read_constrain_lb<
                  std::vector<local_scalar_t__>, jacobian__>(0, lp__,
                  nb2_phi_1dim__);
      std::vector<double> nu =
        std::vector<double>(estimate_nu,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 13;
      nu = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
             jacobian__>(2, lp__, estimate_nu);
      std::vector<double> ymiss =
        std::vector<double>(n_na, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 14;
      ymiss = in__.template read<std::vector<local_scalar_t__>>(n_na);
      std::vector<double> phi =
        std::vector<double>(phi_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 15;
      phi = in__.template read_constrain_lub<std::vector<local_scalar_t__>,
              jacobian__>(-1, 1, lp__, phi_1dim__);
      std::vector<double> theta =
        std::vector<double>(theta_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 16;
      theta = in__.template read_constrain_lub<std::vector<local_scalar_t__>,
                jacobian__>(-1, 1, lp__, theta_1dim__);
      std::vector<double> gp_theta =
        std::vector<double>(gp_theta_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 17;
      gp_theta = in__.template read_constrain_lb<
                   std::vector<local_scalar_t__>, jacobian__>(0, lp__,
                   gp_theta_1dim__);
      Eigen::Matrix<double,-1,-1> Lcorr =
        Eigen::Matrix<double,-1,-1>::Constant(n_pcor, n_pcor,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 18;
      Lcorr = in__.template read_constrain_cholesky_factor_corr<
                Eigen::Matrix<local_scalar_t__,-1,-1>, jacobian__>(lp__,
                n_pcor);
      std::vector<double> sigma_process =
        std::vector<double>(sigma_process_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 19;
      sigma_process = in__.template read_constrain_lb<
                        std::vector<local_scalar_t__>, jacobian__>(0, lp__,
                        sigma_process_1dim__);
      std::vector<Eigen::Matrix<double,-1,1>> effectsKnots =
        std::vector<Eigen::Matrix<double,-1,1>>(effectsKnots_1dim__,
          Eigen::Matrix<double,-1,1>::Constant(effectsKnots_2dim__,
            std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 20;
      effectsKnots = in__.template read<
                       std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>>(effectsKnots_1dim__,
                       effectsKnots_2dim__);
      Eigen::Matrix<double,-1,-1> pred =
        Eigen::Matrix<double,-1,-1>::Constant(P, N,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> Z =
        Eigen::Matrix<double,-1,-1>::Constant(P, K,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> yall =
        Eigen::Matrix<double,-1,-1>::Constant(P, N,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> sigma_vec =
        Eigen::Matrix<double,-1,1>::Constant(sigma_vec_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> gamma_a_vec =
        Eigen::Matrix<double,-1,1>::Constant(gamma_a_vec_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> nb_phi_vec =
        Eigen::Matrix<double,-1,1>::Constant(nb_phi_vec_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> phi_vec =
        Eigen::Matrix<double,-1,1>::Constant(K,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> theta_vec =
        Eigen::Matrix<double,-1,1>::Constant(K,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> x =
        Eigen::Matrix<double,-1,-1>::Constant(K, N,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> indicator =
        Eigen::Matrix<double,-1,1>::Constant(K,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> psi_root =
        Eigen::Matrix<double,-1,1>::Constant(psi_root_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> Sigma_derived =
        Eigen::Matrix<double,-1,-1>::Constant(Sigma_derived_1dim__,
          Sigma_derived_2dim__, std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> Sigma_temp =
        Eigen::Matrix<double,-1,-1>::Constant(Sigma_temp_1dim__,
          Sigma_temp_2dim__, std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> sigma12_vec =
        Eigen::Matrix<double,-1,-1>::Constant(sigma12_vec_1dim__, 1,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> temp_sums =
        Eigen::Matrix<double,-1,-1>::Constant(temp_sums_1dim__,
          temp_sums_2dim__, std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> temp_counts =
        Eigen::Matrix<double,-1,-1>::Constant(temp_counts_1dim__,
          temp_counts_2dim__, std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> cond_sigma_vec =
        Eigen::Matrix<double,-1,1>::Constant(cond_sigma_vec_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> cond_mean_vec =
        Eigen::Matrix<double,-1,1>::Constant(cond_mean_vec_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      double sigma11 = std::numeric_limits<double>::quiet_NaN();
      Eigen::Matrix<double,-1,1> sigma_pro =
        Eigen::Matrix<double,-1,1>::Constant(K,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> spline_a_trans =
        Eigen::Matrix<double,-1,-1>::Constant(spline_a_trans_1dim__,
          spline_a_trans_2dim__, std::numeric_limits<double>::quiet_NaN());
      std::vector<Eigen::Matrix<double,-1,-1>> SigmaKnots =
        std::vector<Eigen::Matrix<double,-1,-1>>(K,
          Eigen::Matrix<double,-1,-1>::Constant(n_knots, n_knots,
            std::numeric_limits<double>::quiet_NaN()));
      Eigen::Matrix<double,-1,1> obs_cov_offset =
        Eigen::Matrix<double,-1,1>::Constant(n_pos,
          std::numeric_limits<double>::quiet_NaN());
      out__.write(devs);
      out__.write(x0);
      out__.write(psi);
      out__.write(z);
      out__.write(zpos);
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= p_z_1dim__; ++sym2__) {
          out__.write(p_z[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      out__.write(spline_a);
      out__.write(b_obs);
      out__.write(b_pro);
      out__.write(sigma);
      out__.write(gamma_a);
      out__.write(nb2_phi);
      out__.write(nu);
      out__.write(ymiss);
      out__.write(phi);
      out__.write(theta);
      out__.write(gp_theta);
      out__.write(Lcorr);
      out__.write(sigma_process);
      for (int sym1__ = 1; sym1__ <= effectsKnots_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= effectsKnots_1dim__; ++sym2__) {
          out__.write(effectsKnots[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 61;
      for (int k = 1; k <= K; ++k) {
        current_statement__ = 52;
        stan::model::assign(sigma_pro, 1, "assigning variable sigma_pro",
          stan::model::index_uni(k));
        current_statement__ = 59;
        if (stan::math::logical_eq(est_sigma_process, 1)) {
          current_statement__ = 57;
          if (stan::math::logical_eq(n_sigma_process, 1)) {
            current_statement__ = 55;
            stan::model::assign(sigma_pro,
              stan::model::rvalue(sigma_process, "sigma_process",
                stan::model::index_uni(1)), "assigning variable sigma_pro",
              stan::model::index_uni(k));
          } else {
            current_statement__ = 53;
            stan::model::assign(sigma_pro,
              stan::model::rvalue(sigma_process, "sigma_process",
                stan::model::index_uni(k)), "assigning variable sigma_pro",
              stan::model::index_uni(k));
          }
        }
      }
      current_statement__ = 70;
      if (stan::math::logical_eq(est_phi, 1)) {
        current_statement__ = 68;
        for (int k = 1; k <= K; ++k) {
          current_statement__ = 66;
          stan::model::assign(phi_vec,
            stan::model::rvalue(phi, "phi", stan::model::index_uni(k)),
            "assigning variable phi_vec", stan::model::index_uni(k));
        }
      } else {
        current_statement__ = 64;
        for (int k = 1; k <= K; ++k) {
          current_statement__ = 62;
          stan::model::assign(phi_vec, 1, "assigning variable phi_vec",
            stan::model::index_uni(k));
        }
      }
      current_statement__ = 79;
      if (stan::math::logical_eq(est_theta, 1)) {
        current_statement__ = 77;
        for (int k = 1; k <= K; ++k) {
          current_statement__ = 75;
          stan::model::assign(theta_vec,
            stan::model::rvalue(theta, "theta", stan::model::index_uni(k)),
            "assigning variable theta_vec", stan::model::index_uni(k));
        }
      } else {
        current_statement__ = 73;
        for (int k = 1; k <= K; ++k) {
          current_statement__ = 71;
          stan::model::assign(theta_vec, 0, "assigning variable theta_vec",
            stan::model::index_uni(k));
        }
      }
      current_statement__ = 84;
      if (stan::math::logical_eq(est_sigma_params, 1)) {
        current_statement__ = 82;
        for (int p = 1; p <= P; ++p) {
          current_statement__ = 80;
          stan::model::assign(sigma_vec,
            stan::model::rvalue(sigma, "sigma",
              stan::model::index_uni(
                stan::model::rvalue(varIndx, "varIndx",
                  stan::model::index_uni(p)))),
            "assigning variable sigma_vec", stan::model::index_uni(p));
        }
      }
      current_statement__ = 89;
      if (stan::math::logical_eq(est_gamma_params, 1)) {
        current_statement__ = 87;
        for (int p = 1; p <= P; ++p) {
          current_statement__ = 85;
          stan::model::assign(gamma_a_vec,
            stan::model::rvalue(gamma_a, "gamma_a",
              stan::model::index_uni(
                stan::model::rvalue(varIndx, "varIndx",
                  stan::model::index_uni(p)))),
            "assigning variable gamma_a_vec", stan::model::index_uni(p));
        }
      }
      current_statement__ = 94;
      if (stan::math::logical_eq(est_nb2_params, 1)) {
        current_statement__ = 92;
        for (int p = 1; p <= P; ++p) {
          current_statement__ = 90;
          stan::model::assign(nb_phi_vec,
            stan::model::rvalue(nb2_phi, "nb2_phi",
              stan::model::index_uni(
                stan::model::rvalue(varIndx, "varIndx",
                  stan::model::index_uni(p)))),
            "assigning variable nb_phi_vec", stan::model::index_uni(p));
        }
      }
      current_statement__ = 104;
      if (stan::math::logical_eq(long_format, 0)) {
        current_statement__ = 97;
        for (int i = 1; i <= n_pos; ++i) {
          current_statement__ = 95;
          stan::model::assign(yall,
            stan::model::rvalue(y, "y", stan::model::index_uni(i)),
            "assigning variable yall",
            stan::model::index_uni(
              stan::model::rvalue(row_indx_pos, "row_indx_pos",
                stan::model::index_uni(i))),
            stan::model::index_uni(
              stan::model::rvalue(col_indx_pos, "col_indx_pos",
                stan::model::index_uni(i))));
        }
        current_statement__ = 102;
        if (stan::math::logical_gt(n_na, 0)) {
          current_statement__ = 100;
          for (int i = 1; i <= n_na; ++i) {
            current_statement__ = 98;
            stan::model::assign(yall,
              stan::model::rvalue(ymiss, "ymiss", stan::model::index_uni(i)),
              "assigning variable yall",
              stan::model::index_uni(
                stan::model::rvalue(row_indx_na, "row_indx_na",
                  stan::model::index_uni(i))),
              stan::model::index_uni(
                stan::model::rvalue(col_indx_na, "col_indx_na",
                  stan::model::index_uni(i))));
          }
        }
      }
      current_statement__ = 164;
      if (stan::math::logical_eq(proportional_model, 0)) {
        current_statement__ = 107;
        for (int i = 1; i <= nZ; ++i) {
          current_statement__ = 105;
          stan::model::assign(Z,
            stan::model::rvalue(z, "z", stan::model::index_uni(i)),
            "assigning variable Z",
            stan::model::index_uni(
              stan::model::rvalue(row_indx, "row_indx",
                stan::model::index_uni(i))),
            stan::model::index_uni(
              stan::model::rvalue(col_indx, "col_indx",
                stan::model::index_uni(i))));
        }
        current_statement__ = 112;
        if (stan::math::logical_gt(nZero, 2)) {
          current_statement__ = 110;
          for (int i = 1; i <= (nZero - 2); ++i) {
            current_statement__ = 108;
            stan::model::assign(Z, 0, "assigning variable Z",
              stan::model::index_uni(
                stan::model::rvalue(row_indx_z, "row_indx_z",
                  stan::model::index_uni(i))),
              stan::model::index_uni(
                stan::model::rvalue(col_indx_z, "col_indx_z",
                  stan::model::index_uni(i))));
          }
        }
        current_statement__ = 115;
        for (int k = 1; k <= K; ++k) {
          current_statement__ = 113;
          stan::model::assign(Z,
            stan::model::rvalue(zpos, "zpos", stan::model::index_uni(k)),
            "assigning variable Z", stan::model::index_uni(k),
            stan::model::index_uni(k));
        }
        current_statement__ = 128;
        if (stan::math::logical_eq(use_expansion_prior, 1)) {
          current_statement__ = 126;
          for (int k = 1; k <= K; ++k) {
            current_statement__ = 120;
            if (stan::math::logical_lt(
                  stan::model::rvalue(zpos, "zpos", stan::model::index_uni(k)),
                  0)) {
              current_statement__ = 118;
              stan::model::assign(indicator, -1,
                "assigning variable indicator", stan::model::index_uni(k));
            } else {
              current_statement__ = 116;
              stan::model::assign(indicator, 1,
                "assigning variable indicator", stan::model::index_uni(k));
            }
            current_statement__ = 121;
            stan::model::assign(psi_root,
              stan::math::sqrt(
                stan::model::rvalue(psi, "psi", stan::model::index_uni(k))),
              "assigning variable psi_root", stan::model::index_uni(k));
            current_statement__ = 124;
            for (int p = 1; p <= P; ++p) {
              current_statement__ = 122;
              stan::model::assign(Z,
                ((stan::model::rvalue(Z, "Z", stan::model::index_uni(p),
                    stan::model::index_uni(k)) *
                stan::model::rvalue(indicator, "indicator",
                  stan::model::index_uni(k))) * (1 /
                stan::model::rvalue(psi_root, "psi_root",
                  stan::model::index_uni(k)))), "assigning variable Z",
                stan::model::index_uni(p), stan::model::index_uni(k));
            }
          }
        }
        current_statement__ = 136;
        if (stan::math::logical_eq(est_rw, 1)) {
          current_statement__ = 134;
          for (int k = 1; k <= K; ++k) {
            current_statement__ = 129;
            stan::model::assign(x,
              stan::model::rvalue(x0, "x0", stan::model::index_uni(k)),
              "assigning variable x", stan::model::index_uni(k),
              stan::model::index_uni(1));
            current_statement__ = 132;
            for (int t = 2; t <= N; ++t) {
              current_statement__ = 130;
              stan::model::assign(x,
                ((stan::model::rvalue(phi_vec, "phi_vec",
                    stan::model::index_uni(k)) *
                stan::model::rvalue(x, "x", stan::model::index_uni(k),
                  stan::model::index_uni((t - 1)))) +
                stan::model::rvalue(devs, "devs", stan::model::index_uni(k),
                  stan::model::index_uni((t - 1)))), "assigning variable x",
                stan::model::index_uni(k), stan::model::index_uni(t));
            }
          }
        }
        current_statement__ = 144;
        if (stan::math::logical_eq(est_spline, 1)) {
          current_statement__ = 138;
          for (int k = 1; k <= K; ++k) {
            current_statement__ = 137;
            stan::model::assign(spline_a_trans,
              stan::math::multiply(
                stan::model::rvalue(spline_a, "spline_a",
                  stan::model::index_uni(k)),
                stan::model::rvalue(sigma_pro, "sigma_pro",
                  stan::model::index_uni(k))),
              "assigning variable spline_a_trans", stan::model::index_uni(k));
          }
          current_statement__ = 139;
          stan::model::assign(x,
            stan::math::multiply(spline_a_trans,
              stan::math::transpose(X_spline)), "assigning variable x");
          current_statement__ = 142;
          for (int k = 1; k <= K; ++k) {
            current_statement__ = 140;
            stan::model::assign(x,
              stan::math::add(
                stan::model::rvalue(x0, "x0", stan::model::index_uni(k)),
                stan::model::deep_copy(
                  stan::model::rvalue(x, "x", stan::model::index_uni(k)))),
              "assigning variable x", stan::model::index_uni(k));
          }
        }
        current_statement__ = 157;
        if (stan::math::logical_eq(est_gp, 1)) {
          current_statement__ = 155;
          for (int k = 1; k <= K; ++k) {
            current_statement__ = 145;
            stan::model::assign(SigmaKnots,
              stan::math::gp_exp_quad_cov(knot_locs,
                stan::model::rvalue(sigma_pro, "sigma_pro",
                  stan::model::index_uni(k)),
                stan::model::rvalue(gp_theta, "gp_theta",
                  stan::model::index_uni(k))),
              "assigning variable SigmaKnots", stan::model::index_uni(k));
            current_statement__ = 148;
            for (int i = 1; i <= n_knots; ++i) {
              current_statement__ = 146;
              stan::model::assign(SigmaKnots,
                (stan::model::rvalue(SigmaKnots, "SigmaKnots",
                   stan::model::index_uni(k), stan::model::index_uni(i),
                   stan::model::index_uni(i)) + gp_delta),
                "assigning variable SigmaKnots", stan::model::index_uni(k),
                stan::model::index_uni(i), stan::model::index_uni(i));
            }
            current_statement__ = 153;
            if (stan::math::logical_eq(n_knots, N)) {
              current_statement__ = 151;
              stan::model::assign(x,
                stan::math::to_row_vector(
                  stan::math::multiply(
                    stan::math::cholesky_decompose(
                      stan::model::rvalue(SigmaKnots, "SigmaKnots",
                        stan::model::index_uni(k))),
                    stan::model::rvalue(effectsKnots, "effectsKnots",
                      stan::model::index_uni(k)))), "assigning variable x",
                stan::model::index_uni(k));
            } else {
              current_statement__ = 149;
              stan::model::assign(x,
                stan::math::to_row_vector(
                  stan::math::multiply(
                    stan::math::multiply(
                      stan::math::multiply(
                        stan::math::gp_exp_quad_cov(data_locs, knot_locs,
                          stan::model::rvalue(sigma_pro, "sigma_pro",
                            stan::model::index_uni(k)),
                          stan::model::rvalue(gp_theta, "gp_theta",
                            stan::model::index_uni(k))),
                        stan::math::inverse_spd(
                          stan::model::rvalue(SigmaKnots, "SigmaKnots",
                            stan::model::index_uni(k)))),
                      stan::math::cholesky_decompose(
                        stan::model::rvalue(SigmaKnots, "SigmaKnots",
                          stan::model::index_uni(k)))),
                    stan::model::rvalue(effectsKnots, "effectsKnots",
                      stan::model::index_uni(k)))), "assigning variable x",
                stan::model::index_uni(k));
            }
          }
        }
        current_statement__ = 162;
        if (stan::math::logical_eq(use_expansion_prior, 1)) {
          current_statement__ = 160;
          for (int k = 1; k <= K; ++k) {
            current_statement__ = 158;
            stan::model::assign(x,
              stan::math::multiply(
                stan::math::multiply(
                  stan::model::deep_copy(
                    stan::model::rvalue(x, "x", stan::model::index_uni(k))),
                  stan::model::rvalue(indicator, "indicator",
                    stan::model::index_uni(k))),
                stan::model::rvalue(psi_root, "psi_root",
                  stan::model::index_uni(k))), "assigning variable x",
              stan::model::index_uni(k));
          }
        }
      }
      current_statement__ = 198;
      if (stan::math::logical_eq(proportional_model, 1)) {
        current_statement__ = 172;
        if (stan::math::logical_eq(est_rw, 1)) {
          current_statement__ = 170;
          for (int k = 1; k <= K; ++k) {
            current_statement__ = 165;
            stan::model::assign(x,
              stan::model::rvalue(x0, "x0", stan::model::index_uni(k)),
              "assigning variable x", stan::model::index_uni(k),
              stan::model::index_uni(1));
            current_statement__ = 168;
            for (int t = 2; t <= N; ++t) {
              current_statement__ = 166;
              stan::model::assign(x,
                ((stan::model::rvalue(phi_vec, "phi_vec",
                    stan::model::index_uni(k)) *
                stan::model::rvalue(x, "x", stan::model::index_uni(k),
                  stan::model::index_uni((t - 1)))) +
                stan::model::rvalue(devs, "devs", stan::model::index_uni(k),
                  stan::model::index_uni((t - 1)))), "assigning variable x",
                stan::model::index_uni(k), stan::model::index_uni(t));
            }
          }
        }
        current_statement__ = 180;
        if (stan::math::logical_eq(est_spline, 1)) {
          current_statement__ = 174;
          for (int k = 1; k <= K; ++k) {
            current_statement__ = 173;
            stan::model::assign(spline_a_trans,
              stan::math::multiply(
                stan::model::rvalue(spline_a, "spline_a",
                  stan::model::index_uni(k)),
                stan::model::rvalue(sigma_pro, "sigma_pro",
                  stan::model::index_uni(k))),
              "assigning variable spline_a_trans", stan::model::index_uni(k));
          }
          current_statement__ = 175;
          stan::model::assign(x,
            stan::math::multiply(spline_a_trans,
              stan::math::transpose(X_spline)), "assigning variable x");
          current_statement__ = 178;
          for (int k = 1; k <= K; ++k) {
            current_statement__ = 176;
            stan::model::assign(x,
              stan::math::add(
                stan::model::rvalue(x0, "x0", stan::model::index_uni(k)),
                stan::model::deep_copy(
                  stan::model::rvalue(x, "x", stan::model::index_uni(k)))),
              "assigning variable x", stan::model::index_uni(k));
          }
        }
        current_statement__ = 193;
        if (stan::math::logical_eq(est_gp, 1)) {
          current_statement__ = 191;
          for (int k = 1; k <= K; ++k) {
            current_statement__ = 181;
            stan::model::assign(SigmaKnots,
              stan::math::gp_exp_quad_cov(knot_locs,
                stan::model::rvalue(sigma_pro, "sigma_pro",
                  stan::model::index_uni(k)),
                stan::model::rvalue(gp_theta, "gp_theta",
                  stan::model::index_uni(k))),
              "assigning variable SigmaKnots", stan::model::index_uni(k));
            current_statement__ = 184;
            for (int i = 1; i <= n_knots; ++i) {
              current_statement__ = 182;
              stan::model::assign(SigmaKnots,
                (stan::model::rvalue(SigmaKnots, "SigmaKnots",
                   stan::model::index_uni(k), stan::model::index_uni(i),
                   stan::model::index_uni(i)) + gp_delta),
                "assigning variable SigmaKnots", stan::model::index_uni(k),
                stan::model::index_uni(i), stan::model::index_uni(i));
            }
            current_statement__ = 189;
            if (stan::math::logical_eq(n_knots, N)) {
              current_statement__ = 187;
              stan::model::assign(x,
                stan::math::to_row_vector(
                  stan::math::multiply(
                    stan::math::cholesky_decompose(
                      stan::model::rvalue(SigmaKnots, "SigmaKnots",
                        stan::model::index_uni(k))),
                    stan::model::rvalue(effectsKnots, "effectsKnots",
                      stan::model::index_uni(k)))), "assigning variable x",
                stan::model::index_uni(k));
            } else {
              current_statement__ = 185;
              stan::model::assign(x,
                stan::math::to_row_vector(
                  stan::math::multiply(
                    stan::math::multiply(
                      stan::math::multiply(
                        stan::math::gp_exp_quad_cov(data_locs, knot_locs,
                          stan::model::rvalue(sigma_pro, "sigma_pro",
                            stan::model::index_uni(k)),
                          stan::model::rvalue(gp_theta, "gp_theta",
                            stan::model::index_uni(k))),
                        stan::math::inverse_spd(
                          stan::model::rvalue(SigmaKnots, "SigmaKnots",
                            stan::model::index_uni(k)))),
                      stan::math::cholesky_decompose(
                        stan::model::rvalue(SigmaKnots, "SigmaKnots",
                          stan::model::index_uni(k)))),
                    stan::model::rvalue(effectsKnots, "effectsKnots",
                      stan::model::index_uni(k)))), "assigning variable x",
                stan::model::index_uni(k));
            }
          }
        }
        current_statement__ = 196;
        for (int p = 1; p <= P; ++p) {
          current_statement__ = 194;
          stan::model::assign(Z,
            stan::math::to_row_vector(
              stan::model::rvalue(p_z, "p_z", stan::model::index_uni(p))),
            "assigning variable Z", stan::model::index_uni(p));
        }
      }
      current_statement__ = 203;
      if (stan::math::logical_gt(num_pro_covar, 0)) {
        current_statement__ = 201;
        for (int i = 1; i <= num_pro_covar; ++i) {
          current_statement__ = 199;
          stan::model::assign(x,
            (stan::model::rvalue(x, "x",
               stan::model::index_uni(
                 stan::model::rvalue(pro_covar_index, "pro_covar_index",
                   stan::model::index_uni(i), stan::model::index_uni(2))),
               stan::model::index_uni(
                 stan::model::rvalue(pro_covar_index, "pro_covar_index",
                   stan::model::index_uni(i), stan::model::index_uni(1)))) +
            (stan::model::rvalue(b_pro, "b_pro",
               stan::model::index_uni(
                 stan::model::rvalue(pro_covar_index, "pro_covar_index",
                   stan::model::index_uni(i), stan::model::index_uni(3))),
               stan::model::index_uni(
                 stan::model::rvalue(pro_covar_index, "pro_covar_index",
                   stan::model::index_uni(i), stan::model::index_uni(2)))) *
            stan::model::rvalue(pro_covar_value, "pro_covar_value",
              stan::model::index_uni(i)))), "assigning variable x",
            stan::model::index_uni(
              stan::model::rvalue(pro_covar_index, "pro_covar_index",
                stan::model::index_uni(i), stan::model::index_uni(2))),
            stan::model::index_uni(
              stan::model::rvalue(pro_covar_index, "pro_covar_index",
                stan::model::index_uni(i), stan::model::index_uni(1))));
        }
      }
      current_statement__ = 204;
      stan::model::assign(pred, stan::math::multiply(Z, x),
        "assigning variable pred");
      current_statement__ = 207;
      for (int i = 1; i <= n_pos; ++i) {
        current_statement__ = 205;
        stan::model::assign(obs_cov_offset, 0,
          "assigning variable obs_cov_offset", stan::model::index_uni(i));
      }
      current_statement__ = 218;
      if (stan::math::logical_gt(num_obs_covar, 0)) {
        current_statement__ = 216;
        if (stan::math::logical_eq(long_format, 0)) {
          current_statement__ = 214;
          for (int i = 1; i <= num_obs_covar; ++i) {
            current_statement__ = 212;
            stan::model::assign(pred,
              (stan::model::rvalue(pred, "pred",
                 stan::model::index_uni(
                   stan::model::rvalue(obs_covar_index, "obs_covar_index",
                     stan::model::index_uni(i), stan::model::index_uni(2))),
                 stan::model::index_uni(
                   stan::model::rvalue(obs_covar_index, "obs_covar_index",
                     stan::model::index_uni(i), stan::model::index_uni(1))))
              +
              (stan::model::rvalue(b_obs, "b_obs",
                 stan::model::index_uni(
                   stan::model::rvalue(obs_covar_index, "obs_covar_index",
                     stan::model::index_uni(i), stan::model::index_uni(3))),
                 stan::model::index_uni(
                   stan::model::rvalue(obs_covar_index, "obs_covar_index",
                     stan::model::index_uni(i), stan::model::index_uni(2))))
              *
              stan::model::rvalue(obs_covar_value, "obs_covar_value",
                stan::model::index_uni(i)))), "assigning variable pred",
              stan::model::index_uni(
                stan::model::rvalue(obs_covar_index, "obs_covar_index",
                  stan::model::index_uni(i), stan::model::index_uni(2))),
              stan::model::index_uni(
                stan::model::rvalue(obs_covar_index, "obs_covar_index",
                  stan::model::index_uni(i), stan::model::index_uni(1))));
          }
        } else {
          current_statement__ = 210;
          for (int i = 1; i <= num_obs_covar; ++i) {
            current_statement__ = 208;
            stan::model::assign(obs_cov_offset,
              (stan::model::rvalue(obs_cov_offset, "obs_cov_offset",
                 stan::model::index_uni(
                   stan::model::rvalue(match_obs_covar, "match_obs_covar",
                     stan::model::index_uni(i)))) +
              (stan::model::rvalue(b_obs, "b_obs",
                 stan::model::index_uni(
                   stan::model::rvalue(obs_covar_index, "obs_covar_index",
                     stan::model::index_uni(i), stan::model::index_uni(3))),
                 stan::model::index_uni(
                   stan::model::rvalue(obs_covar_index, "obs_covar_index",
                     stan::model::index_uni(i), stan::model::index_uni(2))))
              *
              stan::model::rvalue(obs_covar_value, "obs_covar_value",
                stan::model::index_uni(i)))),
              "assigning variable obs_cov_offset",
              stan::model::index_uni(
                stan::model::rvalue(match_obs_covar, "match_obs_covar",
                  stan::model::index_uni(i))));
          }
        }
      }
      current_statement__ = 243;
      if ((stan::math::primitive_value(stan::math::logical_eq(long_format, 1))
          && stan::math::primitive_value(stan::math::logical_eq(est_cor, 1)))) {
        current_statement__ = 224;
        for (int n = 1; n <= N; ++n) {
          current_statement__ = 222;
          for (int p = 1; p <= P; ++p) {
            current_statement__ = 219;
            stan::model::assign(temp_sums, 0.0,
              "assigning variable temp_sums", stan::model::index_uni(p),
              stan::model::index_uni(n));
            current_statement__ = 220;
            stan::model::assign(temp_counts, 0.0,
              "assigning variable temp_counts", stan::model::index_uni(p),
              stan::model::index_uni(n));
          }
        }
        current_statement__ = 228;
        for (int i = 1; i <= n_pos; ++i) {
          current_statement__ = 225;
          stan::model::assign(temp_sums,
            (stan::model::rvalue(temp_sums, "temp_sums",
               stan::model::index_uni(
                 stan::model::rvalue(row_indx_pos, "row_indx_pos",
                   stan::model::index_uni(i))),
               stan::model::index_uni(
                 stan::model::rvalue(col_indx_pos, "col_indx_pos",
                   stan::model::index_uni(i)))) +
            (stan::model::rvalue(y, "y", stan::model::index_uni(i)) -
            stan::model::rvalue(pred, "pred",
              stan::model::index_uni(
                stan::model::rvalue(row_indx_pos, "row_indx_pos",
                  stan::model::index_uni(i))),
              stan::model::index_uni(
                stan::model::rvalue(col_indx_pos, "col_indx_pos",
                  stan::model::index_uni(i)))))),
            "assigning variable temp_sums",
            stan::model::index_uni(
              stan::model::rvalue(row_indx_pos, "row_indx_pos",
                stan::model::index_uni(i))),
            stan::model::index_uni(
              stan::model::rvalue(col_indx_pos, "col_indx_pos",
                stan::model::index_uni(i))));
          current_statement__ = 226;
          stan::model::assign(temp_counts,
            (stan::model::rvalue(temp_counts, "temp_counts",
               stan::model::index_uni(
                 stan::model::rvalue(row_indx_pos, "row_indx_pos",
                   stan::model::index_uni(i))),
               stan::model::index_uni(
                 stan::model::rvalue(col_indx_pos, "col_indx_pos",
                   stan::model::index_uni(i)))) + 1),
            "assigning variable temp_counts",
            stan::model::index_uni(
              stan::model::rvalue(row_indx_pos, "row_indx_pos",
                stan::model::index_uni(i))),
            stan::model::index_uni(
              stan::model::rvalue(col_indx_pos, "col_indx_pos",
                stan::model::index_uni(i))));
        }
        current_statement__ = 233;
        for (int n = 1; n <= N; ++n) {
          current_statement__ = 231;
          for (int p = 1; p <= P; ++p) {
            current_statement__ = 229;
            stan::model::assign(temp_sums,
              (stan::model::rvalue(temp_sums, "temp_sums",
                 stan::model::index_uni(p), stan::model::index_uni(n)) /
              stan::model::rvalue(temp_counts, "temp_counts",
                stan::model::index_uni(p), stan::model::index_uni(n))),
              "assigning variable temp_sums", stan::model::index_uni(p),
              stan::model::index_uni(n));
          }
        }
        current_statement__ = 234;
        stan::model::assign(Sigma_derived,
          stan::math::quad_form_diag(
            stan::math::multiply_lower_tri_self_transpose(Lcorr), sigma_vec),
          "assigning variable Sigma_derived");
        current_statement__ = 241;
        for (int p = 1; p <= P; ++p) {
          current_statement__ = 235;
          sigma11 = stan::model::rvalue(Sigma_derived, "Sigma_derived",
                      stan::model::index_uni(p), stan::model::index_uni(p));
          current_statement__ = 236;
          stan::model::assign(Sigma_temp,
            stan::math::inverse(subset(Sigma_derived, p, P, pstream__)),
            "assigning variable Sigma_temp");
          current_statement__ = 237;
          stan::model::assign(sigma12_vec,
            subsetvec(Sigma_derived, p, P, pstream__),
            "assigning variable sigma12_vec");
          current_statement__ = 238;
          stan::model::assign(cond_mean_vec,
            stan::math::multiply(
              stan::math::multiply(stan::math::to_row_vector(sigma12_vec),
                Sigma_temp),
              stan::math::to_vector(
                subsetvec2(stan::math::col(temp_sums, p), p, P, pstream__))),
            "assigning variable cond_mean_vec", stan::model::index_uni(p));
          current_statement__ = 239;
          stan::model::assign(cond_sigma_vec,
            stan::math::sqrt((sigma11 -
              stan::math::multiply(
                stan::math::multiply(stan::math::to_row_vector(sigma12_vec),
                  Sigma_temp), stan::math::to_vector(sigma12_vec)))),
            "assigning variable cond_sigma_vec", stan::model::index_uni(p));
        }
      }
      current_statement__ = 24;
      stan::math::check_greater_or_equal(function__, "sigma_vec", sigma_vec,
        0);
      current_statement__ = 25;
      stan::math::check_greater_or_equal(function__, "gamma_a_vec",
        gamma_a_vec, 0);
      current_statement__ = 26;
      stan::math::check_greater_or_equal(function__, "nb_phi_vec",
        nb_phi_vec, 0);
      current_statement__ = 31;
      stan::math::check_greater_or_equal(function__, "psi_root", psi_root, 0);
      if (emit_transformed_parameters__) {
        out__.write(pred);
        out__.write(Z);
        out__.write(yall);
        out__.write(sigma_vec);
        out__.write(gamma_a_vec);
        out__.write(nb_phi_vec);
        out__.write(phi_vec);
        out__.write(theta_vec);
        out__.write(x);
        out__.write(indicator);
        out__.write(psi_root);
        out__.write(Sigma_derived);
        out__.write(Sigma_temp);
        out__.write(sigma12_vec);
        out__.write(temp_sums);
        out__.write(temp_counts);
        out__.write(cond_sigma_vec);
        out__.write(cond_mean_vec);
        out__.write(sigma11);
        out__.write(sigma_pro);
        out__.write(spline_a_trans);
        for (int sym1__ = 1; sym1__ <= n_knots; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= n_knots; ++sym2__) {
            for (int sym3__ = 1; sym3__ <= K; ++sym3__) {
              out__.write(stan::model::rvalue(SigmaKnots, "SigmaKnots",
                            stan::model::index_uni(sym3__),
                            stan::model::index_uni(sym2__),
                            stan::model::index_uni(sym1__)));
            }
          }
        }
        out__.write(obs_cov_offset);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      Eigen::Matrix<double,-1,1> log_lik =
        Eigen::Matrix<double,-1,1>::Constant(n_loglik,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> Omega =
        Eigen::Matrix<double,-1,-1>::Constant(n_pcor, n_pcor,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> Sigma =
        Eigen::Matrix<double,-1,-1>::Constant(n_pcor, n_pcor,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> xstar =
        Eigen::Matrix<double,-1,-1>::Constant(K, 1,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> future_devs =
        Eigen::Matrix<double,-1,1>::Constant(K,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> SigmaKnots_pred =
        Eigen::Matrix<double,-1,-1>::Constant(n_knots, n_knots,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,1,-1> SigmaOffDiag_pred =
        Eigen::Matrix<double,1,-1>::Constant(n_knots,
          std::numeric_limits<double>::quiet_NaN());
      int j = std::numeric_limits<int>::min();
      current_statement__ = 244;
      j = 0;
      current_statement__ = 248;
      if (stan::math::logical_eq(est_cor, 1)) {
        current_statement__ = 245;
        stan::model::assign(Omega,
          stan::math::multiply_lower_tri_self_transpose(Lcorr),
          "assigning variable Omega");
        current_statement__ = 246;
        stan::model::assign(Sigma,
          stan::math::quad_form_diag(Omega, sigma_vec),
          "assigning variable Sigma");
      }
      current_statement__ = 294;
      if (stan::math::logical_eq(est_cor, 0)) {
        current_statement__ = 292;
        if (stan::math::logical_eq(long_format, 0)) {
          current_statement__ = 284;
          j = 0;
          current_statement__ = 290;
          for (int n = 1; n <= N; ++n) {
            current_statement__ = 288;
            for (int p = 1; p <= P; ++p) {
              current_statement__ = 285;
              j = (j + 1);
              current_statement__ = 286;
              stan::model::assign(log_lik,
                stan::math::normal_lpdf<false>(
                  stan::model::rvalue(yall, "yall",
                    stan::model::index_uni(p), stan::model::index_uni(n)),
                  stan::model::rvalue(pred, "pred",
                    stan::model::index_uni(p), stan::model::index_uni(n)),
                  stan::model::rvalue(sigma_vec, "sigma_vec",
                    stan::model::index_uni(p))),
                "assigning variable log_lik", stan::model::index_uni(j));
            }
          }
        } else {
          current_statement__ = 262;
          if (stan::math::logical_eq(obs_model, 1)) {
            current_statement__ = 260;
            for (int i = 1; i <= n_pos; ++i) {
              current_statement__ = 259;
              stan::model::assign(log_lik,
                stan::math::normal_lpdf<false>(
                  stan::model::rvalue(y, "y", stan::model::index_uni(i)),
                  ((stan::model::rvalue(input_offset, "input_offset",
                      stan::model::index_uni(i)) +
                  stan::model::rvalue(pred, "pred",
                    stan::model::index_uni(
                      stan::model::rvalue(row_indx_pos, "row_indx_pos",
                        stan::model::index_uni(i))),
                    stan::model::index_uni(
                      stan::model::rvalue(col_indx_pos, "col_indx_pos",
                        stan::model::index_uni(i))))) +
                  stan::model::rvalue(obs_cov_offset, "obs_cov_offset",
                    stan::model::index_uni(i))),
                  (stan::model::rvalue(sigma_vec, "sigma_vec",
                     stan::model::index_uni(
                       stan::model::rvalue(row_indx_pos, "row_indx_pos",
                         stan::model::index_uni(i)))) *
                  stan::model::rvalue(inv_var_weights_vec,
                    "inv_var_weights_vec", stan::model::index_uni(i)))),
                "assigning variable log_lik", stan::model::index_uni(i));
            }
          }
          current_statement__ = 266;
          if (stan::math::logical_eq(obs_model, 2)) {
            current_statement__ = 264;
            for (int i = 1; i <= n_pos; ++i) {
              current_statement__ = 263;
              stan::model::assign(log_lik,
                stan::math::gamma_lpdf<false>(
                  stan::model::rvalue(y, "y", stan::model::index_uni(i)),
                  stan::model::rvalue(gamma_a_vec, "gamma_a_vec",
                    stan::model::index_uni(
                      stan::model::rvalue(row_indx_pos, "row_indx_pos",
                        stan::model::index_uni(i)))),
                  (stan::model::rvalue(gamma_a_vec, "gamma_a_vec",
                     stan::model::index_uni(
                       stan::model::rvalue(row_indx_pos, "row_indx_pos",
                         stan::model::index_uni(i)))) /
                  stan::math::exp(
                    ((stan::model::rvalue(input_offset, "input_offset",
                        stan::model::index_uni(i)) +
                    stan::model::rvalue(pred, "pred",
                      stan::model::index_uni(
                        stan::model::rvalue(row_indx_pos, "row_indx_pos",
                          stan::model::index_uni(i))),
                      stan::model::index_uni(
                        stan::model::rvalue(col_indx_pos, "col_indx_pos",
                          stan::model::index_uni(i))))) +
                    stan::model::rvalue(obs_cov_offset, "obs_cov_offset",
                      stan::model::index_uni(i)))))),
                "assigning variable log_lik", stan::model::index_uni(i));
            }
          }
          current_statement__ = 270;
          if (stan::math::logical_eq(obs_model, 3)) {
            current_statement__ = 268;
            for (int i = 1; i <= n_pos; ++i) {
              current_statement__ = 267;
              stan::model::assign(log_lik,
                stan::math::poisson_log_lpmf<false>(
                  stan::model::rvalue(y_int, "y_int",
                    stan::model::index_uni(i)),
                  ((stan::model::rvalue(input_offset, "input_offset",
                      stan::model::index_uni(i)) +
                  stan::model::rvalue(pred, "pred",
                    stan::model::index_uni(
                      stan::model::rvalue(row_indx_pos, "row_indx_pos",
                        stan::model::index_uni(i))),
                    stan::model::index_uni(
                      stan::model::rvalue(col_indx_pos, "col_indx_pos",
                        stan::model::index_uni(i))))) +
                  stan::model::rvalue(obs_cov_offset, "obs_cov_offset",
                    stan::model::index_uni(i)))),
                "assigning variable log_lik", stan::model::index_uni(i));
            }
          }
          current_statement__ = 274;
          if (stan::math::logical_eq(obs_model, 4)) {
            current_statement__ = 272;
            for (int i = 1; i <= n_pos; ++i) {
              current_statement__ = 271;
              stan::model::assign(log_lik,
                stan::math::neg_binomial_2_log_lpmf<false>(
                  stan::model::rvalue(y_int, "y_int",
                    stan::model::index_uni(i)),
                  ((stan::model::rvalue(input_offset, "input_offset",
                      stan::model::index_uni(i)) +
                  stan::model::rvalue(pred, "pred",
                    stan::model::index_uni(
                      stan::model::rvalue(row_indx_pos, "row_indx_pos",
                        stan::model::index_uni(i))),
                    stan::model::index_uni(
                      stan::model::rvalue(col_indx_pos, "col_indx_pos",
                        stan::model::index_uni(i))))) +
                  stan::model::rvalue(obs_cov_offset, "obs_cov_offset",
                    stan::model::index_uni(i))),
                  stan::model::rvalue(nb_phi_vec, "nb_phi_vec",
                    stan::model::index_uni(
                      stan::model::rvalue(row_indx_pos, "row_indx_pos",
                        stan::model::index_uni(i))))),
                "assigning variable log_lik", stan::model::index_uni(i));
            }
          }
          current_statement__ = 278;
          if (stan::math::logical_eq(obs_model, 5)) {
            current_statement__ = 276;
            for (int i = 1; i <= n_pos; ++i) {
              current_statement__ = 275;
              stan::model::assign(log_lik,
                stan::math::bernoulli_logit_lpmf<false>(
                  stan::model::rvalue(y_int, "y_int",
                    stan::model::index_uni(i)),
                  ((stan::model::rvalue(input_offset, "input_offset",
                      stan::model::index_uni(i)) +
                  stan::model::rvalue(pred, "pred",
                    stan::model::index_uni(
                      stan::model::rvalue(row_indx_pos, "row_indx_pos",
                        stan::model::index_uni(i))),
                    stan::model::index_uni(
                      stan::model::rvalue(col_indx_pos, "col_indx_pos",
                        stan::model::index_uni(i))))) +
                  stan::model::rvalue(obs_cov_offset, "obs_cov_offset",
                    stan::model::index_uni(i)))),
                "assigning variable log_lik", stan::model::index_uni(i));
            }
          }
          current_statement__ = 282;
          if (stan::math::logical_eq(obs_model, 6)) {
            current_statement__ = 280;
            for (int i = 1; i <= n_pos; ++i) {
              current_statement__ = 279;
              stan::model::assign(log_lik,
                stan::math::lognormal_lpdf<false>(
                  stan::model::rvalue(y, "y", stan::model::index_uni(i)),
                  (stan::model::rvalue(input_offset, "input_offset",
                     stan::model::index_uni(i)) +
                  stan::model::rvalue(pred, "pred",
                    stan::model::index_uni(
                      stan::model::rvalue(row_indx_pos, "row_indx_pos",
                        stan::model::index_uni(i))),
                    stan::model::index_uni(
                      stan::model::rvalue(col_indx_pos, "col_indx_pos",
                        stan::model::index_uni(i))))),
                  (stan::model::rvalue(sigma_vec, "sigma_vec",
                     stan::model::index_uni(
                       stan::model::rvalue(row_indx_pos, "row_indx_pos",
                         stan::model::index_uni(i)))) +
                  stan::model::rvalue(obs_cov_offset, "obs_cov_offset",
                    stan::model::index_uni(i)))),
                "assigning variable log_lik", stan::model::index_uni(i));
            }
          }
        }
      } else {
        current_statement__ = 257;
        if (stan::math::logical_eq(long_format, 0)) {
          current_statement__ = 255;
          for (int i = 1; i <= N; ++i) {
            current_statement__ = 253;
            stan::model::assign(log_lik,
              stan::math::multi_normal_cholesky_lpdf<false>(
                stan::math::col(yall, i), stan::math::col(pred, i),
                stan::math::diag_pre_multiply(sigma_vec, Lcorr)),
              "assigning variable log_lik", stan::model::index_uni(i));
          }
        } else {
          current_statement__ = 251;
          for (int i = 1; i <= n_pos; ++i) {
            current_statement__ = 249;
            stan::model::assign(log_lik,
              stan::math::normal_lpdf<false>(
                stan::model::rvalue(y, "y", stan::model::index_uni(i)),
                (((stan::model::rvalue(input_offset, "input_offset",
                     stan::model::index_uni(i)) +
                stan::model::rvalue(pred, "pred",
                  stan::model::index_uni(
                    stan::model::rvalue(row_indx_pos, "row_indx_pos",
                      stan::model::index_uni(i))),
                  stan::model::index_uni(
                    stan::model::rvalue(col_indx_pos, "col_indx_pos",
                      stan::model::index_uni(i))))) +
                stan::model::rvalue(obs_cov_offset, "obs_cov_offset",
                  stan::model::index_uni(i))) +
                stan::model::rvalue(cond_mean_vec, "cond_mean_vec",
                  stan::model::index_uni(
                    stan::model::rvalue(row_indx_pos, "row_indx_pos",
                      stan::model::index_uni(i))))),
                (stan::model::rvalue(cond_sigma_vec, "cond_sigma_vec",
                   stan::model::index_uni(
                     stan::model::rvalue(row_indx_pos, "row_indx_pos",
                       stan::model::index_uni(i)))) *
                stan::model::rvalue(inv_var_weights_vec,
                  "inv_var_weights_vec", stan::model::index_uni(i)))),
              "assigning variable log_lik", stan::model::index_uni(i));
          }
        }
      }
      current_statement__ = 297;
      for (int k = 1; k <= K; ++k) {
        current_statement__ = 295;
        stan::model::assign(future_devs, 0, "assigning variable future_devs",
          stan::model::index_uni(k));
      }
      current_statement__ = 311;
      if (stan::math::logical_eq(est_rw, 1)) {
        current_statement__ = 309;
        for (int k = 1; k <= K; ++k) {
          current_statement__ = 306;
          if (stan::math::logical_eq(use_normal, 0)) {
            current_statement__ = 304;
            if (stan::math::logical_eq(estimate_nu, 1)) {
              current_statement__ = 302;
              stan::model::assign(future_devs,
                stan::math::student_t_rng(
                  stan::model::rvalue(nu, "nu", stan::model::index_uni(1)),
                  (stan::model::rvalue(theta_vec, "theta_vec",
                     stan::model::index_uni(k)) *
                  stan::model::rvalue(devs, "devs",
                    stan::model::index_uni(k),
                    stan::model::index_uni((N - 1)))),
                  stan::model::rvalue(sigma_pro, "sigma_pro",
                    stan::model::index_uni(k)), base_rng__),
                "assigning variable future_devs", stan::model::index_uni(k));
            } else {
              current_statement__ = 300;
              stan::model::assign(future_devs,
                stan::math::student_t_rng(nu_fixed,
                  (stan::model::rvalue(theta_vec, "theta_vec",
                     stan::model::index_uni(k)) *
                  stan::model::rvalue(devs, "devs",
                    stan::model::index_uni(k),
                    stan::model::index_uni((N - 1)))),
                  stan::model::rvalue(sigma_pro, "sigma_pro",
                    stan::model::index_uni(k)), base_rng__),
                "assigning variable future_devs", stan::model::index_uni(k));
            }
          } else {
            current_statement__ = 298;
            stan::model::assign(future_devs,
              stan::math::normal_rng(
                (stan::model::rvalue(theta_vec, "theta_vec",
                   stan::model::index_uni(k)) *
                stan::model::rvalue(devs, "devs", stan::model::index_uni(k),
                  stan::model::index_uni((N - 1)))),
                stan::model::rvalue(sigma_pro, "sigma_pro",
                  stan::model::index_uni(k)), base_rng__),
              "assigning variable future_devs", stan::model::index_uni(k));
          }
          current_statement__ = 307;
          stan::model::assign(xstar,
            (stan::model::rvalue(x, "x", stan::model::index_uni(k),
               stan::model::index_uni(N)) +
            stan::model::rvalue(future_devs, "future_devs",
              stan::model::index_uni(k))), "assigning variable xstar",
            stan::model::index_uni(k), stan::model::index_uni(1));
        }
      }
      current_statement__ = 316;
      if (stan::math::logical_eq(est_spline, 1)) {
        current_statement__ = 314;
        for (int k = 1; k <= K; ++k) {
          current_statement__ = 312;
          stan::model::assign(xstar,
            (stan::model::rvalue(spline_a_trans, "spline_a_trans",
               stan::model::index_uni(k), stan::model::index_uni(n_knots)) *
            stan::model::rvalue(X_spline, "X_spline",
              stan::model::index_uni(N), stan::model::index_uni(n_knots))),
            "assigning variable xstar", stan::model::index_uni(k),
            stan::model::index_uni(1));
        }
      }
      current_statement__ = 326;
      if (stan::math::logical_eq(est_gp, 1)) {
        current_statement__ = 324;
        for (int k = 1; k <= K; ++k) {
          current_statement__ = 317;
          stan::model::assign(SigmaKnots_pred,
            stan::math::gp_exp_quad_cov(knot_locs,
              stan::model::rvalue(sigma_pro, "sigma_pro",
                stan::model::index_uni(k)),
              stan::model::rvalue(gp_theta, "gp_theta",
                stan::model::index_uni(k))),
            "assigning variable SigmaKnots_pred");
          current_statement__ = 320;
          for (int i = 1; i <= n_knots; ++i) {
            current_statement__ = 318;
            stan::model::assign(SigmaKnots_pred,
              (stan::model::rvalue(SigmaKnots_pred, "SigmaKnots_pred",
                 stan::model::index_uni(i), stan::model::index_uni(i)) +
              gp_delta), "assigning variable SigmaKnots_pred",
              stan::model::index_uni(i), stan::model::index_uni(i));
          }
          current_statement__ = 321;
          stan::model::assign(SigmaOffDiag_pred,
            stan::math::multiply(
              stan::math::to_row_vector(
                stan::math::multiply(
                  stan::math::square(
                    stan::model::rvalue(sigma_pro, "sigma_pro",
                      stan::model::index_uni(k))),
                  stan::math::exp(
                    stan::math::divide(stan::math::minus(distKnots21_pred),
                      (2.0 *
                      stan::math::pow(
                        stan::model::rvalue(gp_theta, "gp_theta",
                          stan::model::index_uni(k)), 2.0)))))),
              stan::math::inverse_spd(SigmaKnots_pred)),
            "assigning variable SigmaOffDiag_pred");
          current_statement__ = 322;
          stan::model::assign(xstar,
            stan::math::multiply(
              stan::math::multiply(SigmaOffDiag_pred,
                stan::math::cholesky_decompose(
                  stan::model::rvalue(SigmaKnots, "SigmaKnots",
                    stan::model::index_uni(k)))),
              stan::model::rvalue(effectsKnots, "effectsKnots",
                stan::model::index_uni(k))), "assigning variable xstar",
            stan::model::index_uni(k), stan::model::index_uni(1));
        }
      }
      current_statement__ = 51;
      stan::math::check_greater_or_equal(function__, "j", j, 0);
      out__.write(log_lik);
      out__.write(Omega);
      out__.write(Sigma);
      out__.write(xstar);
      out__.write(future_devs);
      out__.write(SigmaKnots_pred);
      out__.write(SigmaOffDiag_pred);
      out__.write(j);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,-1> devs =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(devs_1dim__,
          devs_2dim__, DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(devs,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,-1>>(devs_1dim__,
          devs_2dim__), "assigning variable devs");
      out__.write(devs);
      Eigen::Matrix<local_scalar_t__,-1,1> x0 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(x0,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(K),
        "assigning variable x0");
      out__.write(x0);
      Eigen::Matrix<local_scalar_t__,-1,1> psi =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(psi_1dim__,
          DUMMY_VAR__);
      current_statement__ = 3;
      stan::model::assign(psi,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(psi_1dim__),
        "assigning variable psi");
      out__.write_free_lb(0, psi);
      Eigen::Matrix<local_scalar_t__,-1,1> z =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(z_1dim__, DUMMY_VAR__);
      current_statement__ = 4;
      stan::model::assign(z,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(z_1dim__),
        "assigning variable z");
      out__.write_free_lub(stan::model::rvalue(z_bound, "z_bound",
                             stan::model::index_uni(1)),
        stan::model::rvalue(z_bound, "z_bound", stan::model::index_uni(2)),
        z);
      Eigen::Matrix<local_scalar_t__,-1,1> zpos =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(zpos_1dim__,
          DUMMY_VAR__);
      current_statement__ = 5;
      stan::model::assign(zpos,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(zpos_1dim__),
        "assigning variable zpos");
      out__.write_free_lb(lower_bound_z, zpos);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> p_z =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(p_z_1dim__,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__));
      current_statement__ = 6;
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        current_statement__ = 6;
        for (int sym2__ = 1; sym2__ <= p_z_1dim__; ++sym2__) {
          current_statement__ = 6;
          stan::model::assign(p_z, in__.read<local_scalar_t__>(),
            "assigning variable p_z", stan::model::index_uni(sym2__),
            stan::model::index_uni(sym1__));
        }
      }
      out__.write_free_simplex(p_z);
      Eigen::Matrix<local_scalar_t__,-1,-1> spline_a =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(spline_a_1dim__,
          spline_a_2dim__, DUMMY_VAR__);
      current_statement__ = 7;
      stan::model::assign(spline_a,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,-1>>(spline_a_1dim__,
          spline_a_2dim__), "assigning variable spline_a");
      out__.write(spline_a);
      Eigen::Matrix<local_scalar_t__,-1,-1> b_obs =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(n_obs_covar, P,
          DUMMY_VAR__);
      current_statement__ = 8;
      stan::model::assign(b_obs,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,-1>>(n_obs_covar, P),
        "assigning variable b_obs");
      out__.write(b_obs);
      Eigen::Matrix<local_scalar_t__,-1,-1> b_pro =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(n_pro_covar, K,
          DUMMY_VAR__);
      current_statement__ = 9;
      stan::model::assign(b_pro,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,-1>>(n_pro_covar, K),
        "assigning variable b_pro");
      out__.write(b_pro);
      std::vector<local_scalar_t__> sigma =
        std::vector<local_scalar_t__>(sigma_1dim__, DUMMY_VAR__);
      current_statement__ = 10;
      stan::model::assign(sigma,
        in__.read<std::vector<local_scalar_t__>>(sigma_1dim__),
        "assigning variable sigma");
      out__.write_free_lb(0, sigma);
      std::vector<local_scalar_t__> gamma_a =
        std::vector<local_scalar_t__>(gamma_a_1dim__, DUMMY_VAR__);
      current_statement__ = 11;
      stan::model::assign(gamma_a,
        in__.read<std::vector<local_scalar_t__>>(gamma_a_1dim__),
        "assigning variable gamma_a");
      out__.write_free_lb(0, gamma_a);
      std::vector<local_scalar_t__> nb2_phi =
        std::vector<local_scalar_t__>(nb2_phi_1dim__, DUMMY_VAR__);
      current_statement__ = 12;
      stan::model::assign(nb2_phi,
        in__.read<std::vector<local_scalar_t__>>(nb2_phi_1dim__),
        "assigning variable nb2_phi");
      out__.write_free_lb(0, nb2_phi);
      std::vector<local_scalar_t__> nu =
        std::vector<local_scalar_t__>(estimate_nu, DUMMY_VAR__);
      current_statement__ = 13;
      stan::model::assign(nu,
        in__.read<std::vector<local_scalar_t__>>(estimate_nu),
        "assigning variable nu");
      out__.write_free_lb(2, nu);
      std::vector<local_scalar_t__> ymiss =
        std::vector<local_scalar_t__>(n_na, DUMMY_VAR__);
      current_statement__ = 14;
      stan::model::assign(ymiss,
        in__.read<std::vector<local_scalar_t__>>(n_na),
        "assigning variable ymiss");
      out__.write(ymiss);
      std::vector<local_scalar_t__> phi =
        std::vector<local_scalar_t__>(phi_1dim__, DUMMY_VAR__);
      current_statement__ = 15;
      stan::model::assign(phi,
        in__.read<std::vector<local_scalar_t__>>(phi_1dim__),
        "assigning variable phi");
      out__.write_free_lub(-1, 1, phi);
      std::vector<local_scalar_t__> theta =
        std::vector<local_scalar_t__>(theta_1dim__, DUMMY_VAR__);
      current_statement__ = 16;
      stan::model::assign(theta,
        in__.read<std::vector<local_scalar_t__>>(theta_1dim__),
        "assigning variable theta");
      out__.write_free_lub(-1, 1, theta);
      std::vector<local_scalar_t__> gp_theta =
        std::vector<local_scalar_t__>(gp_theta_1dim__, DUMMY_VAR__);
      current_statement__ = 17;
      stan::model::assign(gp_theta,
        in__.read<std::vector<local_scalar_t__>>(gp_theta_1dim__),
        "assigning variable gp_theta");
      out__.write_free_lb(0, gp_theta);
      Eigen::Matrix<local_scalar_t__,-1,-1> Lcorr =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(n_pcor, n_pcor,
          DUMMY_VAR__);
      current_statement__ = 18;
      stan::model::assign(Lcorr,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,-1>>(n_pcor, n_pcor),
        "assigning variable Lcorr");
      out__.write_free_cholesky_factor_corr(Lcorr);
      std::vector<local_scalar_t__> sigma_process =
        std::vector<local_scalar_t__>(sigma_process_1dim__, DUMMY_VAR__);
      current_statement__ = 19;
      stan::model::assign(sigma_process,
        in__.read<std::vector<local_scalar_t__>>(sigma_process_1dim__),
        "assigning variable sigma_process");
      out__.write_free_lb(0, sigma_process);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> effectsKnots =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(effectsKnots_1dim__,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(effectsKnots_2dim__,
            DUMMY_VAR__));
      current_statement__ = 20;
      for (int sym1__ = 1; sym1__ <= effectsKnots_2dim__; ++sym1__) {
        current_statement__ = 20;
        for (int sym2__ = 1; sym2__ <= effectsKnots_1dim__; ++sym2__) {
          current_statement__ = 20;
          stan::model::assign(effectsKnots, in__.read<local_scalar_t__>(),
            "assigning variable effectsKnots",
            stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
        }
      }
      out__.write(effectsKnots);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "devs", "double",
        std::vector<size_t>{static_cast<size_t>(devs_1dim__),
          static_cast<size_t>(devs_2dim__)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "x0", "double",
        std::vector<size_t>{static_cast<size_t>(K)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "psi", "double",
        std::vector<size_t>{static_cast<size_t>(psi_1dim__)});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "z", "double",
        std::vector<size_t>{static_cast<size_t>(z_1dim__)});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization", "zpos", "double",
        std::vector<size_t>{static_cast<size_t>(zpos_1dim__)});
      current_statement__ = 6;
      context__.validate_dims("parameter initialization", "p_z", "double",
        std::vector<size_t>{static_cast<size_t>(p_z_1dim__),
          static_cast<size_t>(K)});
      current_statement__ = 7;
      context__.validate_dims("parameter initialization", "spline_a",
        "double",
        std::vector<size_t>{static_cast<size_t>(spline_a_1dim__),
          static_cast<size_t>(spline_a_2dim__)});
      current_statement__ = 8;
      context__.validate_dims("parameter initialization", "b_obs", "double",
        std::vector<size_t>{static_cast<size_t>(n_obs_covar),
          static_cast<size_t>(P)});
      current_statement__ = 9;
      context__.validate_dims("parameter initialization", "b_pro", "double",
        std::vector<size_t>{static_cast<size_t>(n_pro_covar),
          static_cast<size_t>(K)});
      current_statement__ = 10;
      context__.validate_dims("parameter initialization", "sigma", "double",
        std::vector<size_t>{static_cast<size_t>(sigma_1dim__)});
      current_statement__ = 11;
      context__.validate_dims("parameter initialization", "gamma_a",
        "double", std::vector<size_t>{static_cast<size_t>(gamma_a_1dim__)});
      current_statement__ = 12;
      context__.validate_dims("parameter initialization", "nb2_phi",
        "double", std::vector<size_t>{static_cast<size_t>(nb2_phi_1dim__)});
      current_statement__ = 13;
      context__.validate_dims("parameter initialization", "nu", "double",
        std::vector<size_t>{static_cast<size_t>(estimate_nu)});
      current_statement__ = 14;
      context__.validate_dims("parameter initialization", "ymiss", "double",
        std::vector<size_t>{static_cast<size_t>(n_na)});
      current_statement__ = 15;
      context__.validate_dims("parameter initialization", "phi", "double",
        std::vector<size_t>{static_cast<size_t>(phi_1dim__)});
      current_statement__ = 16;
      context__.validate_dims("parameter initialization", "theta", "double",
        std::vector<size_t>{static_cast<size_t>(theta_1dim__)});
      current_statement__ = 17;
      context__.validate_dims("parameter initialization", "gp_theta",
        "double", std::vector<size_t>{static_cast<size_t>(gp_theta_1dim__)});
      current_statement__ = 18;
      context__.validate_dims("parameter initialization", "Lcorr", "double",
        std::vector<size_t>{static_cast<size_t>(n_pcor),
          static_cast<size_t>(n_pcor)});
      current_statement__ = 19;
      context__.validate_dims("parameter initialization", "sigma_process",
        "double",
        std::vector<size_t>{static_cast<size_t>(sigma_process_1dim__)});
      current_statement__ = 20;
      context__.validate_dims("parameter initialization", "effectsKnots",
        "double",
        std::vector<size_t>{static_cast<size_t>(effectsKnots_1dim__),
          static_cast<size_t>(effectsKnots_2dim__)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,-1> devs =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(devs_1dim__,
          devs_2dim__, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> devs_flat__;
        current_statement__ = 1;
        devs_flat__ = context__.vals_r("devs");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= devs_2dim__; ++sym1__) {
          current_statement__ = 1;
          for (int sym2__ = 1; sym2__ <= devs_1dim__; ++sym2__) {
            current_statement__ = 1;
            stan::model::assign(devs, devs_flat__[(pos__ - 1)],
              "assigning variable devs", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 1;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write(devs);
      Eigen::Matrix<local_scalar_t__,-1,1> x0 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> x0_flat__;
        current_statement__ = 2;
        x0_flat__ = context__.vals_r("x0");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 2;
          stan::model::assign(x0, x0_flat__[(pos__ - 1)],
            "assigning variable x0", stan::model::index_uni(sym1__));
          current_statement__ = 2;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(x0);
      Eigen::Matrix<local_scalar_t__,-1,1> psi =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(psi_1dim__,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> psi_flat__;
        current_statement__ = 3;
        psi_flat__ = context__.vals_r("psi");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= psi_1dim__; ++sym1__) {
          current_statement__ = 3;
          stan::model::assign(psi, psi_flat__[(pos__ - 1)],
            "assigning variable psi", stan::model::index_uni(sym1__));
          current_statement__ = 3;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(0, psi);
      Eigen::Matrix<local_scalar_t__,-1,1> z =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(z_1dim__, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> z_flat__;
        current_statement__ = 4;
        z_flat__ = context__.vals_r("z");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= z_1dim__; ++sym1__) {
          current_statement__ = 4;
          stan::model::assign(z, z_flat__[(pos__ - 1)],
            "assigning variable z", stan::model::index_uni(sym1__));
          current_statement__ = 4;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lub(stan::model::rvalue(z_bound, "z_bound",
                             stan::model::index_uni(1)),
        stan::model::rvalue(z_bound, "z_bound", stan::model::index_uni(2)),
        z);
      Eigen::Matrix<local_scalar_t__,-1,1> zpos =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(zpos_1dim__,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> zpos_flat__;
        current_statement__ = 5;
        zpos_flat__ = context__.vals_r("zpos");
        current_statement__ = 5;
        pos__ = 1;
        current_statement__ = 5;
        for (int sym1__ = 1; sym1__ <= zpos_1dim__; ++sym1__) {
          current_statement__ = 5;
          stan::model::assign(zpos, zpos_flat__[(pos__ - 1)],
            "assigning variable zpos", stan::model::index_uni(sym1__));
          current_statement__ = 5;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(lower_bound_z, zpos);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> p_z =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(p_z_1dim__,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__));
      {
        std::vector<local_scalar_t__> p_z_flat__;
        current_statement__ = 6;
        p_z_flat__ = context__.vals_r("p_z");
        current_statement__ = 6;
        pos__ = 1;
        current_statement__ = 6;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 6;
          for (int sym2__ = 1; sym2__ <= p_z_1dim__; ++sym2__) {
            current_statement__ = 6;
            stan::model::assign(p_z, p_z_flat__[(pos__ - 1)],
              "assigning variable p_z", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 6;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write_free_simplex(p_z);
      Eigen::Matrix<local_scalar_t__,-1,-1> spline_a =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(spline_a_1dim__,
          spline_a_2dim__, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> spline_a_flat__;
        current_statement__ = 7;
        spline_a_flat__ = context__.vals_r("spline_a");
        current_statement__ = 7;
        pos__ = 1;
        current_statement__ = 7;
        for (int sym1__ = 1; sym1__ <= spline_a_2dim__; ++sym1__) {
          current_statement__ = 7;
          for (int sym2__ = 1; sym2__ <= spline_a_1dim__; ++sym2__) {
            current_statement__ = 7;
            stan::model::assign(spline_a, spline_a_flat__[(pos__ - 1)],
              "assigning variable spline_a", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 7;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write(spline_a);
      Eigen::Matrix<local_scalar_t__,-1,-1> b_obs =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(n_obs_covar, P,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> b_obs_flat__;
        current_statement__ = 8;
        b_obs_flat__ = context__.vals_r("b_obs");
        current_statement__ = 8;
        pos__ = 1;
        current_statement__ = 8;
        for (int sym1__ = 1; sym1__ <= P; ++sym1__) {
          current_statement__ = 8;
          for (int sym2__ = 1; sym2__ <= n_obs_covar; ++sym2__) {
            current_statement__ = 8;
            stan::model::assign(b_obs, b_obs_flat__[(pos__ - 1)],
              "assigning variable b_obs", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 8;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write(b_obs);
      Eigen::Matrix<local_scalar_t__,-1,-1> b_pro =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(n_pro_covar, K,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> b_pro_flat__;
        current_statement__ = 9;
        b_pro_flat__ = context__.vals_r("b_pro");
        current_statement__ = 9;
        pos__ = 1;
        current_statement__ = 9;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 9;
          for (int sym2__ = 1; sym2__ <= n_pro_covar; ++sym2__) {
            current_statement__ = 9;
            stan::model::assign(b_pro, b_pro_flat__[(pos__ - 1)],
              "assigning variable b_pro", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 9;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write(b_pro);
      std::vector<local_scalar_t__> sigma =
        std::vector<local_scalar_t__>(sigma_1dim__, DUMMY_VAR__);
      current_statement__ = 10;
      sigma = context__.vals_r("sigma");
      out__.write_free_lb(0, sigma);
      std::vector<local_scalar_t__> gamma_a =
        std::vector<local_scalar_t__>(gamma_a_1dim__, DUMMY_VAR__);
      current_statement__ = 11;
      gamma_a = context__.vals_r("gamma_a");
      out__.write_free_lb(0, gamma_a);
      std::vector<local_scalar_t__> nb2_phi =
        std::vector<local_scalar_t__>(nb2_phi_1dim__, DUMMY_VAR__);
      current_statement__ = 12;
      nb2_phi = context__.vals_r("nb2_phi");
      out__.write_free_lb(0, nb2_phi);
      std::vector<local_scalar_t__> nu =
        std::vector<local_scalar_t__>(estimate_nu, DUMMY_VAR__);
      current_statement__ = 13;
      nu = context__.vals_r("nu");
      out__.write_free_lb(2, nu);
      std::vector<local_scalar_t__> ymiss =
        std::vector<local_scalar_t__>(n_na, DUMMY_VAR__);
      current_statement__ = 14;
      ymiss = context__.vals_r("ymiss");
      out__.write(ymiss);
      std::vector<local_scalar_t__> phi =
        std::vector<local_scalar_t__>(phi_1dim__, DUMMY_VAR__);
      current_statement__ = 15;
      phi = context__.vals_r("phi");
      out__.write_free_lub(-1, 1, phi);
      std::vector<local_scalar_t__> theta =
        std::vector<local_scalar_t__>(theta_1dim__, DUMMY_VAR__);
      current_statement__ = 16;
      theta = context__.vals_r("theta");
      out__.write_free_lub(-1, 1, theta);
      std::vector<local_scalar_t__> gp_theta =
        std::vector<local_scalar_t__>(gp_theta_1dim__, DUMMY_VAR__);
      current_statement__ = 17;
      gp_theta = context__.vals_r("gp_theta");
      out__.write_free_lb(0, gp_theta);
      Eigen::Matrix<local_scalar_t__,-1,-1> Lcorr =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(n_pcor, n_pcor,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> Lcorr_flat__;
        current_statement__ = 18;
        Lcorr_flat__ = context__.vals_r("Lcorr");
        current_statement__ = 18;
        pos__ = 1;
        current_statement__ = 18;
        for (int sym1__ = 1; sym1__ <= n_pcor; ++sym1__) {
          current_statement__ = 18;
          for (int sym2__ = 1; sym2__ <= n_pcor; ++sym2__) {
            current_statement__ = 18;
            stan::model::assign(Lcorr, Lcorr_flat__[(pos__ - 1)],
              "assigning variable Lcorr", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 18;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write_free_cholesky_factor_corr(Lcorr);
      std::vector<local_scalar_t__> sigma_process =
        std::vector<local_scalar_t__>(sigma_process_1dim__, DUMMY_VAR__);
      current_statement__ = 19;
      sigma_process = context__.vals_r("sigma_process");
      out__.write_free_lb(0, sigma_process);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> effectsKnots =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(effectsKnots_1dim__,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(effectsKnots_2dim__,
            DUMMY_VAR__));
      {
        std::vector<local_scalar_t__> effectsKnots_flat__;
        current_statement__ = 20;
        effectsKnots_flat__ = context__.vals_r("effectsKnots");
        current_statement__ = 20;
        pos__ = 1;
        current_statement__ = 20;
        for (int sym1__ = 1; sym1__ <= effectsKnots_2dim__; ++sym1__) {
          current_statement__ = 20;
          for (int sym2__ = 1; sym2__ <= effectsKnots_1dim__; ++sym2__) {
            current_statement__ = 20;
            stan::model::assign(effectsKnots, effectsKnots_flat__[(pos__ -
              1)], "assigning variable effectsKnots",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 20;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write(effectsKnots);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"devs", "x0", "psi", "z", "zpos",
                "p_z", "spline_a", "b_obs", "b_pro", "sigma", "gamma_a",
                "nb2_phi", "nu", "ymiss", "phi", "theta", "gp_theta",
                "Lcorr", "sigma_process", "effectsKnots"};
    if (emit_transformed_parameters__) {
      std::vector<std::string>
        temp{"pred", "Z", "yall", "sigma_vec", "gamma_a_vec", "nb_phi_vec",
             "phi_vec", "theta_vec", "x", "indicator", "psi_root",
             "Sigma_derived", "Sigma_temp", "sigma12_vec", "temp_sums",
             "temp_counts", "cond_sigma_vec", "cond_mean_vec", "sigma11",
             "sigma_pro", "spline_a_trans", "SigmaKnots", "obs_cov_offset"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::string>
        temp{"log_lik", "Omega", "Sigma", "xstar", "future_devs",
             "SigmaKnots_pred", "SigmaOffDiag_pred", "j"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(
                                                                    devs_1dim__),
                                                 static_cast<size_t>(
                                                   devs_2dim__)},
                std::vector<size_t>{static_cast<size_t>(K)},
                std::vector<size_t>{static_cast<size_t>(psi_1dim__)},
                std::vector<size_t>{static_cast<size_t>(z_1dim__)},
                std::vector<size_t>{static_cast<size_t>(zpos_1dim__)},
                std::vector<size_t>{static_cast<size_t>(p_z_1dim__),
                  static_cast<size_t>(K)},
                std::vector<size_t>{static_cast<size_t>(spline_a_1dim__),
                  static_cast<size_t>(spline_a_2dim__)},
                std::vector<size_t>{static_cast<size_t>(n_obs_covar),
                  static_cast<size_t>(P)},
                std::vector<size_t>{static_cast<size_t>(n_pro_covar),
                  static_cast<size_t>(K)},
                std::vector<size_t>{static_cast<size_t>(sigma_1dim__)},
                std::vector<size_t>{static_cast<size_t>(gamma_a_1dim__)},
                std::vector<size_t>{static_cast<size_t>(nb2_phi_1dim__)},
                std::vector<size_t>{static_cast<size_t>(estimate_nu)},
                std::vector<size_t>{static_cast<size_t>(n_na)},
                std::vector<size_t>{static_cast<size_t>(phi_1dim__)},
                std::vector<size_t>{static_cast<size_t>(theta_1dim__)},
                std::vector<size_t>{static_cast<size_t>(gp_theta_1dim__)},
                std::vector<size_t>{static_cast<size_t>(n_pcor),
                  static_cast<size_t>(n_pcor)},
                std::vector<size_t>{static_cast<size_t>(sigma_process_1dim__)},
                std::vector<size_t>{static_cast<size_t>(effectsKnots_1dim__),
                  static_cast<size_t>(effectsKnots_2dim__)}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(P),
               static_cast<size_t>(N)},
             std::vector<size_t>{static_cast<size_t>(P),
               static_cast<size_t>(K)},
             std::vector<size_t>{static_cast<size_t>(P),
               static_cast<size_t>(N)},
             std::vector<size_t>{static_cast<size_t>(sigma_vec_1dim__)},
             std::vector<size_t>{static_cast<size_t>(gamma_a_vec_1dim__)},
             std::vector<size_t>{static_cast<size_t>(nb_phi_vec_1dim__)},
             std::vector<size_t>{static_cast<size_t>(K)},
             std::vector<size_t>{static_cast<size_t>(K)},
             std::vector<size_t>{static_cast<size_t>(K),
               static_cast<size_t>(N)},
             std::vector<size_t>{static_cast<size_t>(K)},
             std::vector<size_t>{static_cast<size_t>(psi_root_1dim__)},
             std::vector<size_t>{static_cast<size_t>(Sigma_derived_1dim__),
               static_cast<size_t>(Sigma_derived_2dim__)},
             std::vector<size_t>{static_cast<size_t>(Sigma_temp_1dim__),
               static_cast<size_t>(Sigma_temp_2dim__)},
             std::vector<size_t>{static_cast<size_t>(sigma12_vec_1dim__),
               static_cast<size_t>(1)},
             std::vector<size_t>{static_cast<size_t>(temp_sums_1dim__),
               static_cast<size_t>(temp_sums_2dim__)},
             std::vector<size_t>{static_cast<size_t>(temp_counts_1dim__),
               static_cast<size_t>(temp_counts_2dim__)},
             std::vector<size_t>{static_cast<size_t>(cond_sigma_vec_1dim__)},
             std::vector<size_t>{static_cast<size_t>(cond_mean_vec_1dim__)},
             std::vector<size_t>{},
             std::vector<size_t>{static_cast<size_t>(K)},
             std::vector<size_t>{static_cast<size_t>(spline_a_trans_1dim__),
               static_cast<size_t>(spline_a_trans_2dim__)},
             std::vector<size_t>{static_cast<size_t>(K),
               static_cast<size_t>(n_knots), static_cast<size_t>(n_knots)},
             std::vector<size_t>{static_cast<size_t>(n_pos)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(n_loglik)},
             std::vector<size_t>{static_cast<size_t>(n_pcor),
               static_cast<size_t>(n_pcor)},
             std::vector<size_t>{static_cast<size_t>(n_pcor),
               static_cast<size_t>(n_pcor)},
             std::vector<size_t>{static_cast<size_t>(K),
               static_cast<size_t>(1)},
             std::vector<size_t>{static_cast<size_t>(K)},
             std::vector<size_t>{static_cast<size_t>(n_knots),
               static_cast<size_t>(n_knots)},
             std::vector<size_t>{static_cast<size_t>(n_knots)},
             std::vector<size_t>{}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= devs_2dim__; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= devs_1dim__; ++sym2__) {
        param_names__.emplace_back(std::string() + "devs" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      param_names__.emplace_back(std::string() + "x0" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= psi_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "psi" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= z_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "z" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= zpos_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "zpos" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= p_z_1dim__; ++sym2__) {
        param_names__.emplace_back(std::string() + "p_z" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= spline_a_2dim__; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= spline_a_1dim__; ++sym2__) {
        param_names__.emplace_back(std::string() + "spline_a" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= P; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= n_obs_covar; ++sym2__) {
        param_names__.emplace_back(std::string() + "b_obs" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= n_pro_covar; ++sym2__) {
        param_names__.emplace_back(std::string() + "b_pro" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= sigma_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "sigma" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= gamma_a_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "gamma_a" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= nb2_phi_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "nb2_phi" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= estimate_nu; ++sym1__) {
      param_names__.emplace_back(std::string() + "nu" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= n_na; ++sym1__) {
      param_names__.emplace_back(std::string() + "ymiss" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= phi_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "phi" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= theta_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "theta" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= gp_theta_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "gp_theta" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= n_pcor; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= n_pcor; ++sym2__) {
        param_names__.emplace_back(std::string() + "Lcorr" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= sigma_process_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "sigma_process" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= effectsKnots_2dim__; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= effectsKnots_1dim__; ++sym2__) {
        param_names__.emplace_back(std::string() + "effectsKnots" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= P; ++sym2__) {
          param_names__.emplace_back(std::string() + "pred" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= P; ++sym2__) {
          param_names__.emplace_back(std::string() + "Z" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= P; ++sym2__) {
          param_names__.emplace_back(std::string() + "yall" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= sigma_vec_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "sigma_vec" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= gamma_a_vec_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "gamma_a_vec" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= nb_phi_vec_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "nb_phi_vec" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        param_names__.emplace_back(std::string() + "phi_vec" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        param_names__.emplace_back(std::string() + "theta_vec" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          param_names__.emplace_back(std::string() + "x" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        param_names__.emplace_back(std::string() + "indicator" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= psi_root_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "psi_root" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= Sigma_derived_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= Sigma_derived_1dim__; ++sym2__) {
          param_names__.emplace_back(std::string() + "Sigma_derived" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= Sigma_temp_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= Sigma_temp_1dim__; ++sym2__) {
          param_names__.emplace_back(std::string() + "Sigma_temp" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= sigma12_vec_1dim__; ++sym2__) {
          param_names__.emplace_back(std::string() + "sigma12_vec" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= temp_sums_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= temp_sums_1dim__; ++sym2__) {
          param_names__.emplace_back(std::string() + "temp_sums" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= temp_counts_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= temp_counts_1dim__; ++sym2__) {
          param_names__.emplace_back(std::string() + "temp_counts" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= cond_sigma_vec_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "cond_sigma_vec" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= cond_mean_vec_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "cond_mean_vec" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "sigma11");
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        param_names__.emplace_back(std::string() + "sigma_pro" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= spline_a_trans_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= spline_a_trans_1dim__; ++sym2__) {
          param_names__.emplace_back(std::string() + "spline_a_trans" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= n_knots; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n_knots; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= K; ++sym3__) {
            param_names__.emplace_back(std::string() + "SigmaKnots" + '.' +
              std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' +
              std::to_string(sym1__));
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= n_pos; ++sym1__) {
        param_names__.emplace_back(std::string() + "obs_cov_offset" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= n_loglik; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= n_pcor; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n_pcor; ++sym2__) {
          param_names__.emplace_back(std::string() + "Omega" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= n_pcor; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n_pcor; ++sym2__) {
          param_names__.emplace_back(std::string() + "Sigma" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          param_names__.emplace_back(std::string() + "xstar" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        param_names__.emplace_back(std::string() + "future_devs" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= n_knots; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n_knots; ++sym2__) {
          param_names__.emplace_back(std::string() + "SigmaKnots_pred" + '.'
            + std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= n_knots; ++sym1__) {
        param_names__.emplace_back(std::string() + "SigmaOffDiag_pred" + '.'
          + std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "j");
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= devs_2dim__; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= devs_1dim__; ++sym2__) {
        param_names__.emplace_back(std::string() + "devs" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      param_names__.emplace_back(std::string() + "x0" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= psi_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "psi" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= z_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "z" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= zpos_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "zpos" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= (K - 1); ++sym1__) {
      for (int sym2__ = 1; sym2__ <= p_z_1dim__; ++sym2__) {
        param_names__.emplace_back(std::string() + "p_z" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= spline_a_2dim__; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= spline_a_1dim__; ++sym2__) {
        param_names__.emplace_back(std::string() + "spline_a" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= P; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= n_obs_covar; ++sym2__) {
        param_names__.emplace_back(std::string() + "b_obs" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= n_pro_covar; ++sym2__) {
        param_names__.emplace_back(std::string() + "b_pro" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= sigma_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "sigma" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= gamma_a_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "gamma_a" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= nb2_phi_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "nb2_phi" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= estimate_nu; ++sym1__) {
      param_names__.emplace_back(std::string() + "nu" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= n_na; ++sym1__) {
      param_names__.emplace_back(std::string() + "ymiss" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= phi_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "phi" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= theta_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "theta" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= gp_theta_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "gp_theta" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= ((n_pcor * (n_pcor - 1)) / 2); ++sym1__) {
      param_names__.emplace_back(std::string() + "Lcorr" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= sigma_process_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "sigma_process" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= effectsKnots_2dim__; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= effectsKnots_1dim__; ++sym2__) {
        param_names__.emplace_back(std::string() + "effectsKnots" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= P; ++sym2__) {
          param_names__.emplace_back(std::string() + "pred" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= P; ++sym2__) {
          param_names__.emplace_back(std::string() + "Z" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= P; ++sym2__) {
          param_names__.emplace_back(std::string() + "yall" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= sigma_vec_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "sigma_vec" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= gamma_a_vec_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "gamma_a_vec" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= nb_phi_vec_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "nb_phi_vec" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        param_names__.emplace_back(std::string() + "phi_vec" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        param_names__.emplace_back(std::string() + "theta_vec" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          param_names__.emplace_back(std::string() + "x" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        param_names__.emplace_back(std::string() + "indicator" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= psi_root_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "psi_root" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= Sigma_derived_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= Sigma_derived_1dim__; ++sym2__) {
          param_names__.emplace_back(std::string() + "Sigma_derived" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= Sigma_temp_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= Sigma_temp_1dim__; ++sym2__) {
          param_names__.emplace_back(std::string() + "Sigma_temp" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= sigma12_vec_1dim__; ++sym2__) {
          param_names__.emplace_back(std::string() + "sigma12_vec" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= temp_sums_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= temp_sums_1dim__; ++sym2__) {
          param_names__.emplace_back(std::string() + "temp_sums" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= temp_counts_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= temp_counts_1dim__; ++sym2__) {
          param_names__.emplace_back(std::string() + "temp_counts" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= cond_sigma_vec_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "cond_sigma_vec" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= cond_mean_vec_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "cond_mean_vec" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "sigma11");
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        param_names__.emplace_back(std::string() + "sigma_pro" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= spline_a_trans_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= spline_a_trans_1dim__; ++sym2__) {
          param_names__.emplace_back(std::string() + "spline_a_trans" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= n_knots; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n_knots; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= K; ++sym3__) {
            param_names__.emplace_back(std::string() + "SigmaKnots" + '.' +
              std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' +
              std::to_string(sym1__));
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= n_pos; ++sym1__) {
        param_names__.emplace_back(std::string() + "obs_cov_offset" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= n_loglik; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= n_pcor; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n_pcor; ++sym2__) {
          param_names__.emplace_back(std::string() + "Omega" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= n_pcor; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n_pcor; ++sym2__) {
          param_names__.emplace_back(std::string() + "Sigma" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          param_names__.emplace_back(std::string() + "xstar" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        param_names__.emplace_back(std::string() + "future_devs" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= n_knots; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n_knots; ++sym2__) {
          param_names__.emplace_back(std::string() + "SigmaKnots_pred" + '.'
            + std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= n_knots; ++sym1__) {
        param_names__.emplace_back(std::string() + "SigmaOffDiag_pred" + '.'
          + std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "j");
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"devs\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(devs_1dim__) + ",\"cols\":" + std::to_string(devs_2dim__) + "},\"block\":\"parameters\"},{\"name\":\"x0\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"psi\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(psi_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"z\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(z_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"zpos\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(zpos_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"p_z\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(p_z_1dim__) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "}},\"block\":\"parameters\"},{\"name\":\"spline_a\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(spline_a_1dim__) + ",\"cols\":" + std::to_string(spline_a_2dim__) + "},\"block\":\"parameters\"},{\"name\":\"b_obs\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(n_obs_covar) + ",\"cols\":" + std::to_string(P) + "},\"block\":\"parameters\"},{\"name\":\"b_pro\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(n_pro_covar) + ",\"cols\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(sigma_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"gamma_a\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(gamma_a_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"nb2_phi\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(nb2_phi_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"nu\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(estimate_nu) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"ymiss\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_na) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(phi_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"theta\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(theta_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"gp_theta\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(gp_theta_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"Lcorr\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(n_pcor) + ",\"cols\":" + std::to_string(n_pcor) + "},\"block\":\"parameters\"},{\"name\":\"sigma_process\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(sigma_process_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"effectsKnots\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(effectsKnots_1dim__) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(effectsKnots_2dim__) + "}},\"block\":\"parameters\"},{\"name\":\"pred\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(P) + ",\"cols\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"Z\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(P) + ",\"cols\":" + std::to_string(K) + "},\"block\":\"transformed_parameters\"},{\"name\":\"yall\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(P) + ",\"cols\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"sigma_vec\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(sigma_vec_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"gamma_a_vec\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(gamma_a_vec_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"nb_phi_vec\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nb_phi_vec_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"phi_vec\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"transformed_parameters\"},{\"name\":\"theta_vec\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"transformed_parameters\"},{\"name\":\"x\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(K) + ",\"cols\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"indicator\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"transformed_parameters\"},{\"name\":\"psi_root\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(psi_root_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"Sigma_derived\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(Sigma_derived_1dim__) + ",\"cols\":" + std::to_string(Sigma_derived_2dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"Sigma_temp\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(Sigma_temp_1dim__) + ",\"cols\":" + std::to_string(Sigma_temp_2dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"sigma12_vec\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(sigma12_vec_1dim__) + ",\"cols\":" + std::to_string(1) + "},\"block\":\"transformed_parameters\"},{\"name\":\"temp_sums\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(temp_sums_1dim__) + ",\"cols\":" + std::to_string(temp_sums_2dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"temp_counts\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(temp_counts_1dim__) + ",\"cols\":" + std::to_string(temp_counts_2dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"cond_sigma_vec\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(cond_sigma_vec_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"cond_mean_vec\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(cond_mean_vec_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"sigma11\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"sigma_pro\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"transformed_parameters\"},{\"name\":\"spline_a_trans\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(spline_a_trans_1dim__) + ",\"cols\":" + std::to_string(spline_a_trans_2dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"SigmaKnots\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(n_knots) + ",\"cols\":" + std::to_string(n_knots) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"obs_cov_offset\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_pos) + "},\"block\":\"transformed_parameters\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_loglik) + "},\"block\":\"generated_quantities\"},{\"name\":\"Omega\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(n_pcor) + ",\"cols\":" + std::to_string(n_pcor) + "},\"block\":\"generated_quantities\"},{\"name\":\"Sigma\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(n_pcor) + ",\"cols\":" + std::to_string(n_pcor) + "},\"block\":\"generated_quantities\"},{\"name\":\"xstar\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(K) + ",\"cols\":" + std::to_string(1) + "},\"block\":\"generated_quantities\"},{\"name\":\"future_devs\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"generated_quantities\"},{\"name\":\"SigmaKnots_pred\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(n_knots) + ",\"cols\":" + std::to_string(n_knots) + "},\"block\":\"generated_quantities\"},{\"name\":\"SigmaOffDiag_pred\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_knots) + "},\"block\":\"generated_quantities\"},{\"name\":\"j\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"devs\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(devs_1dim__) + ",\"cols\":" + std::to_string(devs_2dim__) + "},\"block\":\"parameters\"},{\"name\":\"x0\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"psi\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(psi_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"z\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(z_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"zpos\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(zpos_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"p_z\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(p_z_1dim__) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string((K -1)) + "}},\"block\":\"parameters\"},{\"name\":\"spline_a\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(spline_a_1dim__) + ",\"cols\":" + std::to_string(spline_a_2dim__) + "},\"block\":\"parameters\"},{\"name\":\"b_obs\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(n_obs_covar) + ",\"cols\":" + std::to_string(P) + "},\"block\":\"parameters\"},{\"name\":\"b_pro\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(n_pro_covar) + ",\"cols\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(sigma_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"gamma_a\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(gamma_a_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"nb2_phi\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(nb2_phi_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"nu\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(estimate_nu) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"ymiss\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_na) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(phi_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"theta\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(theta_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"gp_theta\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(gp_theta_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"Lcorr\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(((n_pcor * (n_pcor - 1)) /2)) + "},\"block\":\"parameters\"},{\"name\":\"sigma_process\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(sigma_process_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"effectsKnots\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(effectsKnots_1dim__) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(effectsKnots_2dim__) + "}},\"block\":\"parameters\"},{\"name\":\"pred\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(P) + ",\"cols\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"Z\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(P) + ",\"cols\":" + std::to_string(K) + "},\"block\":\"transformed_parameters\"},{\"name\":\"yall\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(P) + ",\"cols\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"sigma_vec\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(sigma_vec_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"gamma_a_vec\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(gamma_a_vec_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"nb_phi_vec\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nb_phi_vec_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"phi_vec\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"transformed_parameters\"},{\"name\":\"theta_vec\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"transformed_parameters\"},{\"name\":\"x\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(K) + ",\"cols\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"indicator\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"transformed_parameters\"},{\"name\":\"psi_root\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(psi_root_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"Sigma_derived\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(Sigma_derived_1dim__) + ",\"cols\":" + std::to_string(Sigma_derived_2dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"Sigma_temp\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(Sigma_temp_1dim__) + ",\"cols\":" + std::to_string(Sigma_temp_2dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"sigma12_vec\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(sigma12_vec_1dim__) + ",\"cols\":" + std::to_string(1) + "},\"block\":\"transformed_parameters\"},{\"name\":\"temp_sums\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(temp_sums_1dim__) + ",\"cols\":" + std::to_string(temp_sums_2dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"temp_counts\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(temp_counts_1dim__) + ",\"cols\":" + std::to_string(temp_counts_2dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"cond_sigma_vec\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(cond_sigma_vec_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"cond_mean_vec\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(cond_mean_vec_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"sigma11\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"sigma_pro\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"transformed_parameters\"},{\"name\":\"spline_a_trans\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(spline_a_trans_1dim__) + ",\"cols\":" + std::to_string(spline_a_trans_2dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"SigmaKnots\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(n_knots) + ",\"cols\":" + std::to_string(n_knots) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"obs_cov_offset\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_pos) + "},\"block\":\"transformed_parameters\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_loglik) + "},\"block\":\"generated_quantities\"},{\"name\":\"Omega\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(n_pcor) + ",\"cols\":" + std::to_string(n_pcor) + "},\"block\":\"generated_quantities\"},{\"name\":\"Sigma\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(n_pcor) + ",\"cols\":" + std::to_string(n_pcor) + "},\"block\":\"generated_quantities\"},{\"name\":\"xstar\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(K) + ",\"cols\":" + std::to_string(1) + "},\"block\":\"generated_quantities\"},{\"name\":\"future_devs\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"generated_quantities\"},{\"name\":\"SigmaKnots_pred\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(n_knots) + ",\"cols\":" + std::to_string(n_knots) + "},\"block\":\"generated_quantities\"},{\"name\":\"SigmaOffDiag_pred\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_knots) + "},\"block\":\"generated_quantities\"},{\"name\":\"j\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((((((((((((((((((devs_1dim__ *
      devs_2dim__) + K) + psi_1dim__) + z_1dim__) + zpos_1dim__) +
      (p_z_1dim__ * K)) + (spline_a_1dim__ * spline_a_2dim__)) + (n_obs_covar
      * P)) + (n_pro_covar * K)) + sigma_1dim__) + gamma_a_1dim__) +
      nb2_phi_1dim__) + estimate_nu) + n_na) + phi_1dim__) + theta_1dim__) +
      gp_theta_1dim__) + (n_pcor * n_pcor)) + sigma_process_1dim__) +
      (effectsKnots_1dim__ * effectsKnots_2dim__));
    const size_t num_transformed = emit_transformed_parameters *
      ((((((((((((((((((((((((P * N) + (P * K)) + (P * N)) +
      sigma_vec_1dim__) + gamma_a_vec_1dim__) + nb_phi_vec_1dim__) + K) + K)
      + (K * N)) + K) + psi_root_1dim__) + (Sigma_derived_1dim__ *
      Sigma_derived_2dim__)) + (Sigma_temp_1dim__ * Sigma_temp_2dim__)) +
      (sigma12_vec_1dim__ * 1)) + (temp_sums_1dim__ * temp_sums_2dim__)) +
      (temp_counts_1dim__ * temp_counts_2dim__)) + cond_sigma_vec_1dim__) +
      cond_mean_vec_1dim__) + 1) + K) + (spline_a_trans_1dim__ *
      spline_a_trans_2dim__)) + ((K * n_knots) * n_knots)) + n_pos));
    const size_t num_gen_quantities = emit_generated_quantities *
      ((((((((n_loglik + (n_pcor * n_pcor)) + (n_pcor * n_pcor)) + (K * 1)) +
      K) + (n_knots * n_knots)) + n_knots) + 1));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((((((((((((((((((devs_1dim__ *
      devs_2dim__) + K) + psi_1dim__) + z_1dim__) + zpos_1dim__) +
      (p_z_1dim__ * K)) + (spline_a_1dim__ * spline_a_2dim__)) + (n_obs_covar
      * P)) + (n_pro_covar * K)) + sigma_1dim__) + gamma_a_1dim__) +
      nb2_phi_1dim__) + estimate_nu) + n_na) + phi_1dim__) + theta_1dim__) +
      gp_theta_1dim__) + (n_pcor * n_pcor)) + sigma_process_1dim__) +
      (effectsKnots_1dim__ * effectsKnots_2dim__));
    const size_t num_transformed = emit_transformed_parameters *
      ((((((((((((((((((((((((P * N) + (P * K)) + (P * N)) +
      sigma_vec_1dim__) + gamma_a_vec_1dim__) + nb_phi_vec_1dim__) + K) + K)
      + (K * N)) + K) + psi_root_1dim__) + (Sigma_derived_1dim__ *
      Sigma_derived_2dim__)) + (Sigma_temp_1dim__ * Sigma_temp_2dim__)) +
      (sigma12_vec_1dim__ * 1)) + (temp_sums_1dim__ * temp_sums_2dim__)) +
      (temp_counts_1dim__ * temp_counts_2dim__)) + cond_sigma_vec_1dim__) +
      cond_mean_vec_1dim__) + 1) + K) + (spline_a_trans_1dim__ *
      spline_a_trans_2dim__)) + ((K * n_knots) * n_knots)) + n_pos));
    const size_t num_gen_quantities = emit_generated_quantities *
      ((((((((n_loglik + (n_pcor * n_pcor)) + (n_pcor * n_pcor)) + (K * 1)) +
      K) + (n_knots * n_knots)) + n_knots) + 1));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_dfa_namespace::model_dfa;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_dfa_namespace::profiles__;
}
#endif
#endif
