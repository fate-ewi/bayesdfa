// Generated by rstantools.  Do not edit by hand.

/*
    path is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    path is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with path.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_hmm_gaussian_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 139> locations_array__ =
  {" (found before start of program)",
  " (in 'hmm_gaussian', line 17, column 2 to column 18)",
  " (in 'hmm_gaussian', line 18, column 2 to column 27)",
  " (in 'hmm_gaussian', line 21, column 2 to column 18)",
  " (in 'hmm_gaussian', line 22, column 2 to column 33)",
  " (in 'hmm_gaussian', line 25, column 2 to column 32)",
  " (in 'hmm_gaussian', line 59, column 2 to column 31)",
  " (in 'hmm_gaussian', line 60, column 2 to column 32)",
  " (in 'hmm_gaussian', line 61, column 2 to column 30)",
  " (in 'hmm_gaussian', line 62, column 2 to column 29)",
  " (in 'hmm_gaussian', line 63, column 2 to column 30)",
  " (in 'hmm_gaussian', line 64, column 2 to column 20)",
  " (in 'hmm_gaussian', line 65, column 2 to column 41)",
  " (in 'hmm_gaussian', line 66, column 2 to column 20)",
  " (in 'hmm_gaussian', line 27, column 10 to column 11)",
  " (in 'hmm_gaussian', line 27, column 4 to column 30)",
  " (in 'hmm_gaussian', line 33, column 6 to column 73)",
  " (in 'hmm_gaussian', line 31, column 11 to line 34, column 5)",
  " (in 'hmm_gaussian', line 30, column 6 to column 70)",
  " (in 'hmm_gaussian', line 28, column 23 to line 31, column 5)",
  " (in 'hmm_gaussian', line 28, column 4 to line 34, column 5)",
  " (in 'hmm_gaussian', line 45, column 14 to column 112)",
  " (in 'hmm_gaussian', line 43, column 19 to line 46, column 13)",
  " (in 'hmm_gaussian', line 42, column 14 to column 112)",
  " (in 'hmm_gaussian', line 40, column 31 to line 43, column 13)",
  " (in 'hmm_gaussian', line 40, column 12 to line 46, column 13)",
  " (in 'hmm_gaussian', line 37, column 23 to line 47, column 9)",
  " (in 'hmm_gaussian', line 37, column 8 to line 47, column 9)",
  " (in 'hmm_gaussian', line 48, column 8 to column 52)",
  " (in 'hmm_gaussian', line 36, column 21 to line 49, column 7)",
  " (in 'hmm_gaussian', line 36, column 6 to line 49, column 7)",
  " (in 'hmm_gaussian', line 35, column 19 to line 50, column 5)",
  " (in 'hmm_gaussian', line 35, column 4 to line 50, column 5)",
  " (in 'hmm_gaussian', line 26, column 2 to line 51, column 3)",
  " (in 'hmm_gaussian', line 69, column 6 to column 43)",
  " (in 'hmm_gaussian', line 68, column 4 to line 69, column 43)",
  " (in 'hmm_gaussian', line 67, column 2 to line 70, column 3)",
  " (in 'hmm_gaussian', line 72, column 10 to column 11)",
  " (in 'hmm_gaussian', line 72, column 4 to column 30)",
  " (in 'hmm_gaussian', line 74, column 6 to column 26)",
  " (in 'hmm_gaussian', line 73, column 4 to line 74, column 26)",
  " (in 'hmm_gaussian', line 76, column 6 to column 12)",
  " (in 'hmm_gaussian', line 77, column 6 to column 23)",
  " (in 'hmm_gaussian', line 85, column 14 to column 109)",
  " (in 'hmm_gaussian', line 84, column 19 to line 86, column 13)",
  " (in 'hmm_gaussian', line 83, column 14 to column 109)",
  " (in 'hmm_gaussian', line 82, column 31 to line 84, column 13)",
  " (in 'hmm_gaussian', line 82, column 12 to line 86, column 13)",
  " (in 'hmm_gaussian', line 79, column 23 to line 87, column 11)",
  " (in 'hmm_gaussian', line 79, column 8 to line 87, column 11)",
  " (in 'hmm_gaussian', line 88, column 8 to column 53)",
  " (in 'hmm_gaussian', line 78, column 21 to line 89, column 7)",
  " (in 'hmm_gaussian', line 78, column 6 to line 89, column 7)",
  " (in 'hmm_gaussian', line 75, column 30 to line 90, column 5)",
  " (in 'hmm_gaussian', line 75, column 4 to line 90, column 5)",
  " (in 'hmm_gaussian', line 92, column 6 to column 41)",
  " (in 'hmm_gaussian', line 91, column 4 to line 92, column 41)",
  " (in 'hmm_gaussian', line 71, column 2 to line 93, column 3)",
  " (in 'hmm_gaussian', line 96, column 8 to column 50)",
  " (in 'hmm_gaussian', line 97, column 8 to column 47)",
  " (in 'hmm_gaussian', line 95, column 18 to line 98, column 5)",
  " (in 'hmm_gaussian', line 95, column 4 to line 98, column 5)",
  " (in 'hmm_gaussian', line 101, column 6 to column 21)",
  " (in 'hmm_gaussian', line 107, column 10 to column 64)",
  " (in 'hmm_gaussian', line 106, column 21 to line 108, column 7)",
  " (in 'hmm_gaussian', line 106, column 6 to line 108, column 7)",
  " (in 'hmm_gaussian', line 113, column 6 to column 35)",
  " (in 'hmm_gaussian', line 99, column 18 to line 114, column 5)",
  " (in 'hmm_gaussian', line 99, column 4 to line 114, column 5)",
  " (in 'hmm_gaussian', line 94, column 2 to line 115, column 3)",
  " (in 'hmm_gaussian', line 117, column 10 to column 11)",
  " (in 'hmm_gaussian', line 117, column 13 to column 14)",
  " (in 'hmm_gaussian', line 117, column 4 to column 25)",
  " (in 'hmm_gaussian', line 118, column 10 to column 11)",
  " (in 'hmm_gaussian', line 118, column 13 to column 14)",
  " (in 'hmm_gaussian', line 118, column 4 to column 30)",
  " (in 'hmm_gaussian', line 125, column 6 to column 65)",
  " (in 'hmm_gaussian', line 124, column 4 to line 125, column 65)",
  " (in 'hmm_gaussian', line 123, column 11 to line 126, column 5)",
  " (in 'hmm_gaussian', line 122, column 6 to column 65)",
  " (in 'hmm_gaussian', line 121, column 4 to line 122, column 65)",
  " (in 'hmm_gaussian', line 120, column 23 to line 123, column 5)",
  " (in 'hmm_gaussian', line 120, column 4 to line 126, column 5)",
  " (in 'hmm_gaussian', line 129, column 8 to column 45)",
  " (in 'hmm_gaussian', line 131, column 10 to column 20)",
  " (in 'hmm_gaussian', line 135, column 12 to column 98)",
  " (in 'hmm_gaussian', line 134, column 17 to line 136, column 11)",
  " (in 'hmm_gaussian', line 133, column 10 to column 96)",
  " (in 'hmm_gaussian', line 132, column 29 to line 134, column 11)",
  " (in 'hmm_gaussian', line 132, column 10 to line 136, column 11)",
  " (in 'hmm_gaussian', line 138, column 12 to column 27)",
  " (in 'hmm_gaussian', line 139, column 12 to column 34)",
  " (in 'hmm_gaussian', line 137, column 37 to line 140, column 11)",
  " (in 'hmm_gaussian', line 137, column 10 to line 140, column 11)",
  " (in 'hmm_gaussian', line 130, column 23 to line 141, column 9)",
  " (in 'hmm_gaussian', line 130, column 8 to line 141, column 9)",
  " (in 'hmm_gaussian', line 128, column 21 to line 142, column 7)",
  " (in 'hmm_gaussian', line 128, column 6 to line 142, column 7)",
  " (in 'hmm_gaussian', line 127, column 19 to line 143, column 5)",
  " (in 'hmm_gaussian', line 127, column 4 to line 143, column 5)",
  " (in 'hmm_gaussian', line 144, column 4 to column 36)",
  " (in 'hmm_gaussian', line 147, column 8 to column 23)",
  " (in 'hmm_gaussian', line 146, column 6 to line 147, column 23)",
  " (in 'hmm_gaussian', line 145, column 4 to line 147, column 23)",
  " (in 'hmm_gaussian', line 149, column 6 to column 59)",
  " (in 'hmm_gaussian', line 148, column 25 to line 150, column 5)",
  " (in 'hmm_gaussian', line 148, column 4 to line 150, column 5)",
  " (in 'hmm_gaussian', line 116, column 2 to line 151, column 3)",
  " (in 'hmm_gaussian', line 54, column 2 to column 31)",
  " (in 'hmm_gaussian', line 55, column 2 to column 28)",
  " (in 'hmm_gaussian', line 56, column 2 to column 39)",
  " (in 'hmm_gaussian', line 9, column 2 to column 17)",
  " (in 'hmm_gaussian', line 10, column 2 to column 17)",
  " (in 'hmm_gaussian', line 11, column 8 to column 9)",
  " (in 'hmm_gaussian', line 11, column 2 to column 20)",
  " (in 'hmm_gaussian', line 12, column 2 to column 25)",
  " (in 'hmm_gaussian', line 13, column 8 to column 9)",
  " (in 'hmm_gaussian', line 13, column 2 to column 24)",
  " (in 'hmm_gaussian', line 17, column 10 to column 11)",
  " (in 'hmm_gaussian', line 18, column 8 to column 9)",
  " (in 'hmm_gaussian', line 18, column 19 to column 20)",
  " (in 'hmm_gaussian', line 21, column 10 to column 11)",
  " (in 'hmm_gaussian', line 22, column 8 to column 9)",
  " (in 'hmm_gaussian', line 25, column 8 to column 9)",
  " (in 'hmm_gaussian', line 25, column 18 to column 19)",
  " (in 'hmm_gaussian', line 59, column 8 to column 9)",
  " (in 'hmm_gaussian', line 59, column 18 to column 19)",
  " (in 'hmm_gaussian', line 60, column 8 to column 9)",
  " (in 'hmm_gaussian', line 60, column 18 to column 19)",
  " (in 'hmm_gaussian', line 61, column 8 to column 9)",
  " (in 'hmm_gaussian', line 61, column 18 to column 19)",
  " (in 'hmm_gaussian', line 62, column 8 to column 9)",
  " (in 'hmm_gaussian', line 62, column 18 to column 19)",
  " (in 'hmm_gaussian', line 63, column 8 to column 9)",
  " (in 'hmm_gaussian', line 63, column 18 to column 19)",
  " (in 'hmm_gaussian', line 64, column 9 to column 10)",
  " (in 'hmm_gaussian', line 65, column 8 to column 9)",
  " (in 'hmm_gaussian', line 5, column 4 to column 22)",
  " (in 'hmm_gaussian', line 4, column 29 to line 6, column 3)"};
template <typename T0__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>,-1,1>
normalize(const T0__& x_arg__, std::ostream* pstream__);
template <typename T0__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>,-1,1>
normalize(const T0__& x_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>>;
  int current_statement__ = 0;
  const auto& x = stan::math::to_ref(x_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 137;
    return stan::math::divide(x, stan::math::sum(x));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
#include <stan_meta_header.hpp>
class model_hmm_gaussian final : public model_base_crtp<model_hmm_gaussian> {
private:
  int T;
  int K;
  std::vector<double> x_t;
  int est_sigma;
  std::vector<double> sigma_t;
public:
  ~model_hmm_gaussian() {}
  model_hmm_gaussian(stan::io::var_context& context__, unsigned int
                     random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_hmm_gaussian_namespace::model_hmm_gaussian";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 111;
      context__.validate_dims("data initialization", "T", "int",
        std::vector<size_t>{});
      T = std::numeric_limits<int>::min();
      current_statement__ = 111;
      T = context__.vals_i("T")[(1 - 1)];
      current_statement__ = 111;
      stan::math::check_greater_or_equal(function__, "T", T, 1);
      current_statement__ = 112;
      context__.validate_dims("data initialization", "K", "int",
        std::vector<size_t>{});
      K = std::numeric_limits<int>::min();
      current_statement__ = 112;
      K = context__.vals_i("K")[(1 - 1)];
      current_statement__ = 112;
      stan::math::check_greater_or_equal(function__, "K", K, 1);
      current_statement__ = 113;
      stan::math::validate_non_negative_index("x_t", "T", T);
      current_statement__ = 114;
      context__.validate_dims("data initialization", "x_t", "double",
        std::vector<size_t>{static_cast<size_t>(T)});
      x_t = std::vector<double>(T, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 114;
      x_t = context__.vals_r("x_t");
      current_statement__ = 115;
      context__.validate_dims("data initialization", "est_sigma", "int",
        std::vector<size_t>{});
      est_sigma = std::numeric_limits<int>::min();
      current_statement__ = 115;
      est_sigma = context__.vals_i("est_sigma")[(1 - 1)];
      current_statement__ = 115;
      stan::math::check_greater_or_equal(function__, "est_sigma", est_sigma,
        0);
      current_statement__ = 116;
      stan::math::validate_non_negative_index("sigma_t", "T", T);
      current_statement__ = 117;
      context__.validate_dims("data initialization", "sigma_t", "double",
        std::vector<size_t>{static_cast<size_t>(T)});
      sigma_t = std::vector<double>(T,
                  std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 117;
      sigma_t = context__.vals_r("sigma_t");
      current_statement__ = 118;
      stan::math::validate_positive_index("p_1k", "K", K);
      current_statement__ = 119;
      stan::math::validate_non_negative_index("A_ij", "K", K);
      current_statement__ = 120;
      stan::math::validate_positive_index("A_ij", "K", K);
      current_statement__ = 121;
      stan::math::validate_non_negative_index("mu_k", "K", K);
      current_statement__ = 122;
      stan::math::validate_non_negative_index("sigma_k", "K", K);
      current_statement__ = 123;
      stan::math::validate_non_negative_index("unalpha_tk", "T", T);
      current_statement__ = 124;
      stan::math::validate_non_negative_index("unalpha_tk", "K", K);
      current_statement__ = 125;
      stan::math::validate_non_negative_index("unbeta_tk", "T", T);
      current_statement__ = 126;
      stan::math::validate_non_negative_index("unbeta_tk", "K", K);
      current_statement__ = 127;
      stan::math::validate_non_negative_index("ungamma_tk", "T", T);
      current_statement__ = 128;
      stan::math::validate_non_negative_index("ungamma_tk", "K", K);
      current_statement__ = 129;
      stan::math::validate_non_negative_index("alpha_tk", "T", T);
      current_statement__ = 130;
      stan::math::validate_non_negative_index("alpha_tk", "K", K);
      current_statement__ = 131;
      stan::math::validate_non_negative_index("beta_tk", "T", T);
      current_statement__ = 132;
      stan::math::validate_non_negative_index("beta_tk", "K", K);
      current_statement__ = 133;
      stan::math::validate_non_negative_index("gamma_tk", "T", T);
      current_statement__ = 134;
      stan::math::validate_non_negative_index("gamma_tk", "K", K);
      current_statement__ = 135;
      stan::math::validate_non_negative_index("log_lik", "T", T);
      current_statement__ = 136;
      stan::math::validate_non_negative_index("zstar_t", "T", T);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = (K - 1) + (K * (K - 1)) + K + K;
  }
  inline std::string model_name() const final {
    return "model_hmm_gaussian";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_hmm_gaussian_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> p_1k =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
      current_statement__ = 1;
      p_1k = in__.template read_constrain_simplex<
               Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(lp__, K);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> A_ij =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(K,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__));
      current_statement__ = 2;
      A_ij = in__.template read_constrain_simplex<
               std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>,
               jacobian__>(lp__, K, K);
      Eigen::Matrix<local_scalar_t__,-1,1> mu_k =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
      current_statement__ = 3;
      mu_k = in__.template read_constrain_ordered<
               Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(lp__, K);
      std::vector<local_scalar_t__> sigma_k =
        std::vector<local_scalar_t__>(K, DUMMY_VAR__);
      current_statement__ = 4;
      sigma_k = in__.template read_constrain_lb<
                  std::vector<local_scalar_t__>, jacobian__>(0, lp__, K);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> unalpha_tk =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(T,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__));
      {
        current_statement__ = 14;
        stan::math::validate_non_negative_index("accumulator", "K", K);
        std::vector<local_scalar_t__> accumulator =
          std::vector<local_scalar_t__>(K, DUMMY_VAR__);
        current_statement__ = 20;
        if (stan::math::logical_eq(est_sigma, 1)) {
          current_statement__ = 18;
          stan::model::assign(unalpha_tk,
            stan::math::add(stan::math::log(p_1k),
              stan::math::normal_lpdf<false>(
                stan::model::rvalue(x_t, "x_t", stan::model::index_uni(1)),
                mu_k, sigma_k)), "assigning variable unalpha_tk",
            stan::model::index_uni(1));
        } else {
          current_statement__ = 16;
          stan::model::assign(unalpha_tk,
            stan::math::add(stan::math::log(p_1k),
              stan::math::normal_lpdf<false>(
                stan::model::rvalue(x_t, "x_t", stan::model::index_uni(1)),
                mu_k,
                stan::model::rvalue(sigma_t, "sigma_t",
                  stan::model::index_uni(1)))),
            "assigning variable unalpha_tk", stan::model::index_uni(1));
        }
        current_statement__ = 32;
        for (int t = 2; t <= T; ++t) {
          current_statement__ = 30;
          for (int j = 1; j <= K; ++j) {
            current_statement__ = 27;
            for (int i = 1; i <= K; ++i) {
              current_statement__ = 25;
              if (stan::math::logical_eq(est_sigma, 1)) {
                current_statement__ = 23;
                stan::model::assign(accumulator,
                  ((stan::model::rvalue(unalpha_tk, "unalpha_tk",
                      stan::model::index_uni((t - 1)),
                      stan::model::index_uni(i)) +
                  stan::math::log(
                    stan::model::rvalue(A_ij, "A_ij",
                      stan::model::index_uni(i), stan::model::index_uni(j))))
                  +
                  stan::math::normal_lpdf<false>(
                    stan::model::rvalue(x_t, "x_t", stan::model::index_uni(t)),
                    stan::model::rvalue(mu_k, "mu_k",
                      stan::model::index_uni(j)),
                    stan::model::rvalue(sigma_k, "sigma_k",
                      stan::model::index_uni(j)))),
                  "assigning variable accumulator", stan::model::index_uni(i));
              } else {
                current_statement__ = 21;
                stan::model::assign(accumulator,
                  ((stan::model::rvalue(unalpha_tk, "unalpha_tk",
                      stan::model::index_uni((t - 1)),
                      stan::model::index_uni(i)) +
                  stan::math::log(
                    stan::model::rvalue(A_ij, "A_ij",
                      stan::model::index_uni(i), stan::model::index_uni(j))))
                  +
                  stan::math::normal_lpdf<false>(
                    stan::model::rvalue(x_t, "x_t", stan::model::index_uni(t)),
                    stan::model::rvalue(mu_k, "mu_k",
                      stan::model::index_uni(j)),
                    stan::model::rvalue(sigma_t, "sigma_t",
                      stan::model::index_uni(t)))),
                  "assigning variable accumulator", stan::model::index_uni(i));
              }
            }
            current_statement__ = 28;
            stan::model::assign(unalpha_tk,
              stan::math::log_sum_exp(accumulator),
              "assigning variable unalpha_tk", stan::model::index_uni(t),
              stan::model::index_uni(j));
          }
        }
      }
      {
        current_statement__ = 108;
        lp_accum__.add(stan::math::student_t_lpdf<propto__>(sigma_k, 3, 0, 1));
        current_statement__ = 109;
        lp_accum__.add(stan::math::student_t_lpdf<propto__>(mu_k, 3, 0, 3));
        current_statement__ = 110;
        lp_accum__.add(stan::math::log_sum_exp(
                         stan::model::rvalue(unalpha_tk, "unalpha_tk",
                           stan::model::index_uni(T))));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_hmm_gaussian_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<double,-1,1> p_1k =
        Eigen::Matrix<double,-1,1>::Constant(K,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      p_1k = in__.template read_constrain_simplex<
               Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(lp__, K);
      std::vector<Eigen::Matrix<double,-1,1>> A_ij =
        std::vector<Eigen::Matrix<double,-1,1>>(K,
          Eigen::Matrix<double,-1,1>::Constant(K,
            std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 2;
      A_ij = in__.template read_constrain_simplex<
               std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>,
               jacobian__>(lp__, K, K);
      Eigen::Matrix<double,-1,1> mu_k =
        Eigen::Matrix<double,-1,1>::Constant(K,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      mu_k = in__.template read_constrain_ordered<
               Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(lp__, K);
      std::vector<double> sigma_k =
        std::vector<double>(K, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 4;
      sigma_k = in__.template read_constrain_lb<
                  std::vector<local_scalar_t__>, jacobian__>(0, lp__, K);
      std::vector<Eigen::Matrix<double,-1,1>> unalpha_tk =
        std::vector<Eigen::Matrix<double,-1,1>>(T,
          Eigen::Matrix<double,-1,1>::Constant(K,
            std::numeric_limits<double>::quiet_NaN()));
      out__.write(p_1k);
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          out__.write(A_ij[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      out__.write(mu_k);
      out__.write(sigma_k);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      {
        current_statement__ = 14;
        stan::math::validate_non_negative_index("accumulator", "K", K);
        std::vector<double> accumulator =
          std::vector<double>(K, std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 20;
        if (stan::math::logical_eq(est_sigma, 1)) {
          current_statement__ = 18;
          stan::model::assign(unalpha_tk,
            stan::math::add(stan::math::log(p_1k),
              stan::math::normal_lpdf<false>(
                stan::model::rvalue(x_t, "x_t", stan::model::index_uni(1)),
                mu_k, sigma_k)), "assigning variable unalpha_tk",
            stan::model::index_uni(1));
        } else {
          current_statement__ = 16;
          stan::model::assign(unalpha_tk,
            stan::math::add(stan::math::log(p_1k),
              stan::math::normal_lpdf<false>(
                stan::model::rvalue(x_t, "x_t", stan::model::index_uni(1)),
                mu_k,
                stan::model::rvalue(sigma_t, "sigma_t",
                  stan::model::index_uni(1)))),
            "assigning variable unalpha_tk", stan::model::index_uni(1));
        }
        current_statement__ = 32;
        for (int t = 2; t <= T; ++t) {
          current_statement__ = 30;
          for (int j = 1; j <= K; ++j) {
            current_statement__ = 27;
            for (int i = 1; i <= K; ++i) {
              current_statement__ = 25;
              if (stan::math::logical_eq(est_sigma, 1)) {
                current_statement__ = 23;
                stan::model::assign(accumulator,
                  ((stan::model::rvalue(unalpha_tk, "unalpha_tk",
                      stan::model::index_uni((t - 1)),
                      stan::model::index_uni(i)) +
                  stan::math::log(
                    stan::model::rvalue(A_ij, "A_ij",
                      stan::model::index_uni(i), stan::model::index_uni(j))))
                  +
                  stan::math::normal_lpdf<false>(
                    stan::model::rvalue(x_t, "x_t", stan::model::index_uni(t)),
                    stan::model::rvalue(mu_k, "mu_k",
                      stan::model::index_uni(j)),
                    stan::model::rvalue(sigma_k, "sigma_k",
                      stan::model::index_uni(j)))),
                  "assigning variable accumulator", stan::model::index_uni(i));
              } else {
                current_statement__ = 21;
                stan::model::assign(accumulator,
                  ((stan::model::rvalue(unalpha_tk, "unalpha_tk",
                      stan::model::index_uni((t - 1)),
                      stan::model::index_uni(i)) +
                  stan::math::log(
                    stan::model::rvalue(A_ij, "A_ij",
                      stan::model::index_uni(i), stan::model::index_uni(j))))
                  +
                  stan::math::normal_lpdf<false>(
                    stan::model::rvalue(x_t, "x_t", stan::model::index_uni(t)),
                    stan::model::rvalue(mu_k, "mu_k",
                      stan::model::index_uni(j)),
                    stan::model::rvalue(sigma_t, "sigma_t",
                      stan::model::index_uni(t)))),
                  "assigning variable accumulator", stan::model::index_uni(i));
              }
            }
            current_statement__ = 28;
            stan::model::assign(unalpha_tk,
              stan::math::log_sum_exp(accumulator),
              "assigning variable unalpha_tk", stan::model::index_uni(t),
              stan::model::index_uni(j));
          }
        }
      }
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= T; ++sym2__) {
            out__.write(unalpha_tk[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      std::vector<Eigen::Matrix<double,-1,1>> unbeta_tk =
        std::vector<Eigen::Matrix<double,-1,1>>(T,
          Eigen::Matrix<double,-1,1>::Constant(K,
            std::numeric_limits<double>::quiet_NaN()));
      std::vector<Eigen::Matrix<double,-1,1>> ungamma_tk =
        std::vector<Eigen::Matrix<double,-1,1>>(T,
          Eigen::Matrix<double,-1,1>::Constant(K,
            std::numeric_limits<double>::quiet_NaN()));
      std::vector<Eigen::Matrix<double,-1,1>> alpha_tk =
        std::vector<Eigen::Matrix<double,-1,1>>(T,
          Eigen::Matrix<double,-1,1>::Constant(K,
            std::numeric_limits<double>::quiet_NaN()));
      std::vector<Eigen::Matrix<double,-1,1>> beta_tk =
        std::vector<Eigen::Matrix<double,-1,1>>(T,
          Eigen::Matrix<double,-1,1>::Constant(K,
            std::numeric_limits<double>::quiet_NaN()));
      std::vector<Eigen::Matrix<double,-1,1>> gamma_tk =
        std::vector<Eigen::Matrix<double,-1,1>>(T,
          Eigen::Matrix<double,-1,1>::Constant(K,
            std::numeric_limits<double>::quiet_NaN()));
      Eigen::Matrix<double,-1,1> log_lik =
        Eigen::Matrix<double,-1,1>::Constant(T,
          std::numeric_limits<double>::quiet_NaN());
      std::vector<int> zstar_t =
        std::vector<int>(T, std::numeric_limits<int>::min());
      double logp_zstar_t = std::numeric_limits<double>::quiet_NaN();
      {
        current_statement__ = 35;
        for (int t = 1; t <= T; ++t) {
          current_statement__ = 34;
          stan::model::assign(alpha_tk,
            stan::math::softmax(
              stan::model::rvalue(unalpha_tk, "unalpha_tk",
                stan::model::index_uni(t))), "assigning variable alpha_tk",
            stan::model::index_uni(t));
        }
      }
      {
        current_statement__ = 37;
        stan::math::validate_non_negative_index("accumulator", "K", K);
        std::vector<double> accumulator =
          std::vector<double>(K, std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 40;
        for (int j = 1; j <= K; ++j) {
          current_statement__ = 39;
          stan::model::assign(unbeta_tk, 1, "assigning variable unbeta_tk",
            stan::model::index_uni(T), stan::model::index_uni(j));
        }
        current_statement__ = 54;
        for (int tforward = 0; tforward <= (T - 2); ++tforward) {
          int t = std::numeric_limits<int>::min();
          current_statement__ = 42;
          t = (T - tforward);
          current_statement__ = 52;
          for (int j = 1; j <= K; ++j) {
            current_statement__ = 49;
            for (int i = 1; i <= K; ++i) {
              current_statement__ = 47;
              if (stan::math::logical_eq(est_sigma, 1)) {
                current_statement__ = 45;
                stan::model::assign(accumulator,
                  ((stan::model::rvalue(unbeta_tk, "unbeta_tk",
                      stan::model::index_uni(t), stan::model::index_uni(i)) +
                  stan::math::log(
                    stan::model::rvalue(A_ij, "A_ij",
                      stan::model::index_uni(j), stan::model::index_uni(i))))
                  +
                  stan::math::normal_lpdf<false>(
                    stan::model::rvalue(x_t, "x_t", stan::model::index_uni(t)),
                    stan::model::rvalue(mu_k, "mu_k",
                      stan::model::index_uni(i)),
                    stan::model::rvalue(sigma_k, "sigma_k",
                      stan::model::index_uni(i)))),
                  "assigning variable accumulator", stan::model::index_uni(i));
              } else {
                current_statement__ = 43;
                stan::model::assign(accumulator,
                  ((stan::model::rvalue(unbeta_tk, "unbeta_tk",
                      stan::model::index_uni(t), stan::model::index_uni(i)) +
                  stan::math::log(
                    stan::model::rvalue(A_ij, "A_ij",
                      stan::model::index_uni(j), stan::model::index_uni(i))))
                  +
                  stan::math::normal_lpdf<false>(
                    stan::model::rvalue(x_t, "x_t", stan::model::index_uni(t)),
                    stan::model::rvalue(mu_k, "mu_k",
                      stan::model::index_uni(i)),
                    stan::model::rvalue(sigma_t, "sigma_t",
                      stan::model::index_uni(t)))),
                  "assigning variable accumulator", stan::model::index_uni(i));
              }
            }
            current_statement__ = 50;
            stan::model::assign(unbeta_tk,
              stan::math::log_sum_exp(accumulator),
              "assigning variable unbeta_tk",
              stan::model::index_uni((t - 1)), stan::model::index_uni(j));
          }
        }
        current_statement__ = 56;
        for (int t = 1; t <= T; ++t) {
          current_statement__ = 55;
          stan::model::assign(beta_tk,
            stan::math::softmax(
              stan::model::rvalue(unbeta_tk, "unbeta_tk",
                stan::model::index_uni(t))), "assigning variable beta_tk",
            stan::model::index_uni(t));
        }
      }
      {
        current_statement__ = 61;
        for (int t = 1; t <= T; ++t) {
          current_statement__ = 58;
          stan::model::assign(ungamma_tk,
            stan::math::elt_multiply(
              stan::model::rvalue(alpha_tk, "alpha_tk",
                stan::model::index_uni(t)),
              stan::model::rvalue(beta_tk, "beta_tk",
                stan::model::index_uni(t))), "assigning variable ungamma_tk",
            stan::model::index_uni(t));
          current_statement__ = 59;
          stan::model::assign(gamma_tk,
            normalize(
              stan::model::rvalue(ungamma_tk, "ungamma_tk",
                stan::model::index_uni(t)), pstream__),
            "assigning variable gamma_tk", stan::model::index_uni(t));
        }
        current_statement__ = 68;
        for (int t = 1; t <= T; ++t) {
          current_statement__ = 62;
          stan::model::assign(log_lik, 0, "assigning variable log_lik",
            stan::model::index_uni(t));
          current_statement__ = 65;
          for (int j = 1; j <= K; ++j) {
            current_statement__ = 63;
            stan::model::assign(log_lik,
              (stan::model::rvalue(log_lik, "log_lik",
                 stan::model::index_uni(t)) +
              (stan::model::rvalue(gamma_tk, "gamma_tk",
                 stan::model::index_uni(t), stan::model::index_uni(j)) *
              stan::model::rvalue(alpha_tk, "alpha_tk",
                stan::model::index_uni(t), stan::model::index_uni(j)))),
              "assigning variable log_lik", stan::model::index_uni(t));
          }
          current_statement__ = 66;
          stan::model::assign(log_lik,
            stan::math::log(
              stan::model::rvalue(log_lik, "log_lik",
                stan::model::index_uni(t))), "assigning variable log_lik",
            stan::model::index_uni(t));
        }
      }
      {
        current_statement__ = 70;
        stan::math::validate_non_negative_index("a_tk", "T", T);
        current_statement__ = 71;
        stan::math::validate_non_negative_index("a_tk", "K", K);
        std::vector<std::vector<int>> a_tk =
          std::vector<std::vector<int>>(T,
            std::vector<int>(K, std::numeric_limits<int>::min()));
        current_statement__ = 73;
        stan::math::validate_non_negative_index("delta_tk", "T", T);
        current_statement__ = 74;
        stan::math::validate_non_negative_index("delta_tk", "K", K);
        std::vector<std::vector<double>> delta_tk =
          std::vector<std::vector<double>>(T,
            std::vector<double>(K, std::numeric_limits<double>::quiet_NaN()));
        current_statement__ = 82;
        if (stan::math::logical_eq(est_sigma, 1)) {
          current_statement__ = 80;
          for (int j = 1; j <= K; ++j) {
            current_statement__ = 79;
            stan::model::assign(delta_tk,
              stan::math::normal_lpdf<false>(
                stan::model::rvalue(x_t, "x_t", stan::model::index_uni(1)),
                stan::model::rvalue(mu_k, "mu_k", stan::model::index_uni(j)),
                stan::model::rvalue(sigma_k, "sigma_k",
                  stan::model::index_uni(j))), "assigning variable delta_tk",
              stan::model::index_uni(1), stan::model::index_uni(K));
          }
        } else {
          current_statement__ = 77;
          for (int j = 1; j <= K; ++j) {
            current_statement__ = 76;
            stan::model::assign(delta_tk,
              stan::math::normal_lpdf<false>(
                stan::model::rvalue(x_t, "x_t", stan::model::index_uni(1)),
                stan::model::rvalue(mu_k, "mu_k", stan::model::index_uni(j)),
                stan::model::rvalue(sigma_t, "sigma_t",
                  stan::model::index_uni(1))), "assigning variable delta_tk",
              stan::model::index_uni(1), stan::model::index_uni(K));
          }
        }
        current_statement__ = 99;
        for (int t = 2; t <= T; ++t) {
          current_statement__ = 97;
          for (int j = 1; j <= K; ++j) {
            current_statement__ = 83;
            stan::model::assign(delta_tk, stan::math::negative_infinity(),
              "assigning variable delta_tk", stan::model::index_uni(t),
              stan::model::index_uni(j));
            current_statement__ = 95;
            for (int i = 1; i <= K; ++i) {
              double logp = std::numeric_limits<double>::quiet_NaN();
              current_statement__ = 89;
              if (stan::math::logical_eq(est_sigma, 1)) {
                current_statement__ = 87;
                logp = ((stan::model::rvalue(delta_tk, "delta_tk",
                           stan::model::index_uni((t - 1)),
                           stan::model::index_uni(i))
                  +
                  stan::math::log(
                    stan::model::rvalue(A_ij, "A_ij",
                      stan::model::index_uni(i), stan::model::index_uni(j))))
                  +
                  stan::math::normal_lpdf<false>(
                    stan::model::rvalue(x_t, "x_t", stan::model::index_uni(t)),
                    stan::model::rvalue(mu_k, "mu_k",
                      stan::model::index_uni(j)),
                    stan::model::rvalue(sigma_k, "sigma_k",
                      stan::model::index_uni(j))));
              } else {
                current_statement__ = 85;
                logp = ((stan::model::rvalue(delta_tk, "delta_tk",
                           stan::model::index_uni((t - 1)),
                           stan::model::index_uni(i))
                  +
                  stan::math::log(
                    stan::model::rvalue(A_ij, "A_ij",
                      stan::model::index_uni(i), stan::model::index_uni(j))))
                  +
                  stan::math::normal_lpdf<false>(
                    stan::model::rvalue(x_t, "x_t", stan::model::index_uni(t)),
                    stan::model::rvalue(mu_k, "mu_k",
                      stan::model::index_uni(j)),
                    stan::model::rvalue(sigma_t, "sigma_t",
                      stan::model::index_uni(t))));
              }
              current_statement__ = 93;
              if (stan::math::logical_gt(logp,
                    stan::model::rvalue(delta_tk, "delta_tk",
                      stan::model::index_uni(t), stan::model::index_uni(j)))) {
                current_statement__ = 90;
                stan::model::assign(a_tk, i, "assigning variable a_tk",
                  stan::model::index_uni(t), stan::model::index_uni(j));
                current_statement__ = 91;
                stan::model::assign(delta_tk, logp,
                  "assigning variable delta_tk", stan::model::index_uni(t),
                  stan::model::index_uni(j));
              }
            }
          }
        }
        current_statement__ = 100;
        logp_zstar_t = stan::math::max(
                         stan::model::rvalue(delta_tk, "delta_tk",
                           stan::model::index_uni(T)));
        current_statement__ = 103;
        for (int j = 1; j <= K; ++j) {
          current_statement__ = 102;
          if (stan::math::logical_eq(
                stan::model::rvalue(delta_tk, "delta_tk",
                  stan::model::index_uni(T), stan::model::index_uni(j)),
                logp_zstar_t)) {
            current_statement__ = 101;
            stan::model::assign(zstar_t, j, "assigning variable zstar_t",
              stan::model::index_uni(T));
          }
        }
        current_statement__ = 106;
        for (int t = 1; t <= (T - 1); ++t) {
          current_statement__ = 104;
          stan::model::assign(zstar_t,
            stan::model::rvalue(a_tk, "a_tk",
              stan::model::index_uni(((T - t) + 1)),
              stan::model::index_uni(
                stan::model::rvalue(zstar_t, "zstar_t",
                  stan::model::index_uni(((T - t) + 1))))),
            "assigning variable zstar_t", stan::model::index_uni((T - t)));
        }
      }
      current_statement__ = 12;
      stan::math::check_greater_or_equal(function__, "zstar_t", zstar_t, 1);
      current_statement__ = 12;
      stan::math::check_less_or_equal(function__, "zstar_t", zstar_t, K);
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= T; ++sym2__) {
          out__.write(unbeta_tk[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= T; ++sym2__) {
          out__.write(ungamma_tk[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= T; ++sym2__) {
          out__.write(alpha_tk[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= T; ++sym2__) {
          out__.write(beta_tk[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= T; ++sym2__) {
          out__.write(gamma_tk[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      out__.write(log_lik);
      out__.write(zstar_t);
      out__.write(logp_zstar_t);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> p_1k =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(p_1k,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(K),
        "assigning variable p_1k");
      out__.write_free_simplex(p_1k);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> A_ij =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(K,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__));
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        current_statement__ = 2;
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          current_statement__ = 2;
          stan::model::assign(A_ij, in__.read<local_scalar_t__>(),
            "assigning variable A_ij", stan::model::index_uni(sym2__),
            stan::model::index_uni(sym1__));
        }
      }
      out__.write_free_simplex(A_ij);
      Eigen::Matrix<local_scalar_t__,-1,1> mu_k =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
      current_statement__ = 3;
      stan::model::assign(mu_k,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(K),
        "assigning variable mu_k");
      out__.write_free_ordered(mu_k);
      std::vector<local_scalar_t__> sigma_k =
        std::vector<local_scalar_t__>(K, DUMMY_VAR__);
      current_statement__ = 4;
      stan::model::assign(sigma_k,
        in__.read<std::vector<local_scalar_t__>>(K),
        "assigning variable sigma_k");
      out__.write_free_lb(0, sigma_k);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "p_1k", "double",
        std::vector<size_t>{static_cast<size_t>(K)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "A_ij", "double",
        std::vector<size_t>{static_cast<size_t>(K), static_cast<size_t>(K)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "mu_k", "double",
        std::vector<size_t>{static_cast<size_t>(K)});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "sigma_k",
        "double", std::vector<size_t>{static_cast<size_t>(K)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> p_1k =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> p_1k_flat__;
        current_statement__ = 1;
        p_1k_flat__ = context__.vals_r("p_1k");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 1;
          stan::model::assign(p_1k, p_1k_flat__[(pos__ - 1)],
            "assigning variable p_1k", stan::model::index_uni(sym1__));
          current_statement__ = 1;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_simplex(p_1k);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> A_ij =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(K,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__));
      {
        std::vector<local_scalar_t__> A_ij_flat__;
        current_statement__ = 2;
        A_ij_flat__ = context__.vals_r("A_ij");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 2;
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            current_statement__ = 2;
            stan::model::assign(A_ij, A_ij_flat__[(pos__ - 1)],
              "assigning variable A_ij", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 2;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write_free_simplex(A_ij);
      Eigen::Matrix<local_scalar_t__,-1,1> mu_k =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> mu_k_flat__;
        current_statement__ = 3;
        mu_k_flat__ = context__.vals_r("mu_k");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 3;
          stan::model::assign(mu_k, mu_k_flat__[(pos__ - 1)],
            "assigning variable mu_k", stan::model::index_uni(sym1__));
          current_statement__ = 3;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_ordered(mu_k);
      std::vector<local_scalar_t__> sigma_k =
        std::vector<local_scalar_t__>(K, DUMMY_VAR__);
      current_statement__ = 4;
      sigma_k = context__.vals_r("sigma_k");
      out__.write_free_lb(0, sigma_k);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"p_1k", "A_ij", "mu_k", "sigma_k"};
    if (emit_transformed_parameters__) {
      std::vector<std::string> temp{"unalpha_tk"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::string>
        temp{"unbeta_tk", "ungamma_tk", "alpha_tk", "beta_tk", "gamma_tk",
             "log_lik", "zstar_t", "logp_zstar_t"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(K)},
                std::vector<size_t>{static_cast<size_t>(K),
                  static_cast<size_t>(K)},
                std::vector<size_t>{static_cast<size_t>(K)},
                std::vector<size_t>{static_cast<size_t>(K)}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(T),
               static_cast<size_t>(K)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(T),
               static_cast<size_t>(K)},
             std::vector<size_t>{static_cast<size_t>(T),
               static_cast<size_t>(K)},
             std::vector<size_t>{static_cast<size_t>(T),
               static_cast<size_t>(K)},
             std::vector<size_t>{static_cast<size_t>(T),
               static_cast<size_t>(K)},
             std::vector<size_t>{static_cast<size_t>(T),
               static_cast<size_t>(K)},
             std::vector<size_t>{static_cast<size_t>(T)},
             std::vector<size_t>{static_cast<size_t>(T)},
             std::vector<size_t>{}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      param_names__.emplace_back(std::string() + "p_1k" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
        param_names__.emplace_back(std::string() + "A_ij" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      param_names__.emplace_back(std::string() + "mu_k" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      param_names__.emplace_back(std::string() + "sigma_k" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= T; ++sym2__) {
          param_names__.emplace_back(std::string() + "unalpha_tk" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= T; ++sym2__) {
          param_names__.emplace_back(std::string() + "unbeta_tk" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= T; ++sym2__) {
          param_names__.emplace_back(std::string() + "ungamma_tk" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= T; ++sym2__) {
          param_names__.emplace_back(std::string() + "alpha_tk" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= T; ++sym2__) {
          param_names__.emplace_back(std::string() + "beta_tk" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= T; ++sym2__) {
          param_names__.emplace_back(std::string() + "gamma_tk" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
        param_names__.emplace_back(std::string() + "zstar_t" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "logp_zstar_t");
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= (K - 1); ++sym1__) {
      param_names__.emplace_back(std::string() + "p_1k" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= (K - 1); ++sym1__) {
      for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
        param_names__.emplace_back(std::string() + "A_ij" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      param_names__.emplace_back(std::string() + "mu_k" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      param_names__.emplace_back(std::string() + "sigma_k" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= T; ++sym2__) {
          param_names__.emplace_back(std::string() + "unalpha_tk" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= T; ++sym2__) {
          param_names__.emplace_back(std::string() + "unbeta_tk" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= T; ++sym2__) {
          param_names__.emplace_back(std::string() + "ungamma_tk" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= T; ++sym2__) {
          param_names__.emplace_back(std::string() + "alpha_tk" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= T; ++sym2__) {
          param_names__.emplace_back(std::string() + "beta_tk" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= T; ++sym2__) {
          param_names__.emplace_back(std::string() + "gamma_tk" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
        param_names__.emplace_back(std::string() + "zstar_t" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "logp_zstar_t");
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"p_1k\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"A_ij\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "}},\"block\":\"parameters\"},{\"name\":\"mu_k\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"sigma_k\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"unalpha_tk\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(T) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"unbeta_tk\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(T) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "}},\"block\":\"generated_quantities\"},{\"name\":\"ungamma_tk\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(T) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "}},\"block\":\"generated_quantities\"},{\"name\":\"alpha_tk\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(T) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "}},\"block\":\"generated_quantities\"},{\"name\":\"beta_tk\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(T) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "}},\"block\":\"generated_quantities\"},{\"name\":\"gamma_tk\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(T) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "}},\"block\":\"generated_quantities\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(T) + "},\"block\":\"generated_quantities\"},{\"name\":\"zstar_t\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(T) + ",\"element_type\":{\"name\":\"int\"}},\"block\":\"generated_quantities\"},{\"name\":\"logp_zstar_t\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"p_1k\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string((K -1)) + "},\"block\":\"parameters\"},{\"name\":\"A_ij\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string((K -1)) + "}},\"block\":\"parameters\"},{\"name\":\"mu_k\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"sigma_k\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"unalpha_tk\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(T) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"unbeta_tk\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(T) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "}},\"block\":\"generated_quantities\"},{\"name\":\"ungamma_tk\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(T) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "}},\"block\":\"generated_quantities\"},{\"name\":\"alpha_tk\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(T) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "}},\"block\":\"generated_quantities\"},{\"name\":\"beta_tk\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(T) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "}},\"block\":\"generated_quantities\"},{\"name\":\"gamma_tk\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(T) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "}},\"block\":\"generated_quantities\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(T) + "},\"block\":\"generated_quantities\"},{\"name\":\"zstar_t\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(T) + ",\"element_type\":{\"name\":\"int\"}},\"block\":\"generated_quantities\"},{\"name\":\"logp_zstar_t\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((K + (K * K)) + K) + K);
    const size_t num_transformed = emit_transformed_parameters * ((T * K));
    const size_t num_gen_quantities = emit_generated_quantities * (((((((((T
      * K) + (T * K)) + (T * K)) + (T * K)) + (T * K)) + T) + T) + 1));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((K + (K * K)) + K) + K);
    const size_t num_transformed = emit_transformed_parameters * ((T * K));
    const size_t num_gen_quantities = emit_generated_quantities * (((((((((T
      * K) + (T * K)) + (T * K)) + (T * K)) + (T * K)) + T) + T) + 1));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_hmm_gaussian_namespace::model_hmm_gaussian;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_hmm_gaussian_namespace::profiles__;
}
#endif
#endif
